Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.
--
--Create two users in defining db namespace
--

CREATE USER b2c IDENTIFIED BY b2c
Command completed successfully, 0 rows affected.


COMMIT WORK
Command completed successfully, 0 rows affected.



CREATE USER b2b IDENTIFIED BY b2b
Command completed successfully, 0 rows affected.


COMMIT WORK
Command completed successfully, 0 rows affected.


SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.

// the source for this section is 
// id_generator.sql





create table das_id_generator (
	id_space_name	varchar(60)	not null,
	seed	numeric(19,0)	not null,
	batch_size	integer	not null,
	prefix	varchar(10)	null,
	suffix	varchar(10)	null
, primary key (id_space_name))
Command completed successfully, 0 rows affected.



alter table das_id_generator set pessimistic
Command completed successfully, 0 rows affected.




create table das_secure_id_gen (
	id_space_name	varchar(60)	not null,
	seed	numeric(19,0)	not null,
	batch_size	integer	not null,
	ids_per_batch	integer	null,
	prefix	varchar(10)	null,
	suffix	varchar(10)	null
, primary key (id_space_name))
Command completed successfully, 0 rows affected.



alter table das_secure_id_gen set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// cluster_name_ddl.sql





create table das_cluster_name (
	cluster_name	varchar(255)	not null,
	saved_date	bigint	not null)
Command completed successfully, 0 rows affected.



alter table das_cluster_name set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// dms_limbo_ddl.sql




//- This table is where limbo instance/clients identify themselves. --There should only be one entry in this table for each Dynamo running PatchBay with message delays enabled.

create table dms_limbo (
	limbo_name	varchar(250)	not null,
	limbo_id	numeric(19,0)	not null
, primary key (limbo_name))
Command completed successfully, 0 rows affected.



alter table dms_limbo set pessimistic
Command completed successfully, 0 rows affected.



//- The following four tables comprise the parts of the stored messages.

create table dms_limbo_msg (
	msg_id	numeric(19,0)	not null,
	limbo_id	numeric(19,0)	not null,
	delivery_date	numeric(19,0)	not null,
	delivery_count	numeric(2,0)	not null,
	msg_src_name	varchar(250)	not null,
	port_name	varchar(250)	not null,
	msg_class	varchar(250)	not null,
	msg_class_type	numeric(1,0)	not null,
	jms_type	varchar(250)	null,
	jms_expiration	numeric(19,0)	null,
	jms_correlationid	varchar(250)	null
, primary key (msg_id))
Command completed successfully, 0 rows affected.



create index dms_limbo_read_idx on dms_limbo_msg (limbo_id,delivery_date)
Command completed successfully, 0 rows affected.


alter table dms_limbo_msg set pessimistic
Command completed successfully, 0 rows affected.



//- If serialized reply-to destinations are known to be small enough, this binary column's size can be reduced for efficiency.  The size here has been chosen to work with local dms and SQL-JMS.

create table dms_limbo_replyto (
	msg_id	numeric(19,0)	not null,
	jms_replyto	varbinary(500)	null
, primary key (msg_id))
Command completed successfully, 0 rows affected.



alter table dms_limbo_replyto set pessimistic
Command completed successfully, 0 rows affected.



//- If serialized message bodies are known to be small enough, this binary column's size can be reduced for efficiency.  The size here has been chosen to work with almost all types of messages but may be larger than necessary.  Actual usage analysis is recommended for finding the optimal binary column size.

create table dms_limbo_body (
	msg_id	numeric(19,0)	not null,
	msg_body	long varbinary	null
, primary key (msg_id))
Command completed successfully, 0 rows affected.



alter table dms_limbo_body set pessimistic
Command completed successfully, 0 rows affected.



//- This table represents a map of properties for messages stored above, i.e.  there can be multiple rows in this table for a single row in the preceeding tables.

create table dms_limbo_props (
	msg_id	numeric(19,0)	not null,
	prop_name	varchar(250)	not null,
	prop_value	varchar(250)	not null
, primary key (msg_id,prop_name))
Command completed successfully, 0 rows affected.



alter table dms_limbo_props set pessimistic
Command completed successfully, 0 rows affected.




create table dms_limbo_ptypes (
	msg_id	numeric(19,0)	not null,
	prop_name	varchar(250)	not null,
	prop_type	numeric(1,0)	not null
, primary key (msg_id,prop_name))
Command completed successfully, 0 rows affected.



alter table dms_limbo_ptypes set pessimistic
Command completed successfully, 0 rows affected.




create table dms_limbo_delay (
	msg_id	numeric(19,0)	not null,
	delay	numeric(19,0)	not null,
	max_attempts	numeric(2,0)	not null,
	failure_port	varchar(250)	not null,
	jms_timestamp	numeric(19,0)	null,
	jms_deliverymode	numeric(10,0)	null,
	jms_priority	numeric(10,0)	null,
	jms_messageid	varchar(250)	null,
	jms_redelivered	numeric(1,0)	null,
	jms_destination	varbinary(500)	null
, primary key (msg_id))
Command completed successfully, 0 rows affected.



alter table dms_limbo_delay set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// create_sql_jms_ddl.sql





create table dms_client (
	client_name	varchar(250)	not null,
	client_id	numeric(19,0)	null
, primary key (client_name))
Command completed successfully, 0 rows affected.



alter table dms_client set pessimistic
Command completed successfully, 0 rows affected.




create table dms_queue (
	queue_name	varchar(250)	null,
	queue_id	numeric(19,0)	not null,
	temp_id	numeric(19,0)	null
, primary key (queue_id))
Command completed successfully, 0 rows affected.



alter table dms_queue set pessimistic
Command completed successfully, 0 rows affected.




create table dms_queue_recv (
	client_id	numeric(19,0)	null,
	receiver_id	numeric(19,0)	not null,
	queue_id	numeric(19,0)	null
, primary key (receiver_id))
Command completed successfully, 0 rows affected.



alter table dms_queue_recv set pessimistic
Command completed successfully, 0 rows affected.




create table dms_queue_entry (
	queue_id	numeric(19,0)	not null,
	msg_id	numeric(19,0)	not null,
	delivery_date	numeric(19,0)	null,
	handling_client_id	numeric(19,0)	null,
	read_state	numeric(19,0)	null
, primary key (queue_id,msg_id))
Command completed successfully, 0 rows affected.



alter table dms_queue_entry set pessimistic
Command completed successfully, 0 rows affected.




create table dms_topic (
	topic_name	varchar(250)	null,
	topic_id	numeric(19,0)	not null,
	temp_id	numeric(19,0)	null
, primary key (topic_id))
Command completed successfully, 0 rows affected.



alter table dms_topic set pessimistic
Command completed successfully, 0 rows affected.




create table dms_topic_sub (
	client_id	numeric(19,0)	null,
	subscriber_name	varchar(250)	null,
	subscriber_id	numeric(19,0)	not null,
	topic_id	numeric(19,0)	null,
	durable	numeric(1,0)	null,
	active	numeric(1,0)	null
, primary key (subscriber_id))
Command completed successfully, 0 rows affected.



alter table dms_topic_sub set pessimistic
Command completed successfully, 0 rows affected.




create table dms_topic_entry (
	subscriber_id	numeric(19,0)	not null,
	msg_id	numeric(19,0)	not null,
	delivery_date	numeric(19,0)	null,
	read_state	numeric(19,0)	null
, primary key (subscriber_id,msg_id))
Command completed successfully, 0 rows affected.



create index dms_topic_msg_idx on dms_topic_entry (msg_id,subscriber_id)
Command completed successfully, 0 rows affected.


create index dms_topic_read_idx on dms_topic_entry (read_state,delivery_date)
Command completed successfully, 0 rows affected.


alter table dms_topic_entry set pessimistic
Command completed successfully, 0 rows affected.




create table dms_msg (
	msg_class	varchar(250)	null,
	has_properties	numeric(1,0)	null,
	reference_count	numeric(10,0)	null,
	msg_id	numeric(19,0)	not null,
	timestamp	numeric(19,0)	null,
	correlation_id	varchar(250)	null,
	reply_to	numeric(19,0)	null,
	destination	numeric(19,0)	null,
	delivery_mode	numeric(1,0)	null,
	redelivered	numeric(1,0)	null,
	type	varchar(250)	null,
	expiration	numeric(19,0)	null,
	priority	numeric(1,0)	null,
	small_body	varbinary(250)	null,
	large_body	long varbinary	null
, primary key (msg_id))
Command completed successfully, 0 rows affected.



alter table dms_msg set pessimistic
Command completed successfully, 0 rows affected.




create table dms_msg_properties (
	msg_id	numeric(19,0)	not null,
	data_type	numeric(1,0)	null,
	name	varchar(250)	not null,
	value	varchar(250)	null
, primary key (msg_id,name))
Command completed successfully, 0 rows affected.



alter table dms_msg_properties set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// create_staff_ddl.sql




//- SQL for creating the Dynamo Staff Repository for the GSA
//- Primary account table.
//-  Type=1 is a login account.  The first_name, last_name, and password         fields are valid for this type of account.
//- Type=2 is a group account.  The description field is valid for        this type of account.
//- Type=4 is a privilege account.  The description field is valid for        this type of account.

create table das_account (
	account_name	wvarchar(254)	not null,
	type	integer	not null,
	first_name	wvarchar(254)	null,
	last_name	wvarchar(254)	null,
	password	varchar(254)	null,
	description	wvarchar(254)	null,
	lastpwdupdate	timestamp	null
, primary key (account_name))
Command completed successfully, 0 rows affected.



alter table das_account set pessimistic
Command completed successfully, 0 rows affected.




create table das_group_assoc (
	account_name	wvarchar(254)	not null,
	sequence_num	integer	not null,
	group_name	wvarchar(254)	not null
, primary key (account_name,sequence_num))
Command completed successfully, 0 rows affected.



alter table das_group_assoc set pessimistic
Command completed successfully, 0 rows affected.



//- Adding the previous password information

create table das_acct_prevpwd (
	account_name	wvarchar(254)	not null,
	seq_num	integer	not null,
	prevpwd	varchar(35)	null
, primary key (account_name,seq_num)
, foreign key (account_name) references das_account (account_name))
Command completed successfully, 0 rows affected.



alter table das_acct_prevpwd set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// create_gsa_subscribers_ddl.sql





create table das_gsa_subscriber (
	id	integer	not null,
	address	varchar(50)	not null,
	port	integer	not null,
	repository	varchar(256)	not null,
	itemdescriptor	varchar(256)	not null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table das_gsa_subscriber set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// create_sds.sql





create table das_sds (
	sds_name	varchar(50)	not null,
	curr_ds_name	varchar(50)	null,
	dynamo_server	varchar(80)	null,
	last_modified	timestamp	null
, primary key (sds_name))
Command completed successfully, 0 rows affected.



alter table das_sds set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// integration_data_ddl.sql





create table if_integ_data (
	item_id	varchar(40)	not null,
	descriptor	wvarchar(255)	not null,
	repository	wvarchar(255)	not null,
	state	integer	not null,
	last_import	timestamp	null,
	version	integer	not null
, primary key (item_id,descriptor,repository))
Command completed successfully, 0 rows affected.



alter table if_integ_data set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// rl_example_ddl.sql





create table rlex_file_folder (
	folder_id	varchar(40)	not null,
	folder_name	wvarchar(255)	not null,
	parent_folder	varchar(40)	null
, primary key (folder_id))
Command completed successfully, 0 rows affected.



create index rlex_file_fold_id1 on rlex_file_folder (folder_name)
Command completed successfully, 0 rows affected.


alter table rlex_file_folder set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_file_asset (
	file_asset_id	varchar(40)	not null,
	asset_type	numeric(19)	not null,
	filename	wvarchar(255)	not null,
	last_modified	timestamp	null,
	size_bytes	numeric(19)	null,
	parent_folder	varchar(40)	null
, primary key (file_asset_id)
, foreign key (parent_folder) references rlex_file_folder (folder_id))
Command completed successfully, 0 rows affected.



create index rlex_file_asst_id2 on rlex_file_asset (parent_folder)
Command completed successfully, 0 rows affected.


create index rlex_file_asst_id1 on rlex_file_asset (filename)
Command completed successfully, 0 rows affected.


create index rlex_file_asst_id3 on rlex_file_asset (size_bytes)
Command completed successfully, 0 rows affected.


create index rlex_file_asst_id4 on rlex_file_asset (last_modified)
Command completed successfully, 0 rows affected.


alter table rlex_file_asset set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_text_file (
	text_file_id	varchar(40)	not null,
	text_content	long varchar	null
, primary key (text_file_id)
, foreign key (text_file_id) references rlex_file_asset (file_asset_id))
Command completed successfully, 0 rows affected.



alter table rlex_text_file set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_binary_file (
	binary_file_id	varchar(40)	not null,
	binary_content	long varbinary	null
, primary key (binary_file_id)
, foreign key (binary_file_id) references rlex_file_asset (file_asset_id))
Command completed successfully, 0 rows affected.



alter table rlex_binary_file set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_article_file (
	article_file_id	varchar(40)	not null,
	published_date	timestamp	null,
	keywords	varchar(80)	null
, primary key (article_file_id)
, foreign key (article_file_id) references rlex_file_asset (file_asset_id))
Command completed successfully, 0 rows affected.



alter table rlex_article_file set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_user (
	id	varchar(32)	not null,
	nam_col	varchar(32)	null,
	age_col	varchar(32)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table rlex_user set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_address (
	addr_id	varchar(32)	not null,
	user_id	varchar(32)	null,
	street	varchar(32)	null,
	city	varchar(32)	null
, primary key (addr_id)
, foreign key (user_id) references rlex_user (id))
Command completed successfully, 0 rows affected.



alter table rlex_address set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_contact (
	con_id	varchar(32)	not null,
	rank	integer	not null,
	user_id	varchar(32)	null,
	email	varchar(255)	null,
	url	varchar(255)	null
, primary key (con_id,rank)
, foreign key (user_id) references rlex_user (id))
Command completed successfully, 0 rows affected.



alter table rlex_contact set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_phone (
	phone_id	varchar(32)	not null,
	kind	varchar(64)	not null,
	user_id	varchar(32)	null,
	pnumber	varchar(64)	null
, primary key (phone_id,kind)
, foreign key (user_id) references rlex_user (id))
Command completed successfully, 0 rows affected.



alter table rlex_phone set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_job (
	id	varchar(32)	not null,
	jobtype	varchar(32)	null,
	title	varchar(32)	null
, primary key (id)
, foreign key (id) references rlex_user (id))
Command completed successfully, 0 rows affected.



alter table rlex_job set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_subjects (
	id	varchar(32)	not null,
	seq_num	integer	not null,
	subject	varchar(32)	null
, primary key (id,seq_num)
, foreign key (id) references rlex_user (id))
Command completed successfully, 0 rows affected.



alter table rlex_subjects set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_worst (
	id	varchar(32)	not null,
	seq_num	integer	not null,
	subject	varchar(32)	null
, primary key (id,seq_num)
, foreign key (id) references rlex_user (id))
Command completed successfully, 0 rows affected.



alter table rlex_worst set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_credit_card (
	id	varchar(32)	not null,
	card_key	varchar(32)	not null,
	card_num	varchar(32)	null
, primary key (id,card_key)
, foreign key (id) references rlex_user (id))
Command completed successfully, 0 rows affected.



alter table rlex_credit_card set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// nucleus_security_ddl.sql





create table das_nucl_sec (
	func_name	wvarchar(254)	not null,
	policy	wvarchar(254)	not null
, primary key (func_name))
Command completed successfully, 0 rows affected.



alter table das_nucl_sec set pessimistic
Command completed successfully, 0 rows affected.




create table das_ns_acls (
	id	wvarchar(254)	not null,
	index_num	integer	not null,
	acl	wvarchar(254)	not null
, primary key (id,index_num))
Command completed successfully, 0 rows affected.



alter table das_ns_acls set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// media_ddl.sql




//-     media content repository tables.  

create table media_folder (
	folder_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	description	wvarchar(254)	null,
	name	wvarchar(254)	not null,
	path	wvarchar(254)	not null,
	parent_folder_id	varchar(40)	null
, primary key (folder_id)
, foreign key (parent_folder_id) references media_folder (folder_id))
Command completed successfully, 0 rows affected.



create index fldr_mfldrid_idx on media_folder (parent_folder_id)
Command completed successfully, 0 rows affected.


create index md_fldr_path_idx on media_folder (path)
Command completed successfully, 0 rows affected.


alter table media_folder set pessimistic
Command completed successfully, 0 rows affected.




create table media_base (
	media_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	description	wvarchar(254)	null,
	name	wvarchar(254)	not null,
	path	wvarchar(254)	not null,
	parent_folder_id	varchar(40)	not null,
	media_type	integer	null
, primary key (media_id)
, foreign key (parent_folder_id) references media_folder (folder_id))
Command completed successfully, 0 rows affected.



create index med_mfldrid_idx on media_base (parent_folder_id)
Command completed successfully, 0 rows affected.


create index media_path_idx on media_base (path)
Command completed successfully, 0 rows affected.


create index media_type_idx on media_base (media_type)
Command completed successfully, 0 rows affected.


alter table media_base set pessimistic
Command completed successfully, 0 rows affected.




create table media_ext (
	media_id	varchar(40)	not null,
	url	varchar(254)	not null
, primary key (media_id)
, foreign key (media_id) references media_base (media_id))
Command completed successfully, 0 rows affected.



alter table media_ext set pessimistic
Command completed successfully, 0 rows affected.




create table media_bin (
	media_id	varchar(40)	not null,
	length	integer	not null,
	last_modified	timestamp	not null,
	data	long varbinary	not null
, primary key (media_id)
, foreign key (media_id) references media_base (media_id))
Command completed successfully, 0 rows affected.



alter table media_bin set pessimistic
Command completed successfully, 0 rows affected.




create table media_txt (
	media_id	varchar(40)	not null,
	length	integer	not null,
	last_modified	timestamp	not null,
	data	long wvarchar	not null
, primary key (media_id)
, foreign key (media_id) references media_base (media_id))
Command completed successfully, 0 rows affected.



alter table media_txt set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// deployment_ddl.sql




//-     These tables are for the daf deployment system  

create table das_deployment (
	deployment_id	varchar(40)	not null,
	version	integer	not null,
	start_time	timestamp	null,
	end_time	timestamp	null,
	failure_time	timestamp	null,
	status	integer	null,
	prev_status	integer	null,
	status_detail	varchar(255)	null,
	current_phase	integer	null,
	rep_high_mark	integer	null,
	rep_marks_avail	integer	null,
	file_high_mark	integer	null,
	file_marks_avail	integer	null,
	thread_batch_size	integer	null,
	failure_count	integer	null,
	purge_deploy_data	tinyint	null
, primary key (deployment_id))
Command completed successfully, 0 rows affected.



create index das_dpl_start_idx on das_deployment (start_time)
Command completed successfully, 0 rows affected.


alter table das_deployment set optimistic
Command completed successfully, 0 rows affected.




create table das_depl_progress (
	deployment_id	varchar(40)	not null,
	version	integer	not null,
	work_completed	integer	null,
	total_work	integer	null)
Command completed successfully, 0 rows affected.



alter table das_depl_progress set optimistic
Command completed successfully, 0 rows affected.




create table das_thread_batch (
	thread_batch_id	varchar(40)	not null,
	version	integer	not null,
	deployment	varchar(40)	null,
	type	integer	null,
	owner	varchar(255)	null,
	thread_name	varchar(255)	null,
	lower_bound	integer	null,
	upper_bound	integer	null,
	last_update_time	timestamp	null
, primary key (thread_batch_id))
Command completed successfully, 0 rows affected.



create index das_tb_deployment on das_thread_batch (deployment)
Command completed successfully, 0 rows affected.


create index das_tb_owner on das_thread_batch (owner)
Command completed successfully, 0 rows affected.


create index das_tb_thread_nam on das_thread_batch (thread_name)
Command completed successfully, 0 rows affected.


alter table das_thread_batch set optimistic
Command completed successfully, 0 rows affected.




create table das_deploy_data (
	deploy_data_id	varchar(40)	not null,
	version	integer	not null,
	type	integer	null,
	source	varchar(255)	null,
	destination	varchar(255)	null,
	dest_server	varchar(255)	null,
	deployment	varchar(40)	null
, primary key (deploy_data_id)
, foreign key (deployment) references das_deployment (deployment_id))
Command completed successfully, 0 rows affected.



create index dd_deployment_idx on das_deploy_data (deployment)
Command completed successfully, 0 rows affected.


alter table das_deploy_data set optimistic
Command completed successfully, 0 rows affected.




create table das_deploy_mark (
	marker_id	varchar(40)	not null,
	version	integer	not null,
	type	integer	null,
	status	integer	null,
	index_number	integer	null,
	marker_action	integer	null,
	deployment_id	varchar(40)	null,
	deployment_data	varchar(40)	null
, primary key (marker_id))
Command completed successfully, 0 rows affected.



create index marker_index_idx on das_deploy_mark (index_number)
Command completed successfully, 0 rows affected.


alter table das_deploy_mark set optimistic
Command completed successfully, 0 rows affected.




create table das_rep_mark (
	rep_marker_id	varchar(40)	not null,
	item_desc_name	varchar(255)	null,
	item_id	varchar(255)	null
, primary key (rep_marker_id))
Command completed successfully, 0 rows affected.



alter table das_rep_mark set optimistic
Command completed successfully, 0 rows affected.




create table das_file_mark (
	file_marker_id	varchar(40)	not null,
	file_path	varchar(1000)	null
, primary key (file_marker_id))
Command completed successfully, 0 rows affected.



alter table das_file_mark set optimistic
Command completed successfully, 0 rows affected.




create table das_depl_depldat (
	deployment_id	varchar(40)	not null,
	sequence_num	integer	not null,
	deployment_data	varchar(40)	null
, primary key (deployment_id,sequence_num))
Command completed successfully, 0 rows affected.



alter table das_depl_depldat set optimistic
Command completed successfully, 0 rows affected.




create table das_depl_options (
	deployment_id	varchar(40)	not null,
	tag	varchar(255)	not null,
	optionValue	varchar(255)	null
, primary key (deployment_id,tag))
Command completed successfully, 0 rows affected.



alter table das_depl_options set optimistic
Command completed successfully, 0 rows affected.




create table das_depl_repmaps (
	deployment_id	varchar(40)	not null,
	source	varchar(255)	not null,
	destination	varchar(255)	null
, primary key (deployment_id,source))
Command completed successfully, 0 rows affected.



alter table das_depl_repmaps set optimistic
Command completed successfully, 0 rows affected.




create table das_depl_item_ref (
	item_ref_id	varchar(40)	not null,
	version	integer	not null,
	deployment_id	varchar(40)	null,
	repository	varchar(255)	null,
	item_desc_name	varchar(255)	null,
	item_id	varchar(255)	null,
	item_index	integer	null
, primary key (item_ref_id))
Command completed successfully, 0 rows affected.



create index das_dpl_itmx_idx on das_depl_item_ref (item_index)
Command completed successfully, 0 rows affected.


create index das_dpl_dplid_idx on das_depl_item_ref (deployment_id)
Command completed successfully, 0 rows affected.


alter table das_depl_item_ref set optimistic
Command completed successfully, 0 rows affected.




create table das_dd_markers (
	deploy_data_id	varchar(40)	not null,
	sequence_num	integer	not null,
	marker	varchar(40)	null
, primary key (deploy_data_id,sequence_num)
, foreign key (marker) references das_deploy_mark (marker_id))
Command completed successfully, 0 rows affected.



create index marker_idx on das_dd_markers (marker)
Command completed successfully, 0 rows affected.


alter table das_dd_markers set optimistic
Command completed successfully, 0 rows affected.




create table das_dep_fail_info (
	id	varchar(40)	not null,
	deployment_id	varchar(40)	not null,
	marker_id	varchar(40)	null,
	severity	varchar(40)	null,
	failure_message	varchar(255)	null,
	failure_time	timestamp	null,
	error_code	varchar(40)	null,
	cause	long varchar	null)
Command completed successfully, 0 rows affected.



alter table das_dep_fail_info set optimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.




SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.

// the source for this section is 
// user_ddl.sql




//- This file contains create table statements, which will configure your database for use with the new DPS schema.
//- Add the organization definition.  It's out of place, but since dps_user references it, it's got to be defined up here

create table dps_organization (
	org_id	varchar(40)	not null,
	name	wvarchar(254)	not null,
	description	wvarchar(254)	null,
	parent_org	varchar(40)	null
, primary key (org_id)
, foreign key (parent_org) references dps_organization (org_id))
Command completed successfully, 0 rows affected.



create index dps_orgparent_org on dps_organization (parent_org)
Command completed successfully, 0 rows affected.


alter table dps_organization set pessimistic
Command completed successfully, 0 rows affected.



//- Default Profile User Template
//- Basic user info.  note: the password field size must be at a minimum 35 characters       if DPS stores a hash of the password and not the actual value.

create table dps_user (
	id	varchar(40)	not null,
	login	wvarchar(40)	not null,
	auto_login	numeric(1,0)	null,
	password	varchar(35)	null,
	member	numeric(1,0)	null,
	first_name	wvarchar(40)	null,
	middle_name	wvarchar(40)	null,
	last_name	wvarchar(40)	null,
	user_type	integer	null,
	locale	integer	null,
	lastactivity_date	timestamp	null,
	lastpwdupdate	timestamp	null,
	generatedpwd	tinyint	null,
	registration_date	timestamp	null,
	email	wvarchar(255)	null,
	email_status	integer	null,
	receive_email	integer	null,
	last_emailed	timestamp	null,
	gender	integer	null,
	date_of_birth	timestamp	null,
	securityStatus	integer	null,
	description	wvarchar(254)	null
, primary key (id)
, unique (login)
, check (auto_login in (0,1))
, check (member in (0,1)))
Command completed successfully, 0 rows affected.



alter table dps_user set pessimistic
Command completed successfully, 0 rows affected.




create table dps_contact_info (
	id	varchar(40)	not null,
	user_id	varchar(40)	null,
	prefix	wvarchar(40)	null,
	first_name	wvarchar(40)	null,
	middle_name	wvarchar(40)	null,
	last_name	wvarchar(40)	null,
	suffix	wvarchar(40)	null,
	job_title	wvarchar(100)	null,
	company_name	wvarchar(40)	null,
	address1	wvarchar(50)	null,
	address2	wvarchar(50)	null,
	address3	wvarchar(50)	null,
	city	wvarchar(30)	null,
	state	wvarchar(20)	null,
	postal_code	wvarchar(10)	null,
	county	wvarchar(40)	null,
	country	wvarchar(40)	null,
	phone_number	wvarchar(15)	null,
	fax_number	wvarchar(15)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dps_contact_info set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_address (
	id	varchar(40)	not null,
	home_addr_id	varchar(40)	null,
	billing_addr_id	varchar(40)	null,
	shipping_addr_id	varchar(40)	null
, primary key (id)
, foreign key (id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dps_usr_adr_shp_id on dps_user_address (shipping_addr_id)
Command completed successfully, 0 rows affected.


create index dps_usr_blng_ad_id on dps_user_address (billing_addr_id)
Command completed successfully, 0 rows affected.


create index dps_usr_home_ad_id on dps_user_address (home_addr_id)
Command completed successfully, 0 rows affected.


alter table dps_user_address set pessimistic
Command completed successfully, 0 rows affected.




create table dps_other_addr (
	user_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	address_id	varchar(40)	not null
, primary key (user_id,tag)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



alter table dps_other_addr set pessimistic
Command completed successfully, 0 rows affected.




create table dps_mailing (
	id	varchar(40)	not null,
	name	wvarchar(255)	null,
	subject	wvarchar(80)	null,
	uniq_server_id	varchar(255)	null,
	from_address	wvarchar(255)	null,
	replyto	wvarchar(255)	null,
	template_URL	varchar(255)	null,
	alt_template_URL	varchar(255)	null,
	batch_exec_id	varchar(40)	null,
	cc	long varchar	null,
	bcc	long varchar	null,
	send_as_html	integer	null,
	send_as_text	integer	null,
	params	long varbinary	null,
	start_time	timestamp	null,
	end_time	timestamp	null,
	status	integer	null,
	num_profiles	integer	null,
	num_sent	integer	null,
	num_bounces	integer	null,
	num_soft_bounces	integer	null,
	num_errors	integer	null,
	num_skipped	integer	null,
	fill_from_templ	numeric(1,0)	null,
	is_batched	tinyint	null,
	ignore_fatigue	tinyint	null,
	batch_size	integer	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dps_mailing set pessimistic
Command completed successfully, 0 rows affected.




create table dps_mail_trackdata (
	mailing_id	varchar(40)	not null,
	map_key	varchar(254)	not null,
	map_value	varchar(254)	null
, primary key (mailing_id,map_key)
, foreign key (mailing_id) references dps_mailing (id))
Command completed successfully, 0 rows affected.



alter table dps_mail_trackdata set pessimistic
Command completed successfully, 0 rows affected.




create table dps_mail_batch (
	mailing_id	varchar(40)	not null,
	start_idx	integer	not null,
	uniq_server_id	varchar(254)	null,
	start_time	timestamp	null,
	end_time	timestamp	null,
	status	integer	null,
	num_profiles	integer	null,
	num_sent	integer	null,
	num_bounces	integer	null,
	num_errors	integer	null,
	num_skipped	integer	null,
	is_summarized	tinyint	null
, primary key (mailing_id,start_idx)
, foreign key (mailing_id) references dps_mailing (id))
Command completed successfully, 0 rows affected.



alter table dps_mail_batch set pessimistic
Command completed successfully, 0 rows affected.




create table dps_mail_server (
	uniq_server_id	varchar(254)	not null,
	last_updated	timestamp	null
, primary key (uniq_server_id))
Command completed successfully, 0 rows affected.



alter table dps_mail_server set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_mailing (
	mailing_id	varchar(40)	not null,
	user_id	varchar(40)	not null,
	idx	integer	not null
, primary key (mailing_id,user_id)
, foreign key (mailing_id) references dps_mailing (id)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dps_u_mail_uid on dps_user_mailing (user_id)
Command completed successfully, 0 rows affected.


alter table dps_user_mailing set pessimistic
Command completed successfully, 0 rows affected.




create table dps_email_address (
	mailing_id	varchar(40)	not null,
	email_address	varchar(255)	not null,
	idx	integer	not null
, primary key (mailing_id,idx)
, foreign key (mailing_id) references dps_mailing (id))
Command completed successfully, 0 rows affected.



alter table dps_email_address set pessimistic
Command completed successfully, 0 rows affected.



//- Organizations/roles

create table dps_role (
	role_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	name	wvarchar(254)	not null,
	description	wvarchar(254)	null
, primary key (role_id))
Command completed successfully, 0 rows affected.



alter table dps_role set pessimistic
Command completed successfully, 0 rows affected.



//- Extending the user profile to include references to the roles that are assigned to this user

create table dps_user_roles (
	user_id	varchar(40)	not null,
	atg_role	varchar(40)	not null
, primary key (user_id,atg_role)
, foreign key (atg_role) references dps_role (role_id)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dps_usr_roles_id on dps_user_roles (atg_role)
Command completed successfully, 0 rows affected.


alter table dps_user_roles set pessimistic
Command completed successfully, 0 rows affected.




create table dps_org_role (
	org_id	varchar(40)	not null,
	atg_role	varchar(40)	not null
, primary key (org_id,atg_role)
, foreign key (org_id) references dps_organization (org_id)
, foreign key (atg_role) references dps_role (role_id))
Command completed successfully, 0 rows affected.



create index dps_org_rolerole on dps_org_role (atg_role)
Command completed successfully, 0 rows affected.


alter table dps_org_role set pessimistic
Command completed successfully, 0 rows affected.




create table dps_role_rel_org (
	organization	varchar(40)	not null,
	sequence_num	integer	not null,
	role_id	varchar(40)	not null
, primary key (organization,sequence_num)
, foreign key (organization) references dps_organization (org_id)
, foreign key (role_id) references dps_role (role_id))
Command completed successfully, 0 rows affected.



create index dps_role_rel_org on dps_role_rel_org (role_id)
Command completed successfully, 0 rows affected.


alter table dps_role_rel_org set pessimistic
Command completed successfully, 0 rows affected.




create table dps_relativerole (
	role_id	varchar(40)	not null,
	dps_function	wvarchar(40)	not null,
	relative_to	varchar(40)	not null
, primary key (role_id)
, foreign key (relative_to) references dps_organization (org_id)
, foreign key (role_id) references dps_role (role_id))
Command completed successfully, 0 rows affected.



create index dps_relativerole on dps_relativerole (relative_to)
Command completed successfully, 0 rows affected.


alter table dps_relativerole set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_org (
	organization	varchar(40)	not null,
	user_id	varchar(40)	not null
, primary key (organization,user_id)
, foreign key (organization) references dps_organization (org_id)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dps_usr_orgusr_id on dps_user_org (user_id)
Command completed successfully, 0 rows affected.


alter table dps_user_org set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_org_anc (
	user_id	varchar(40)	not null,
	sequence_num	integer	not null,
	anc_org	varchar(40)	not null
, primary key (user_id,sequence_num)
, foreign key (anc_org) references dps_organization (org_id)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dps_usr_org_ancanc on dps_user_org_anc (anc_org)
Command completed successfully, 0 rows affected.


alter table dps_user_org_anc set pessimistic
Command completed successfully, 0 rows affected.




create table dps_org_chldorg (
	org_id	varchar(40)	not null,
	child_org_id	varchar(40)	not null
, primary key (org_id,child_org_id)
, foreign key (child_org_id) references dps_organization (org_id)
, foreign key (org_id) references dps_organization (org_id))
Command completed successfully, 0 rows affected.



create index dps_org_chldorg_id on dps_org_chldorg (child_org_id)
Command completed successfully, 0 rows affected.


alter table dps_org_chldorg set pessimistic
Command completed successfully, 0 rows affected.




create table dps_org_ancestors (
	org_id	varchar(40)	not null,
	sequence_num	integer	not null,
	anc_org	varchar(40)	not null
, primary key (org_id,sequence_num)
, foreign key (anc_org) references dps_organization (org_id)
, foreign key (org_id) references dps_organization (org_id))
Command completed successfully, 0 rows affected.



create index dps_org_ancanc_org on dps_org_ancestors (anc_org)
Command completed successfully, 0 rows affected.


alter table dps_org_ancestors set pessimistic
Command completed successfully, 0 rows affected.



//- Adding the folder information

create table dps_folder (
	folder_id	varchar(40)	not null,
	type	integer	not null,
	name	wvarchar(254)	not null,
	parent	varchar(40)	null,
	description	wvarchar(254)	null
, primary key (folder_id)
, foreign key (parent) references dps_folder (folder_id))
Command completed successfully, 0 rows affected.



create index dps_folderparent on dps_folder (parent)
Command completed successfully, 0 rows affected.


alter table dps_folder set pessimistic
Command completed successfully, 0 rows affected.




create table dps_child_folder (
	folder_id	varchar(40)	not null,
	child_folder_id	varchar(40)	not null
, primary key (folder_id,child_folder_id)
, foreign key (child_folder_id) references dps_folder (folder_id)
, foreign key (folder_id) references dps_folder (folder_id))
Command completed successfully, 0 rows affected.



create index dps_chld_fldr_fld on dps_child_folder (child_folder_id)
Command completed successfully, 0 rows affected.


alter table dps_child_folder set pessimistic
Command completed successfully, 0 rows affected.




create table dps_rolefold_chld (
	rolefold_id	varchar(40)	not null,
	role_id	varchar(40)	not null
, primary key (rolefold_id,role_id)
, foreign key (rolefold_id) references dps_folder (folder_id)
, foreign key (role_id) references dps_role (role_id))
Command completed successfully, 0 rows affected.



create index dps_rolfldchldrole on dps_rolefold_chld (role_id)
Command completed successfully, 0 rows affected.


alter table dps_rolefold_chld set pessimistic
Command completed successfully, 0 rows affected.



//- Adding the previous password information

create table dps_user_prevpwd (
	id	varchar(40)	not null,
	seq_num	integer	not null,
	prevpwd	varchar(35)	null
, primary key (id,seq_num)
, foreign key (id) references dps_user (id))
Command completed successfully, 0 rows affected.



alter table dps_user_prevpwd set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// logging_ddl.sql




//- This file contains create table statements needed to configure your database for use with the DPS logging/reporting subsystem.This script will create tables and indexes associated with the newlogging and reporting subsystem. To initialize these tables run thelogging_init.sql script.
//- Tables for storing logging data for reports

create table dps_event_type (
	id	integer	not null,
	name	varchar(32)	not null
, primary key (id)
, unique (name))
Command completed successfully, 0 rows affected.



alter table dps_event_type set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_event (
	id	numeric(19,0)	not null,
	timestamp	timestamp	not null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	eventtype	integer	not null,
	profileid	varchar(25)	null,
	member	numeric(1,0)	not null
, primary key (id)
, foreign key (eventtype) references dps_event_type (id)
, check (member in (0,1)))
Command completed successfully, 0 rows affected.



create index dps_user_event_ix on dps_user_event (eventtype)
Command completed successfully, 0 rows affected.


create index dps_ue_ts on dps_user_event (timestamp)
Command completed successfully, 0 rows affected.


alter table dps_user_event set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_event_sum (
	eventtype	integer	not null,
	summarycount	integer	not null,
	fromtime	timestamp	not null,
	totime	timestamp	not null
, foreign key (eventtype) references dps_event_type (id))
Command completed successfully, 0 rows affected.



create index dps_user_ev_sum_ix on dps_user_event_sum (eventtype)
Command completed successfully, 0 rows affected.


create index dps_ues_ft on dps_user_event_sum (fromtime,totime,eventtype)
Command completed successfully, 0 rows affected.


alter table dps_user_event_sum set pessimistic
Command completed successfully, 0 rows affected.




create table dps_request (
	id	numeric(19,0)	not null,
	timestamp	timestamp	not null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	name	varchar(255)	not null,
	member	numeric(1,0)	not null
, primary key (id)
, check (member in (0,1)))
Command completed successfully, 0 rows affected.



create index dps_r_ts on dps_request (timestamp)
Command completed successfully, 0 rows affected.


alter table dps_request set pessimistic
Command completed successfully, 0 rows affected.




create table dps_reqname_sum (
	name	varchar(255)	not null,
	member	numeric(1,0)	not null,
	summarycount	integer	not null,
	fromtime	timestamp	not null,
	totime	timestamp	not null
, check (member in (0,1)))
Command completed successfully, 0 rows affected.



create index dps_rns_ft on dps_reqname_sum (fromtime,totime)
Command completed successfully, 0 rows affected.


alter table dps_reqname_sum set pessimistic
Command completed successfully, 0 rows affected.




create table dps_session_sum (
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	member	numeric(1,0)	not null,
	summarycount	integer	not null,
	fromtime	timestamp	not null,
	totime	timestamp	not null
, check (member in (0,1)))
Command completed successfully, 0 rows affected.



create index dps_rss_ft on dps_session_sum (fromtime,totime,sessionid)
Command completed successfully, 0 rows affected.


alter table dps_session_sum set pessimistic
Command completed successfully, 0 rows affected.




create table dps_con_req (
	id	numeric(19,0)	not null,
	timestamp	timestamp	not null,
	requestid	numeric(19,0)	null,
	contentid	varchar(255)	not null
, primary key (id))
Command completed successfully, 0 rows affected.



create index dps_cr_ts on dps_con_req (timestamp)
Command completed successfully, 0 rows affected.


alter table dps_con_req set pessimistic
Command completed successfully, 0 rows affected.




create table dps_con_req_sum (
	contentid	varchar(255)	not null,
	member	numeric(1,0)	not null,
	summarycount	integer	not null,
	fromtime	timestamp	not null,
	totime	timestamp	not null
, check (member in (0,1)))
Command completed successfully, 0 rows affected.



create index dps_crs_ft on dps_con_req_sum (fromtime,totime)
Command completed successfully, 0 rows affected.


alter table dps_con_req_sum set pessimistic
Command completed successfully, 0 rows affected.




create table dps_pgrp_req_sum (
	groupname	wvarchar(64)	not null,
	contentname	wvarchar(255)	not null,
	summarycount	integer	not null,
	fromtime	timestamp	not null,
	totime	timestamp	not null)
Command completed successfully, 0 rows affected.



create index dps_prs_ft on dps_pgrp_req_sum (fromtime,totime)
Command completed successfully, 0 rows affected.


alter table dps_pgrp_req_sum set pessimistic
Command completed successfully, 0 rows affected.




create table dps_pgrp_con_sum (
	groupname	wvarchar(64)	not null,
	contentname	wvarchar(64)	not null,
	summarycount	integer	not null,
	fromtime	timestamp	not null,
	totime	timestamp	not null)
Command completed successfully, 0 rows affected.



create index dps_pcs_ft on dps_pgrp_con_sum (fromtime,totime)
Command completed successfully, 0 rows affected.


alter table dps_pgrp_con_sum set pessimistic
Command completed successfully, 0 rows affected.




create table dps_log_id (
	tablename	varchar(30)	not null,
	nextid	numeric(19,0)	not null
, primary key (tablename))
Command completed successfully, 0 rows affected.



alter table dps_log_id set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// logging_init.sql




//- This file contains SQL statements which will initialize theDPS logging/reporting tables.
//- Set names of the default user event types, and initialize the log entry id counters

	INSERT INTO dps_event_type (id, name) VALUES (0, 'newsession')
Command completed successfully, 1 rows affected.


	INSERT INTO dps_event_type (id, name) VALUES (1, 'sessionexpiration')
Command completed successfully, 1 rows affected.


	INSERT INTO dps_event_type (id, name) VALUES (2, 'login')
Command completed successfully, 1 rows affected.


	INSERT INTO dps_event_type (id, name) VALUES (3, 'registration')
Command completed successfully, 1 rows affected.


	INSERT INTO dps_event_type (id, name) VALUES (4, 'logout')
Command completed successfully, 1 rows affected.


	INSERT INTO dps_log_id (tablename, nextid)
	VALUES ('dps_user_event', 0)
Command completed successfully, 1 rows affected.



	INSERT INTO dps_log_id (tablename, nextid)
	VALUES ('dps_request', 0)
Command completed successfully, 1 rows affected.


	INSERT INTO dps_log_id (tablename, nextid)
	VALUES ('dps_con_req', 0)
Command completed successfully, 1 rows affected.


        
commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// personalization_ddl.sql




//- This file contains create table statements needed to configure your database for personzalization assets.This script will create tables and indexes associated with the user segment list manager.

create table dps_seg_list (
	segment_list_id	varchar(40)	not null,
	display_name	varchar(256)	null,
	description	varchar(1024)	null,
	folder_id	varchar(40)	null
, primary key (segment_list_id))
Command completed successfully, 0 rows affected.



alter table dps_seg_list set pessimistic
Command completed successfully, 0 rows affected.




create table dps_seg_list_name (
	segment_list_id	varchar(40)	not null,
	seq	integer	not null,
	group_name	varchar(256)	not null
, primary key (segment_list_id,seq)
, foreign key (segment_list_id) references dps_seg_list (segment_list_id))
Command completed successfully, 0 rows affected.



alter table dps_seg_list_name set pessimistic
Command completed successfully, 0 rows affected.




create table dps_seg_list_folder (
	folder_id	varchar(40)	not null,
	display_name	varchar(256)	null,
	description	varchar(1024)	null,
	parent_folder_id	varchar(40)	null
, primary key (folder_id)
, foreign key (parent_folder_id) references dps_seg_list_folder (folder_id))
Command completed successfully, 0 rows affected.



create index dps_sgmlstfldr1_x on dps_seg_list_folder (parent_folder_id)
Command completed successfully, 0 rows affected.


alter table dps_seg_list_folder set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.




SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.

// the source for this section is 
// das_mappers.sql





create table dss_das_event (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null)
Command completed successfully, 0 rows affected.



alter table dss_das_event set pessimistic
Command completed successfully, 0 rows affected.




create table dss_das_form (
	id	varchar(32)	not null,
	clocktime	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	formname	varchar(254)	null)
Command completed successfully, 0 rows affected.



alter table dss_das_form set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// dps_mappers.sql





create table dss_dps_event (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	profileid	varchar(25)	null,
	scenarioPathInfo	varchar(254)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_event set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_page_visit (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	path	varchar(255)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_page_visit set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_view_item (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	repositoryname	wvarchar(255)	null,
	folder	varchar(255)	null,
	itemtype	varchar(255)	null,
	repositoryid	varchar(255)	null,
	itemdescriptor	varchar(255)	null,
	page	varchar(255)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_view_item set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_click (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	destinationpath	varchar(255)	null,
	sourcenames	varchar(255)	null,
	sourcepath	varchar(255)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_click set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_referrer (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	referrerpath	varchar(255)	null,
	referrersite	varchar(255)	null,
	referrerpage	varchar(255)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_referrer set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_inbound (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	messagesubject	varchar(255)	null,
	originalsubject	varchar(255)	null,
	messagefrom	varchar(64)	null,
	messageto	varchar(255)	null,
	messagecc	varchar(255)	null,
	messagereplyto	varchar(64)	null,
	receiveddate	numeric(19,0)	null,
	bounced	varchar(6)	null,
	bounceemailaddr	varchar(255)	null,
	bouncereplycode	varchar(10)	null,
	bounceerrormess	varchar(255)	null,
	bouncestatuscode	varchar(10)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_inbound set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_admin_reg (
	id	varchar(32)	not null,
	clocktime	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	adminprofileid	varchar(25)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_admin_reg set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_property (
	id	varchar(32)	not null,
	clocktime	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	propertypath	varchar(254)	null,
	oldvalue	varchar(254)	null,
	newvalue	varchar(254)	null,
	changesign	varchar(16)	null,
	changeamount	numeric(19,7)	null,
	changepercentage	numeric(19,7)	null,
	elementsadded	varchar(254)	null,
	elementsremoved	varchar(254)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_property set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_admin_prop (
	id	varchar(32)	not null,
	clocktime	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	propertypath	varchar(254)	null,
	oldvalue	varchar(254)	null,
	newvalue	varchar(254)	null,
	changesign	varchar(16)	null,
	changeamount	numeric(19,7)	null,
	changepercentage	numeric(19,7)	null,
	elementsadded	varchar(254)	null,
	elementsremoved	varchar(254)	null,
	adminprofileid	varchar(25)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_admin_prop set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_update (
	id	varchar(32)	not null,
	clocktime	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	changedproperties	long varchar	null,
	oldvalues	long varchar	null,
	newvalues	long varchar	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_update set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_admin_up (
	id	varchar(32)	not null,
	clocktime	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	changedproperties	long varchar	null,
	oldvalues	long varchar	null,
	newvalues	long varchar	null,
	adminprofileid	varchar(25)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_admin_up set pessimistic
Command completed successfully, 0 rows affected.




create table dps_scenario_value (
	id	varchar(40)	not null,
	tag	varchar(42)	not null,
	scenario_value	varchar(100)	null
, primary key (id,tag)
, foreign key (id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dps_scenval_id on dps_scenario_value (id)
Command completed successfully, 0 rows affected.


alter table dps_scenario_value set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// dss_mappers.sql





create table dss_audit_trail (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	label	wvarchar(255)	null,
	profileid	varchar(25)	null,
	segmentName	wvarchar(254)	null,
	processName	wvarchar(254)	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null)
Command completed successfully, 0 rows affected.



alter table dss_audit_trail set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// scenario_ddl.sql





create table dss_coll_scenario (
	id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	modification_time	numeric(19,0)	null,
	segment_name	wvarchar(255)	null,
	creator_id	varchar(25)	null,
	state	varchar(16)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_coll_scenario set pessimistic
Command completed successfully, 0 rows affected.



//- user_id references the user table but because it is a backwards referencewe cannot have a REFERENCES(dps_user) here.

create table dss_ind_scenario (
	id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	modification_time	numeric(19,0)	null,
	segment_name	wvarchar(255)	null,
	creator_id	varchar(25)	null,
	state	varchar(16)	null,
	user_id	varchar(25)	not null
, primary key (id))
Command completed successfully, 0 rows affected.



create index dss_indscenario1_x on dss_ind_scenario (modification_time)
Command completed successfully, 0 rows affected.


alter table dss_ind_scenario set pessimistic
Command completed successfully, 0 rows affected.




create table dss_scenario_strs (
	id	varchar(25)	not null,
	tag	wvarchar(25)	not null,
	context_str	varchar(255)	null
, primary key (id,tag)
, foreign key (id) references dss_ind_scenario (id))
Command completed successfully, 0 rows affected.



create index dss_scn_st_idx on dss_scenario_strs (id)
Command completed successfully, 0 rows affected.


alter table dss_scenario_strs set pessimistic
Command completed successfully, 0 rows affected.




create table dss_scenario_bools (
	id	varchar(25)	not null,
	tag	wvarchar(25)	not null,
	context_bool	numeric(1,0)	null
, primary key (id,tag)
, foreign key (id) references dss_ind_scenario (id))
Command completed successfully, 0 rows affected.



create index dss_scn_bo_idx on dss_scenario_bools (id)
Command completed successfully, 0 rows affected.


alter table dss_scenario_bools set pessimistic
Command completed successfully, 0 rows affected.




create table dss_scenario_longs (
	id	varchar(25)	not null,
	tag	wvarchar(25)	not null,
	context_long	numeric(19,0)	null
, primary key (id,tag)
, foreign key (id) references dss_ind_scenario (id))
Command completed successfully, 0 rows affected.



create index dss_scn_lg_idx on dss_scenario_longs (id)
Command completed successfully, 0 rows affected.


alter table dss_scenario_longs set pessimistic
Command completed successfully, 0 rows affected.




create table dss_scenario_dbls (
	id	varchar(25)	not null,
	tag	wvarchar(25)	not null,
	context_dbl	double precision	null
, primary key (id,tag)
, foreign key (id) references dss_ind_scenario (id))
Command completed successfully, 0 rows affected.



create index dss_scn_db_idx on dss_scenario_dbls (id)
Command completed successfully, 0 rows affected.


alter table dss_scenario_dbls set pessimistic
Command completed successfully, 0 rows affected.




create table dss_scenario_dates (
	id	varchar(25)	not null,
	tag	wvarchar(25)	not null,
	context_date	timestamp	null
, primary key (id,tag)
, foreign key (id) references dss_ind_scenario (id))
Command completed successfully, 0 rows affected.



create index dss_scn_dt_idx on dss_scenario_dates (id)
Command completed successfully, 0 rows affected.


alter table dss_scenario_dates set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_scenario (
	id	varchar(40)	not null,
	ind_scenario_id	varchar(25)	not null
, primary key (ind_scenario_id)
, foreign key (id) references dps_user (id)
, foreign key (ind_scenario_id) references dss_ind_scenario (id))
Command completed successfully, 0 rows affected.



create index dps_uscn_u_idx on dps_user_scenario (id)
Command completed successfully, 0 rows affected.


alter table dps_user_scenario set pessimistic
Command completed successfully, 0 rows affected.




create table dss_scenario_info (
	id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	scenario_status	integer	null,
	modification_time	numeric(19,0)	null,
	creation_time	numeric(19,0)	null,
	author	varchar(25)	null,
	last_modified_by	varchar(25)	null,
	sdl	long varbinary	null,
	psm_version	integer	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_scenario_info set pessimistic
Command completed successfully, 0 rows affected.




create table dss_scen_mig_info (
	id	varchar(25)	not null,
	scenario_info_id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	modification_time	numeric(19,0)	null,
	psm_version	integer	null,
	sdl	long varbinary	null,
	migration_status	integer	null
, primary key (id)
, foreign key (scenario_info_id) references dss_scenario_info (id))
Command completed successfully, 0 rows affected.



create index dss_scenmiginfo_id on dss_scen_mig_info (scenario_info_id)
Command completed successfully, 0 rows affected.


alter table dss_scen_mig_info set pessimistic
Command completed successfully, 0 rows affected.




create table dss_mig_info_seg (
	id	varchar(25)	not null,
	idx	integer	not null,
	segment_name	varchar(255)	null
, primary key (id,idx)
, foreign key (id) references dss_scen_mig_info (id))
Command completed successfully, 0 rows affected.



alter table dss_mig_info_seg set pessimistic
Command completed successfully, 0 rows affected.




create table dss_template_info (
	id	varchar(25)	not null,
	template_name	wvarchar(255)	null,
	modification_time	numeric(19,0)	null,
	creation_time	numeric(19,0)	null,
	author	varchar(25)	null,
	last_modified_by	varchar(25)	null,
	sdl	long varbinary	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_template_info set pessimistic
Command completed successfully, 0 rows affected.




create table dss_coll_trans (
	id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	modification_time	numeric(19,0)	null,
	server_id	varchar(40)	null,
	message_bean	long varbinary	null,
	event_type	varchar(255)	null,
	segment_name	wvarchar(255)	null,
	state	varchar(16)	null,
	coll_scenario_id	varchar(25)	null,
	step	integer	null,
	current_count	integer	null,
	last_query_id	varchar(25)	null
, primary key (id)
, foreign key (coll_scenario_id) references dss_coll_scenario (id))
Command completed successfully, 0 rows affected.



create index dss_ctrcid_idx on dss_coll_trans (coll_scenario_id)
Command completed successfully, 0 rows affected.


alter table dss_coll_trans set pessimistic
Command completed successfully, 0 rows affected.




create table dss_ind_trans (
	id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	modification_time	numeric(19,0)	null,
	server_id	varchar(40)	null,
	message_bean	long varbinary	null,
	event_type	varchar(255)	null,
	segment_name	wvarchar(255)	null,
	state	varchar(16)	null,
	last_query_id	varchar(25)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_ind_trans set pessimistic
Command completed successfully, 0 rows affected.




create table dss_deletion (
	id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	modification_time	numeric(19,0)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_deletion set pessimistic
Command completed successfully, 0 rows affected.




create table dss_server_id (
	server_id	varchar(40)	not null,
	server_type	integer	not null
, primary key (server_id))
Command completed successfully, 0 rows affected.



alter table dss_server_id set pessimistic
Command completed successfully, 0 rows affected.




create table dss_del_seg_name (
	id	varchar(25)	not null,
	idx	integer	not null,
	segment_name	varchar(255)	null
, primary key (id,idx))
Command completed successfully, 0 rows affected.



alter table dss_del_seg_name set pessimistic
Command completed successfully, 0 rows affected.



//- migration_info_id references the migration info table, but we don't have aREFERENCES dss_scen_mig_info(id) here, because we want to be ableto delete the migration info without deleting this row

create table dss_migration (
	id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	old_mod_time	numeric(19,0)	null,
	new_mod_time	numeric(19,0)	null,
	migration_info_id	varchar(25)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_migration set pessimistic
Command completed successfully, 0 rows affected.




create table dss_mig_seg_name (
	id	varchar(25)	not null,
	idx	integer	not null,
	segment_name	varchar(255)	null
, primary key (id,idx)
, foreign key (id) references dss_migration (id))
Command completed successfully, 0 rows affected.



alter table dss_mig_seg_name set pessimistic
Command completed successfully, 0 rows affected.




create table dss_xref (
	id	varchar(25)	not null,
	scenario_name	varchar(255)	null,
	reference_type	varchar(30)	null,
	reference_target	varchar(255)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_xref set pessimistic
Command completed successfully, 0 rows affected.



//- user_id references the user table but because it is a backwards referencewe cannot have a REFERENCES(dps_user) here.

create table dss_profile_slot (
	id	varchar(25)	not null,
	slot_name	varchar(255)	null,
	item_offset	numeric(19,0)	null,
	user_id	varchar(25)	not null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_profile_slot set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_slot (
	id	varchar(40)	not null,
	profile_slot_id	varchar(25)	not null
, primary key (id,profile_slot_id)
, foreign key (id) references dps_user (id)
, foreign key (profile_slot_id) references dss_profile_slot (id))
Command completed successfully, 0 rows affected.



create index dps_usr_sltprfl_id on dps_user_slot (profile_slot_id)
Command completed successfully, 0 rows affected.


alter table dps_user_slot set pessimistic
Command completed successfully, 0 rows affected.




create table dss_slot_items (
	slot_id	varchar(25)	not null,
	item_id	varchar(255)	null,
	idx	integer	not null
, primary key (slot_id,idx)
, foreign key (slot_id) references dss_profile_slot (id))
Command completed successfully, 0 rows affected.



alter table dss_slot_items set pessimistic
Command completed successfully, 0 rows affected.




create table dss_slot_priority (
	slot_id	varchar(25)	not null,
	idx	integer	not null,
	priority	numeric(19,0)	not null
, primary key (slot_id,idx)
, foreign key (slot_id) references dss_profile_slot (id))
Command completed successfully, 0 rows affected.



alter table dss_slot_priority set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// markers_ddl.sql





create table dps_markers (
	marker_id	varchar(40)	not null,
	marker_key	varchar(100)	not null,
	marker_value	varchar(100)	null,
	marker_data	varchar(100)	null,
	creation_date	timestamp	null,
	version	integer	not null,
	marker_type	integer	null
, primary key (marker_id))
Command completed successfully, 0 rows affected.



alter table dps_markers set pessimistic
Command completed successfully, 0 rows affected.




create table dps_usr_markers (
	profile_id	varchar(40)	not null,
	marker_id	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (profile_id,sequence_num)
, foreign key (profile_id) references dps_user (id)
, foreign key (marker_id) references dps_markers (marker_id))
Command completed successfully, 0 rows affected.



create index dpsusrmarkers1_ix on dps_usr_markers (marker_id)
Command completed successfully, 0 rows affected.


alter table dps_usr_markers set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// business_process_rpt_ddl.sql





create table drpt_stage_reached (
	id	varchar(40)	not null,
	owner_id	varchar(40)	not null,
	process_start_time	timestamp	not null,
	event_time	timestamp	not null,
	bp_name	varchar(255)	not null,
	bp_stage	varchar(255)	null,
	is_transient	numeric(1,0)	not null,
	bp_stage_sequence	integer	not null
, check (is_transient in (0,1)))
Command completed successfully, 0 rows affected.



alter table drpt_stage_reached set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// profile_bp_markers_ddl.sql





create table dss_user_bpmarkers (
	marker_id	varchar(40)	not null,
	profile_id	varchar(40)	not null,
	marker_key	varchar(100)	not null,
	marker_value	varchar(100)	null,
	marker_data	varchar(100)	null,
	creation_date	timestamp	null,
	version	integer	not null,
	marker_type	integer	null
, primary key (marker_id,profile_id))
Command completed successfully, 0 rows affected.



alter table dss_user_bpmarkers set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.




SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.

// the source for this section is 
// commerce_user.sql





create table dps_credit_card (
	id	varchar(40)	not null,
	credit_card_number	varchar(40)	null,
	credit_card_type	varchar(40)	null,
	expiration_month	varchar(20)	null,
	exp_day_of_month	varchar(20)	null,
	expiration_year	varchar(20)	null,
	billing_addr	varchar(40)	null
, primary key (id))
Command completed successfully, 0 rows affected.



create index dps_crcdba_idx on dps_credit_card (billing_addr)
Command completed successfully, 0 rows affected.


alter table dps_credit_card set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_user (
	user_id	varchar(40)	not null,
	allow_partial_ship	tinyint	null,
	default_creditcard	varchar(40)	null,
	daytime_phone_num	varchar(20)	null,
	express_checkout	tinyint	null,
	default_carrier	wvarchar(256)	null
, primary key (user_id)
, foreign key (default_creditcard) references dps_credit_card (id)
, check (allow_partial_ship in (0,1))
, check (express_checkout in (0,1)))
Command completed successfully, 0 rows affected.



create index dcs_usrdcc_idx on dcs_user (default_creditcard)
Command completed successfully, 0 rows affected.


alter table dcs_user set pessimistic
Command completed successfully, 0 rows affected.




create table dps_usr_creditcard (
	user_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	credit_card_id	varchar(40)	not null
, primary key (user_id,tag)
, foreign key (credit_card_id) references dps_credit_card (id)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dps_ucccid_idx on dps_usr_creditcard (credit_card_id)
Command completed successfully, 0 rows affected.


create index dps_uccuid_idx on dps_usr_creditcard (user_id)
Command completed successfully, 0 rows affected.


alter table dps_usr_creditcard set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// product_catalog_ddl.sql





create table dcs_folder (
	folder_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	description	wvarchar(254)	null,
	name	wvarchar(254)	not null,
	path	wvarchar(254)	not null,
	parent_folder_id	varchar(40)	null
, primary key (folder_id)
, foreign key (parent_folder_id) references dcs_folder (folder_id))
Command completed successfully, 0 rows affected.



create index fldr_pfldrid_idx on dcs_folder (parent_folder_id)
Command completed successfully, 0 rows affected.


create index fldr_end_dte_idx on dcs_folder (end_date)
Command completed successfully, 0 rows affected.


create index fldr_path_idx on dcs_folder (path)
Command completed successfully, 0 rows affected.


create index fldr_strt_dte_idx on dcs_folder (start_date)
Command completed successfully, 0 rows affected.


alter table dcs_folder set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_media (
	media_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	description	wvarchar(254)	null,
	name	wvarchar(254)	not null,
	path	wvarchar(254)	not null,
	parent_folder_id	varchar(40)	not null,
	media_type	integer	null
, primary key (media_id)
, foreign key (parent_folder_id) references dcs_folder (folder_id))
Command completed successfully, 0 rows affected.



create index med_pfldrid_idx on dcs_media (parent_folder_id)
Command completed successfully, 0 rows affected.


create index med_end_dte_idx on dcs_media (end_date)
Command completed successfully, 0 rows affected.


create index med_path_idx on dcs_media (path)
Command completed successfully, 0 rows affected.


create index med_strt_dte_idx on dcs_media (start_date)
Command completed successfully, 0 rows affected.


create index med_type_idx on dcs_media (media_type)
Command completed successfully, 0 rows affected.


alter table dcs_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_media_ext (
	media_id	varchar(40)	not null,
	url	varchar(254)	not null
, primary key (media_id)
, foreign key (media_id) references dcs_media (media_id))
Command completed successfully, 0 rows affected.



alter table dcs_media_ext set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_media_bin (
	media_id	varchar(40)	not null,
	length	integer	not null,
	last_modified	timestamp	not null,
	data	long varbinary	not null
, primary key (media_id)
, foreign key (media_id) references dcs_media (media_id))
Command completed successfully, 0 rows affected.



alter table dcs_media_bin set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_media_txt (
	media_id	varchar(40)	not null,
	length	integer	not null,
	last_modified	timestamp	not null,
	data	long wvarchar	not null
, primary key (media_id)
, foreign key (media_id) references dcs_media (media_id))
Command completed successfully, 0 rows affected.



alter table dcs_media_txt set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_category (
	category_id	varchar(40)	not null,
	version	integer	not null,
	catalog_id	varchar(40)	null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	display_name	wvarchar(254)	null,
	description	wvarchar(254)	null,
	long_description	long wvarchar	null,
	parent_cat_id	varchar(40)	null,
	category_type	integer	null,
	root_category	numeric(1,0)	null
, primary key (category_id)
, check (root_category in (0,1)))
Command completed successfully, 0 rows affected.



create index cat_end_dte_idx on dcs_category (end_date)
Command completed successfully, 0 rows affected.


create index cat_pcatid_idx on dcs_category (parent_cat_id)
Command completed successfully, 0 rows affected.


create index cat_strt_dte_idx on dcs_category (start_date)
Command completed successfully, 0 rows affected.


create index cat_type_idx on dcs_category (category_type)
Command completed successfully, 0 rows affected.


alter table dcs_category set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_category_acl (
	category_id	varchar(40)	not null,
	item_acl	long varchar	null
, primary key (category_id))
Command completed successfully, 0 rows affected.



alter table dcs_category_acl set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_product (
	product_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	display_name	wvarchar(254)	null,
	description	wvarchar(254)	null,
	long_description	long wvarchar	null,
	parent_cat_id	varchar(40)	null,
	product_type	integer	null,
	admin_display	varchar(254)	null
, primary key (product_id))
Command completed successfully, 0 rows affected.



create index prd_end_dte_idx on dcs_product (end_date)
Command completed successfully, 0 rows affected.


create index prd_pcatid_idx on dcs_product (parent_cat_id)
Command completed successfully, 0 rows affected.


create index prd_strt_dte_idx on dcs_product (start_date)
Command completed successfully, 0 rows affected.


create index prd_type_idx on dcs_product (product_type)
Command completed successfully, 0 rows affected.


alter table dcs_product set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_product_acl (
	product_id	varchar(40)	not null,
	item_acl	long varchar	null
, primary key (product_id))
Command completed successfully, 0 rows affected.



alter table dcs_product_acl set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku (
	sku_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	display_name	wvarchar(254)	null,
	description	wvarchar(254)	null,
	sku_type	integer	null,
	wholesale_price	double precision	null,
	list_price	double precision	null,
	sale_price	double precision	null,
	on_sale	numeric(1,0)	null,
	tax_status	integer	null,
	fulfiller	integer	null,
	item_acl	long varchar	null
, primary key (sku_id)
, check (on_sale in (0,1)))
Command completed successfully, 0 rows affected.



create index sku_end_dte_idx on dcs_sku (end_date)
Command completed successfully, 0 rows affected.


create index sku_lstprice_idx on dcs_sku (list_price)
Command completed successfully, 0 rows affected.


create index sku_sleprice_idx on dcs_sku (sale_price)
Command completed successfully, 0 rows affected.


create index sku_strt_dte_idx on dcs_sku (start_date)
Command completed successfully, 0 rows affected.


create index sku_type_idx on dcs_sku (sku_type)
Command completed successfully, 0 rows affected.


alter table dcs_sku set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_groups (
	category_id	varchar(40)	not null,
	child_prd_group	varchar(254)	null,
	child_cat_group	varchar(254)	null,
	related_cat_group	varchar(254)	null
, primary key (category_id)
, foreign key (category_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



alter table dcs_cat_groups set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_chldprd (
	category_id	varchar(40)	not null,
	sequence_num	integer	not null,
	child_prd_id	varchar(40)	not null
, primary key (category_id,sequence_num)
, foreign key (category_id) references dcs_category (category_id)
, foreign key (child_prd_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index ct_chldprd_cpi_idx on dcs_cat_chldprd (child_prd_id)
Command completed successfully, 0 rows affected.


create index ct_chldprd_cid_idx on dcs_cat_chldprd (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_chldprd set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_chldcat (
	category_id	varchar(40)	not null,
	sequence_num	integer	not null,
	child_cat_id	varchar(40)	not null
, primary key (category_id,sequence_num)
, foreign key (child_cat_id) references dcs_category (category_id)
, foreign key (category_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



create index ct_chldcat_cci_idx on dcs_cat_chldcat (child_cat_id)
Command completed successfully, 0 rows affected.


create index ct_chldcat_cid_idx on dcs_cat_chldcat (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_chldcat set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_ancestors (
	category_id	varchar(40)	not null,
	anc_cat_id	varchar(40)	not null
, primary key (category_id,anc_cat_id))
Command completed successfully, 0 rows affected.



create index dcs_ct_anc_cat_id on dcs_cat_ancestors (anc_cat_id)
Command completed successfully, 0 rows affected.


create index dcs_ct_cat_id on dcs_cat_ancestors (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_ancestors set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_rltdcat (
	category_id	varchar(40)	not null,
	sequence_num	integer	not null,
	related_cat_id	varchar(40)	not null
, primary key (category_id,sequence_num)
, foreign key (category_id) references dcs_category (category_id)
, foreign key (related_cat_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



create index ct_rltdcat_rci_idx on dcs_cat_rltdcat (related_cat_id)
Command completed successfully, 0 rows affected.


create index ct_rltdcat_cid_idx on dcs_cat_rltdcat (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_rltdcat set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_keywrds (
	category_id	varchar(40)	not null,
	sequence_num	integer	not null,
	keyword	wvarchar(254)	not null
, primary key (category_id,sequence_num)
, foreign key (category_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



create index cat_keywrds_idx on dcs_cat_keywrds (keyword)
Command completed successfully, 0 rows affected.


create index ct_keywrds_cid_idx on dcs_cat_keywrds (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_keywrds set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_media (
	category_id	varchar(40)	not null,
	template_id	varchar(40)	null,
	thumbnail_image_id	varchar(40)	null,
	small_image_id	varchar(40)	null,
	large_image_id	varchar(40)	null
, primary key (category_id)
, foreign key (category_id) references dcs_category (category_id)
, foreign key (large_image_id) references dcs_media (media_id)
, foreign key (small_image_id) references dcs_media (media_id)
, foreign key (template_id) references dcs_media (media_id)
, foreign key (thumbnail_image_id) references dcs_media (media_id))
Command completed successfully, 0 rows affected.



create index ct_mdia_lrimid_idx on dcs_cat_media (large_image_id)
Command completed successfully, 0 rows affected.


create index ct_mdia_smimid_idx on dcs_cat_media (small_image_id)
Command completed successfully, 0 rows affected.


create index ct_mdia_tmplid_idx on dcs_cat_media (template_id)
Command completed successfully, 0 rows affected.


create index ct_mdia_thimid_idx on dcs_cat_media (thumbnail_image_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_aux_media (
	category_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	media_id	varchar(40)	not null
, primary key (category_id,tag)
, foreign key (category_id) references dcs_category (category_id)
, foreign key (media_id) references dcs_media (media_id))
Command completed successfully, 0 rows affected.



create index ct_aux_mdia_mi_idx on dcs_cat_aux_media (media_id)
Command completed successfully, 0 rows affected.


create index ct_aux_mdia_ci_idx on dcs_cat_aux_media (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_aux_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_keywrds (
	product_id	varchar(40)	not null,
	sequence_num	integer	not null,
	keyword	wvarchar(254)	not null
, primary key (product_id,sequence_num)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index prd_keywrds_idx on dcs_prd_keywrds (keyword)
Command completed successfully, 0 rows affected.


create index pr_keywrds_pid_idx on dcs_prd_keywrds (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_keywrds set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_media (
	product_id	varchar(40)	not null,
	template_id	varchar(40)	null,
	thumbnail_image_id	varchar(40)	null,
	small_image_id	varchar(40)	null,
	large_image_id	varchar(40)	null
, primary key (product_id)
, foreign key (large_image_id) references dcs_media (media_id)
, foreign key (small_image_id) references dcs_media (media_id)
, foreign key (template_id) references dcs_media (media_id)
, foreign key (thumbnail_image_id) references dcs_media (media_id)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index pr_mdia_lrimid_idx on dcs_prd_media (large_image_id)
Command completed successfully, 0 rows affected.


create index pr_mdia_smimid_idx on dcs_prd_media (small_image_id)
Command completed successfully, 0 rows affected.


create index pr_mdia_tmplid_idx on dcs_prd_media (template_id)
Command completed successfully, 0 rows affected.


create index pr_mdia_thimid_idx on dcs_prd_media (thumbnail_image_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_aux_media (
	product_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	media_id	varchar(40)	not null
, primary key (product_id,tag)
, foreign key (media_id) references dcs_media (media_id)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index pr_aux_mdia_mi_idx on dcs_prd_aux_media (media_id)
Command completed successfully, 0 rows affected.


create index pr_aux_mdia_pi_idx on dcs_prd_aux_media (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_aux_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_chldsku (
	product_id	varchar(40)	not null,
	sequence_num	integer	not null,
	sku_id	varchar(40)	not null
, primary key (product_id,sequence_num)
, foreign key (product_id) references dcs_product (product_id)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



create index pr_chldsku_sid_idx on dcs_prd_chldsku (sku_id)
Command completed successfully, 0 rows affected.


create index pr_chldsku_pid_idx on dcs_prd_chldsku (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_chldsku set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_skuattr (
	product_id	varchar(40)	not null,
	sequence_num	integer	not null,
	attribute_name	wvarchar(40)	not null
, primary key (product_id,sequence_num)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index pr_skuattr_pid_idx on dcs_prd_skuattr (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_skuattr set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_groups (
	product_id	varchar(40)	not null,
	related_prd_group	varchar(254)	null
, primary key (product_id)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



alter table dcs_prd_groups set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_rltdprd (
	product_id	varchar(40)	not null,
	sequence_num	integer	not null,
	related_prd_id	varchar(40)	not null
, primary key (product_id,sequence_num)
, foreign key (product_id) references dcs_product (product_id)
, foreign key (related_prd_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index pr_rltdprd_rpi_idx on dcs_prd_rltdprd (related_prd_id)
Command completed successfully, 0 rows affected.


create index pr_rltdprd_pid_idx on dcs_prd_rltdprd (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_rltdprd set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_ancestors (
	product_id	varchar(40)	not null,
	anc_cat_id	varchar(40)	not null
, primary key (product_id,anc_cat_id))
Command completed successfully, 0 rows affected.



create index dcs_prd_anc_cat_id on dcs_prd_ancestors (anc_cat_id)
Command completed successfully, 0 rows affected.


create index dcs_prd_prd_id on dcs_prd_ancestors (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_ancestors set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_attr (
	sku_id	varchar(40)	not null,
	attribute_name	wvarchar(42)	not null,
	attribute_value	varchar(254)	not null
, primary key (sku_id,attribute_name)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



create index sku_attr_skuid_idx on dcs_sku_attr (sku_id)
Command completed successfully, 0 rows affected.


alter table dcs_sku_attr set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_link (
	sku_link_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	display_name	wvarchar(254)	null,
	description	wvarchar(254)	null,
	quantity	integer	not null,
	bundle_item	varchar(40)	not null,
	item_acl	long varchar	null
, primary key (sku_link_id)
, foreign key (bundle_item) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



create index sk_link_bndlid_idx on dcs_sku_link (bundle_item)
Command completed successfully, 0 rows affected.


create index skl_end_dte_idx on dcs_sku_link (end_date)
Command completed successfully, 0 rows affected.


create index skl_strt_dte_idx on dcs_sku_link (start_date)
Command completed successfully, 0 rows affected.


alter table dcs_sku_link set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_bndllnk (
	sku_id	varchar(40)	not null,
	sequence_num	integer	not null,
	sku_link_id	varchar(40)	not null
, primary key (sku_id,sequence_num)
, foreign key (sku_id) references dcs_sku (sku_id)
, foreign key (sku_link_id) references dcs_sku_link (sku_link_id))
Command completed successfully, 0 rows affected.



create index sk_bndllnk_sli_idx on dcs_sku_bndllnk (sku_link_id)
Command completed successfully, 0 rows affected.


create index sk_bndllnk_sid_idx on dcs_sku_bndllnk (sku_id)
Command completed successfully, 0 rows affected.


alter table dcs_sku_bndllnk set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_media (
	sku_id	varchar(40)	not null,
	template_id	varchar(40)	null,
	thumbnail_image_id	varchar(40)	null,
	small_image_id	varchar(40)	null,
	large_image_id	varchar(40)	null
, primary key (sku_id)
, foreign key (large_image_id) references dcs_media (media_id)
, foreign key (small_image_id) references dcs_media (media_id)
, foreign key (template_id) references dcs_media (media_id)
, foreign key (thumbnail_image_id) references dcs_media (media_id)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



create index sk_mdia_lrimid_idx on dcs_sku_media (large_image_id)
Command completed successfully, 0 rows affected.


create index sk_mdia_smimid_idx on dcs_sku_media (small_image_id)
Command completed successfully, 0 rows affected.


create index sk_mdia_tmplid_idx on dcs_sku_media (template_id)
Command completed successfully, 0 rows affected.


create index sk_mdia_thimid_idx on dcs_sku_media (thumbnail_image_id)
Command completed successfully, 0 rows affected.


alter table dcs_sku_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_aux_media (
	sku_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	media_id	varchar(40)	not null
, primary key (sku_id,tag)
, foreign key (media_id) references dcs_media (media_id)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



create index sk_aux_mdia_mi_idx on dcs_sku_aux_media (media_id)
Command completed successfully, 0 rows affected.


create index sk_aux_mdia_si_idx on dcs_sku_aux_media (sku_id)
Command completed successfully, 0 rows affected.


alter table dcs_sku_aux_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_replace (
	sku_id	varchar(40)	not null,
	sequence_num	integer	not null,
	replacement	varchar(40)	not null
, primary key (sku_id,sequence_num)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



create index sk_replace_sid_idx on dcs_sku_replace (sku_id)
Command completed successfully, 0 rows affected.


alter table dcs_sku_replace set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_conf (
	sku_id	varchar(40)	not null,
	config_props	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (sku_id,sequence_num)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



alter table dcs_sku_conf set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_config_prop (
	config_prop_id	varchar(40)	not null,
	version	integer	not null,
	display_name	wvarchar(40)	null,
	description	wvarchar(255)	null,
	item_acl	long varchar	null
, primary key (config_prop_id))
Command completed successfully, 0 rows affected.



alter table dcs_config_prop set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_conf_options (
	config_prop_id	varchar(40)	not null,
	config_options	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (config_prop_id,sequence_num)
, foreign key (config_prop_id) references dcs_config_prop (config_prop_id))
Command completed successfully, 0 rows affected.



alter table dcs_conf_options set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_config_opt (
	config_opt_id	varchar(40)	not null,
	version	integer	not null,
	display_name	wvarchar(40)	null,
	description	wvarchar(255)	null,
	sku	varchar(40)	null,
	product	varchar(40)	null,
	price	double precision	null,
	item_acl	long varchar	null
, primary key (config_opt_id))
Command completed successfully, 0 rows affected.



create index ct_conf_prod_idx on dcs_config_opt (product)
Command completed successfully, 0 rows affected.


create index ct_conf_sku_idx on dcs_config_opt (sku)
Command completed successfully, 0 rows affected.


alter table dcs_config_opt set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_foreign_cat (
	catalog_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	name	wvarchar(100)	null,
	description	wvarchar(255)	null,
	host	varchar(100)	null,
	port	integer	null,
	base_url	varchar(255)	null,
	return_url	varchar(255)	null,
	item_acl	long varchar	null
, primary key (catalog_id))
Command completed successfully, 0 rows affected.



alter table dcs_foreign_cat set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// inventory_ddl.sql





create table dcs_inventory (
	inventory_id	varchar(40)	not null,
	version	integer	not null,
	inventory_lock	varchar(20)	null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	display_name	varchar(254)	null,
	description	varchar(254)	null,
	catalog_ref_id	varchar(40)	not null,
	avail_status	integer	not null,
	availability_date	timestamp	null,
	stock_level	integer	null,
	backorder_level	integer	null,
	preorder_level	integer	null,
	stock_thresh	integer	null,
	backorder_thresh	integer	null,
	preorder_thresh	integer	null
, primary key (inventory_id)
, unique (catalog_ref_id))
Command completed successfully, 0 rows affected.



create index inv_end_dte_idx on dcs_inventory (end_date)
Command completed successfully, 0 rows affected.


create index inv_strt_dte_idx on dcs_inventory (start_date)
Command completed successfully, 0 rows affected.


alter table dcs_inventory set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// promotion_ddl.sql





create table dcs_promotion (
	promotion_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	display_name	wvarchar(254)	null,
	description	wvarchar(254)	null,
	promotion_type	integer	null,
	enabled	numeric(1,0)	null,
	begin_usable	timestamp	null,
	end_usable	timestamp	null,
	priority	integer	null,
	global	numeric(1,0)	null,
	anon_profile	numeric(1,0)	null,
	allow_multiple	numeric(1,0)	null,
	uses	integer	null,
	rel_expiration	numeric(1,0)	null,
	time_until_expire	integer	null
, primary key (promotion_id)
, check (enabled in (0,1))
, check (global in (0,1))
, check (anon_profile in (0,1))
, check (allow_multiple in (0,1))
, check (rel_expiration in (0,1)))
Command completed successfully, 0 rows affected.



create index prmo_bgin_use_idx on dcs_promotion (begin_usable)
Command completed successfully, 0 rows affected.


create index prmo_end_dte_idx on dcs_promotion (end_date)
Command completed successfully, 0 rows affected.


create index prmo_end_use_idx on dcs_promotion (end_usable)
Command completed successfully, 0 rows affected.


create index prmo_strt_dte_idx on dcs_promotion (start_date)
Command completed successfully, 0 rows affected.


alter table dcs_promotion set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_promo_media (
	promotion_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	media_id	varchar(40)	not null
, primary key (promotion_id,tag)
, foreign key (media_id) references dcs_media (media_id)
, foreign key (promotion_id) references dcs_promotion (promotion_id))
Command completed successfully, 0 rows affected.



create index promo_mdia_mid_idx on dcs_promo_media (media_id)
Command completed successfully, 0 rows affected.


create index promo_mdia_pid_idx on dcs_promo_media (promotion_id)
Command completed successfully, 0 rows affected.


alter table dcs_promo_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_discount_promo (
	promotion_id	varchar(40)	not null,
	calculator	varchar(254)	not null,
	adjuster	numeric(19,7)	not null,
	pmdl_rule	long wvarchar	not null,
	one_use	numeric(1,0)	null
, primary key (promotion_id)
, foreign key (promotion_id) references dcs_promotion (promotion_id)
, check (one_use in (0, 1)))
Command completed successfully, 0 rows affected.



alter table dcs_discount_promo set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_promo_upsell (
	promotion_id	varchar(40)	not null,
	upsell	tinyint	null
, primary key (promotion_id)
, foreign key (promotion_id) references dcs_promotion (promotion_id)
, check (upsell in (0, 1)))
Command completed successfully, 0 rows affected.



alter table dcs_promo_upsell set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_upsell_action (
	action_id	varchar(40)	not null,
	version	integer	not null,
	name	varchar(40)	not null,
	upsell_prd_grp	long varchar	null
, primary key (action_id))
Command completed successfully, 0 rows affected.



alter table dcs_upsell_action set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_close_qualif (
	close_qualif_id	varchar(40)	not null,
	version	integer	not null,
	name	varchar(40)	not null,
	priority	integer	null,
	qualifier	long wvarchar	null,
	upsell_media	varchar(40)	null,
	upsell_action	varchar(40)	null
, primary key (close_qualif_id)
, foreign key (upsell_media) references dcs_media (media_id)
, foreign key (upsell_action) references dcs_upsell_action (action_id))
Command completed successfully, 0 rows affected.



create index dcs_closequalif2_x on dcs_close_qualif (upsell_media)
Command completed successfully, 0 rows affected.


create index dcs_closequalif1_x on dcs_close_qualif (upsell_action)
Command completed successfully, 0 rows affected.


alter table dcs_close_qualif set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prm_cls_qlf (
	promotion_id	varchar(40)	not null,
	closeness_qualif	varchar(40)	not null
, foreign key (promotion_id) references dcs_promotion (promotion_id)
, foreign key (closeness_qualif) references dcs_close_qualif (close_qualif_id))
Command completed successfully, 0 rows affected.



create index dcs_prm_cls_qlf2_x on dcs_prm_cls_qlf (promotion_id)
Command completed successfully, 0 rows affected.


create index dcs_prm_cls_qlf1_x on dcs_prm_cls_qlf (closeness_qualif)
Command completed successfully, 0 rows affected.


alter table dcs_prm_cls_qlf set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_upsell_prods (
	action_id	varchar(40)	not null,
	product_id	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (action_id,product_id)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index dcs_upsellprods1_x on dcs_upsell_prods (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_upsell_prods set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// user_promotion_ddl.sql




//- The promotion line was commented out to allow the profile and promotion tables to be delinked. The promotion tables are intended to be used as a "read-only" table on the production servers. The promotion (and product catalog) tables are promoted and made active on the production system through copy-switch. In doing so, the profile tables and the promotion tables cannot be in the same database, and therefore we must remove this referece. However if you are not going to use copy-switch for the promotions, then you can add this reference back in.     promotion			VARCHAR(40)		NOT NULL	REFERENCES dcs_promotion(promotion_id),

create table dcs_usr_promostat (
	status_id	varchar(40)	not null,
	profile_id	varchar(40)	not null,
	promotion	varchar(40)	not null,
	num_uses	integer	null,
	expirationDate	timestamp	null
, primary key (status_id))
Command completed successfully, 0 rows affected.



create index promostat_prof_idx on dcs_usr_promostat (profile_id)
Command completed successfully, 0 rows affected.


create index usr_prmstat_pr_idx on dcs_usr_promostat (promotion)
Command completed successfully, 0 rows affected.


alter table dcs_usr_promostat set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_usr_actvpromo (
	id	varchar(40)	not null,
	sequence_num	integer	not null,
	promo_status_id	varchar(40)	not null
, primary key (id,sequence_num))
Command completed successfully, 0 rows affected.



create index usr_actvprm_id_idx on dcs_usr_actvpromo (id)
Command completed successfully, 0 rows affected.


alter table dcs_usr_actvpromo set pessimistic
Command completed successfully, 0 rows affected.



//- The promotion_id column was commented out to allow the profile and promotion tables to be delinked. The promotion tables are intended to be used as a "read-only" table on the production servers. The promotion (and product catalog) tables are promoted and made active on the production system through copy-switch. In doing so, the profile tables and the promotion tables cannot be in the same database, and therefore we must remove this referece. However if you are not going to use copy-switch for the promotions, then you can add this reference back in.        promotion_id                    VARCHAR(40)             NOT NULL        REFERENCES dcs_promotion(promotion_id),

create table dcs_usr_usedpromo (
	id	varchar(40)	not null,
	promotion_id	varchar(40)	not null
, primary key (id,promotion_id))
Command completed successfully, 0 rows affected.



create index usr_usedprm_id_idx on dcs_usr_usedpromo (id)
Command completed successfully, 0 rows affected.


create index usr_usedprm_pi_idx on dcs_usr_usedpromo (promotion_id)
Command completed successfully, 0 rows affected.


alter table dcs_usr_usedpromo set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// user_giftlist_ddl.sql





create table dcs_giftlist (
	id	varchar(40)	not null,
	owner_id	varchar(40)	null,
	is_public	numeric(1,0)	not null,
	is_published	numeric(1,0)	not null,
	event_name	wvarchar(64)	null,
	event_type	integer	null,
	event_date	timestamp	null,
	comments	wvarchar(254)	null,
	description	wvarchar(254)	null,
	instructions	wvarchar(254)	null,
	creation_date	timestamp	null,
	last_modified_date	timestamp	null,
	shipping_addr_id	varchar(40)	null
, primary key (id)
, check (is_public in (0,1))
, check (is_published in (0,1)))
Command completed successfully, 0 rows affected.



create index gftlst_shpadid_idx on dcs_giftlist (shipping_addr_id)
Command completed successfully, 0 rows affected.


create index gft_evnt_name_idx on dcs_giftlist (event_name)
Command completed successfully, 0 rows affected.


create index gft_evnt_type_idx on dcs_giftlist (event_type)
Command completed successfully, 0 rows affected.


create index gft_owner_id_idx on dcs_giftlist (owner_id)
Command completed successfully, 0 rows affected.


alter table dcs_giftlist set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_giftinst (
	giftlist_id	varchar(40)	not null,
	tag	varchar(42)	not null,
	special_inst	varchar(254)	null
, primary key (giftlist_id,tag)
, foreign key (giftlist_id) references dcs_giftlist (id))
Command completed successfully, 0 rows affected.



create index giftinst_gflid_idx on dcs_giftinst (giftlist_id)
Command completed successfully, 0 rows affected.


alter table dcs_giftinst set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_giftitem (
	id	varchar(40)	not null,
	catalog_ref_id	varchar(40)	null,
	product_id	varchar(40)	null,
	display_name	wvarchar(254)	null,
	description	wvarchar(254)	null,
	quantity_desired	integer	null,
	quantity_purchased	integer	null
, primary key (id))
Command completed successfully, 0 rows affected.



create index giftitem_cat_idx on dcs_giftitem (catalog_ref_id)
Command completed successfully, 0 rows affected.


create index giftitem_prod_idx on dcs_giftitem (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_giftitem set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_giftlist_item (
	giftlist_id	varchar(40)	not null,
	sequence_num	integer	not null,
	giftitem_id	varchar(40)	null
, primary key (giftlist_id,sequence_num)
, foreign key (giftitem_id) references dcs_giftitem (id)
, foreign key (giftlist_id) references dcs_giftlist (id))
Command completed successfully, 0 rows affected.



create index gftlst_itm_gii_idx on dcs_giftlist_item (giftitem_id)
Command completed successfully, 0 rows affected.


create index gftlst_itm_gli_idx on dcs_giftlist_item (giftlist_id)
Command completed successfully, 0 rows affected.


alter table dcs_giftlist_item set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_user_wishlist (
	user_id	varchar(40)	not null,
	giftlist_id	varchar(40)	null
, primary key (user_id)
, foreign key (giftlist_id) references dcs_giftlist (id))
Command completed successfully, 0 rows affected.



create index usr_wshlst_gli_idx on dcs_user_wishlist (giftlist_id)
Command completed successfully, 0 rows affected.


alter table dcs_user_wishlist set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_user_giftlist (
	user_id	varchar(40)	not null,
	sequence_num	integer	not null,
	giftlist_id	varchar(40)	null
, primary key (user_id,sequence_num))
Command completed successfully, 0 rows affected.



create index usr_gftlst_uid_idx on dcs_user_giftlist (user_id)
Command completed successfully, 0 rows affected.


alter table dcs_user_giftlist set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_user_otherlist (
	user_id	varchar(40)	not null,
	sequence_num	integer	not null,
	giftlist_id	varchar(40)	null
, primary key (user_id,sequence_num)
, foreign key (giftlist_id) references dcs_giftlist (id))
Command completed successfully, 0 rows affected.



create index usr_otrlst_gli_idx on dcs_user_otherlist (giftlist_id)
Command completed successfully, 0 rows affected.


alter table dcs_user_otherlist set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// order_ddl.sql





create table dcspp_order (
	order_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	order_class_type	varchar(40)	null,
	profile_id	varchar(40)	null,
	description	varchar(64)	null,
	state	varchar(40)	null,
	state_detail	wvarchar(254)	null,
	created_by_order	varchar(40)	null,
	origin_of_order	integer	null,
	creation_date	timestamp	null,
	submitted_date	timestamp	null,
	last_modified_date	timestamp	null,
	completed_date	timestamp	null,
	price_info	varchar(40)	null,
	tax_price_info	varchar(40)	null,
	explicitly_saved	tinyint	null
, primary key (order_id)
, check (explicitly_saved IN (0,1)))
Command completed successfully, 0 rows affected.



create index order_lastmod_idx on dcspp_order (last_modified_date)
Command completed successfully, 0 rows affected.


create index order_profile_idx on dcspp_order (profile_id)
Command completed successfully, 0 rows affected.


create index order_submit_idx on dcspp_order (submitted_date)
Command completed successfully, 0 rows affected.


alter table dcspp_order set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_ship_group (
	shipping_group_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	shipgrp_class_type	varchar(40)	null,
	shipping_method	varchar(40)	null,
	description	varchar(64)	null,
	ship_on_date	timestamp	null,
	actual_ship_date	timestamp	null,
	state	varchar(40)	null,
	state_detail	wvarchar(254)	null,
	submitted_date	timestamp	null,
	price_info	varchar(40)	null,
	order_ref	varchar(40)	null
, primary key (shipping_group_id))
Command completed successfully, 0 rows affected.



alter table dcspp_ship_group set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_pay_group (
	payment_group_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	paygrp_class_type	varchar(40)	null,
	payment_method	varchar(40)	null,
	amount	double precision	null,
	amount_authorized	double precision	null,
	amount_debited	double precision	null,
	amount_credited	double precision	null,
	currency_code	varchar(10)	null,
	state	varchar(40)	null,
	state_detail	wvarchar(254)	null,
	submitted_date	timestamp	null,
	order_ref	varchar(40)	null
, primary key (payment_group_id))
Command completed successfully, 0 rows affected.



alter table dcspp_pay_group set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_item (
	commerce_item_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	item_class_type	varchar(40)	null,
	catalog_id	varchar(40)	null,
	catalog_ref_id	varchar(40)	null,
	catalog_key	varchar(40)	null,
	product_id	varchar(40)	null,
	quantity	integer	null,
	state	varchar(40)	null,
	state_detail	wvarchar(254)	null,
	price_info	varchar(40)	null,
	order_ref	varchar(40)	null
, primary key (commerce_item_id))
Command completed successfully, 0 rows affected.



create index item_catref_idx on dcspp_item (catalog_ref_id)
Command completed successfully, 0 rows affected.


create index item_prodref_idx on dcspp_item (product_id)
Command completed successfully, 0 rows affected.


alter table dcspp_item set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_relationship (
	relationship_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	rel_class_type	varchar(40)	null,
	relationship_type	varchar(40)	null,
	order_ref	varchar(40)	null
, primary key (relationship_id))
Command completed successfully, 0 rows affected.



alter table dcspp_relationship set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_rel_orders (
	order_id	varchar(40)	not null,
	related_orders	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



alter table dcspp_rel_orders set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_order_inst (
	order_id	varchar(40)	not null,
	tag	varchar(42)	not null,
	special_inst	wvarchar(254)	null
, primary key (order_id,tag)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index order_inst_oid_idx on dcspp_order_inst (order_id)
Command completed successfully, 0 rows affected.


alter table dcspp_order_inst set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_order_sg (
	order_id	varchar(40)	not null,
	shipping_groups	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index order_sg_ordid_idx on dcspp_order_sg (order_id)
Command completed successfully, 0 rows affected.


alter table dcspp_order_sg set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_order_pg (
	order_id	varchar(40)	not null,
	payment_groups	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index order_pg_ordid_idx on dcspp_order_pg (order_id)
Command completed successfully, 0 rows affected.


alter table dcspp_order_pg set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_order_item (
	order_id	varchar(40)	not null,
	commerce_items	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index order_item_oid_idx on dcspp_order_item (order_id)
Command completed successfully, 0 rows affected.


alter table dcspp_order_item set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_order_rel (
	order_id	varchar(40)	not null,
	relationships	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index order_rel_orid_idx on dcspp_order_rel (order_id)
Command completed successfully, 0 rows affected.


alter table dcspp_order_rel set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_ship_inst (
	shipping_group_id	varchar(40)	not null,
	tag	varchar(42)	not null,
	special_inst	wvarchar(254)	null
, primary key (shipping_group_id,tag)
, foreign key (shipping_group_id) references dcspp_ship_group (shipping_group_id))
Command completed successfully, 0 rows affected.



create index ship_inst_sgid_idx on dcspp_ship_inst (shipping_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_ship_inst set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_hrd_ship_grp (
	shipping_group_id	varchar(40)	not null,
	tracking_number	varchar(40)	null
, primary key (shipping_group_id)
, foreign key (shipping_group_id) references dcspp_ship_group (shipping_group_id))
Command completed successfully, 0 rows affected.



alter table dcspp_hrd_ship_grp set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_ele_ship_grp (
	shipping_group_id	varchar(40)	not null,
	email_address	varchar(255)	null
, primary key (shipping_group_id)
, foreign key (shipping_group_id) references dcspp_ship_group (shipping_group_id))
Command completed successfully, 0 rows affected.



alter table dcspp_ele_ship_grp set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_ship_addr (
	shipping_group_id	varchar(40)	not null,
	prefix	wvarchar(40)	null,
	first_name	wvarchar(40)	null,
	middle_name	wvarchar(40)	null,
	last_name	wvarchar(40)	null,
	suffix	wvarchar(40)	null,
	job_title	wvarchar(40)	null,
	company_name	wvarchar(40)	null,
	address_1	wvarchar(50)	null,
	address_2	wvarchar(50)	null,
	address_3	wvarchar(50)	null,
	city	wvarchar(40)	null,
	county	wvarchar(40)	null,
	state	wvarchar(40)	null,
	postal_code	wvarchar(10)	null,
	country	wvarchar(40)	null,
	phone_number	wvarchar(40)	null,
	fax_number	wvarchar(40)	null,
	email	wvarchar(255)	null
, primary key (shipping_group_id)
, foreign key (shipping_group_id) references dcspp_ship_group (shipping_group_id))
Command completed successfully, 0 rows affected.



alter table dcspp_ship_addr set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_hand_inst (
	handling_inst_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	hndinst_class_type	varchar(40)	null,
	handling_method	varchar(40)	null,
	shipping_group_id	varchar(40)	null,
	commerce_item_id	varchar(40)	null,
	quantity	integer	null
, primary key (handling_inst_id))
Command completed successfully, 0 rows affected.



create index hi_item_idx on dcspp_hand_inst (commerce_item_id)
Command completed successfully, 0 rows affected.


create index hi_ship_group_idx on dcspp_hand_inst (shipping_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_hand_inst set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_gift_inst (
	handling_inst_id	varchar(40)	not null,
	giftlist_id	varchar(40)	null,
	giftlist_item_id	varchar(40)	null
, primary key (handling_inst_id)
, foreign key (handling_inst_id) references dcspp_hand_inst (handling_inst_id))
Command completed successfully, 0 rows affected.



alter table dcspp_gift_inst set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_sg_hand_inst (
	shipping_group_id	varchar(40)	not null,
	handling_instrs	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (shipping_group_id,sequence_num)
, foreign key (shipping_group_id) references dcspp_ship_group (shipping_group_id))
Command completed successfully, 0 rows affected.



create index sg_hnd_ins_sgi_idx on dcspp_sg_hand_inst (shipping_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_sg_hand_inst set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_pay_inst (
	payment_group_id	varchar(40)	not null,
	tag	varchar(42)	not null,
	special_inst	wvarchar(254)	null
, primary key (payment_group_id,tag)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



create index pay_inst_pgrid_idx on dcspp_pay_inst (payment_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_pay_inst set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_config_item (
	config_item_id	varchar(40)	not null,
	reconfig_data	varchar(255)	null,
	notes	varchar(255)	null
, primary key (config_item_id)
, foreign key (config_item_id) references dcspp_item (commerce_item_id))
Command completed successfully, 0 rows affected.



alter table dcspp_config_item set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_subsku_item (
	subsku_item_id	varchar(40)	not null,
	ind_quantity	integer	null
, primary key (subsku_item_id)
, foreign key (subsku_item_id) references dcspp_item (commerce_item_id))
Command completed successfully, 0 rows affected.



alter table dcspp_subsku_item set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_item_ci (
	commerce_item_id	varchar(40)	not null,
	commerce_items	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (commerce_item_id,sequence_num)
, foreign key (commerce_item_id) references dcspp_item (commerce_item_id))
Command completed successfully, 0 rows affected.



alter table dcspp_item_ci set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_gift_cert (
	payment_group_id	varchar(40)	not null,
	profile_id	varchar(40)	null,
	gift_cert_number	varchar(50)	null
, primary key (payment_group_id)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



create index gc_number_idx on dcspp_gift_cert (gift_cert_number)
Command completed successfully, 0 rows affected.


create index gc_profile_idx on dcspp_gift_cert (profile_id)
Command completed successfully, 0 rows affected.


alter table dcspp_gift_cert set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_store_cred (
	payment_group_id	varchar(40)	not null,
	profile_id	varchar(40)	null,
	store_cred_number	varchar(50)	null
, primary key (payment_group_id)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



create index sc_number_idx on dcspp_store_cred (store_cred_number)
Command completed successfully, 0 rows affected.


create index sc_profile_idx on dcspp_store_cred (profile_id)
Command completed successfully, 0 rows affected.


alter table dcspp_store_cred set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_credit_card (
	payment_group_id	varchar(40)	not null,
	credit_card_number	varchar(40)	null,
	credit_card_type	varchar(40)	null,
	expiration_month	varchar(20)	null,
	exp_day_of_month	varchar(20)	null,
	expiration_year	varchar(20)	null
, primary key (payment_group_id)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



alter table dcspp_credit_card set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_bill_addr (
	payment_group_id	varchar(40)	not null,
	prefix	wvarchar(40)	null,
	first_name	wvarchar(40)	null,
	middle_name	wvarchar(40)	null,
	last_name	wvarchar(40)	null,
	suffix	wvarchar(40)	null,
	job_title	wvarchar(40)	null,
	company_name	wvarchar(40)	null,
	address_1	wvarchar(50)	null,
	address_2	wvarchar(50)	null,
	address_3	wvarchar(50)	null,
	city	wvarchar(40)	null,
	county	wvarchar(40)	null,
	state	wvarchar(40)	null,
	postal_code	wvarchar(10)	null,
	country	wvarchar(40)	null,
	phone_number	wvarchar(40)	null,
	fax_number	wvarchar(40)	null,
	email	wvarchar(255)	null
, primary key (payment_group_id)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



alter table dcspp_bill_addr set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_pay_status (
	status_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	trans_id	varchar(50)	null,
	amount	double precision	null,
	trans_success	tinyint	null,
	error_message	wvarchar(254)	null,
	trans_timestamp	timestamp	null
, primary key (status_id)
, check (trans_success IN (0,1)))
Command completed successfully, 0 rows affected.



alter table dcspp_pay_status set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_cc_status (
	status_id	varchar(40)	not null,
	auth_expiration	timestamp	null,
	avs_code	varchar(40)	null,
	avs_desc_result	wvarchar(254)	null,
	integration_data	varchar(256)	null
, primary key (status_id)
, foreign key (status_id) references dcspp_pay_status (status_id))
Command completed successfully, 0 rows affected.



alter table dcspp_cc_status set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_gc_status (
	status_id	varchar(40)	not null,
	auth_expiration	timestamp	null
, primary key (status_id)
, foreign key (status_id) references dcspp_pay_status (status_id))
Command completed successfully, 0 rows affected.



alter table dcspp_gc_status set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_sc_status (
	status_id	varchar(40)	not null,
	auth_expiration	timestamp	null
, primary key (status_id)
, foreign key (status_id) references dcspp_pay_status (status_id))
Command completed successfully, 0 rows affected.



alter table dcspp_sc_status set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_auth_status (
	payment_group_id	varchar(40)	not null,
	auth_status	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (payment_group_id,sequence_num)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



create index auth_stat_pgid_idx on dcspp_auth_status (payment_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_auth_status set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_debit_status (
	payment_group_id	varchar(40)	not null,
	debit_status	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (payment_group_id,sequence_num)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



create index debit_stat_pgi_idx on dcspp_debit_status (payment_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_debit_status set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_cred_status (
	payment_group_id	varchar(40)	not null,
	credit_status	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (payment_group_id,sequence_num)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



create index cred_stat_pgid_idx on dcspp_cred_status (payment_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_cred_status set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_shipitem_rel (
	relationship_id	varchar(40)	not null,
	shipping_group_id	varchar(40)	null,
	commerce_item_id	varchar(40)	null,
	quantity	integer	null,
	returned_qty	integer	null,
	amount	double precision	null,
	state	varchar(40)	null,
	state_detail	wvarchar(254)	null
, primary key (relationship_id)
, foreign key (relationship_id) references dcspp_relationship (relationship_id))
Command completed successfully, 0 rows affected.



create index sirel_item_idx on dcspp_shipitem_rel (commerce_item_id)
Command completed successfully, 0 rows affected.


create index sirel_shipgrp_idx on dcspp_shipitem_rel (shipping_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_shipitem_rel set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_rel_range (
	relationship_id	varchar(40)	not null,
	low_bound	integer	null,
	high_bound	integer	null
, primary key (relationship_id))
Command completed successfully, 0 rows affected.



alter table dcspp_rel_range set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_payitem_rel (
	relationship_id	varchar(40)	not null,
	payment_group_id	varchar(40)	null,
	commerce_item_id	varchar(40)	null,
	quantity	integer	null,
	amount	double precision	null
, primary key (relationship_id)
, foreign key (relationship_id) references dcspp_relationship (relationship_id))
Command completed successfully, 0 rows affected.



create index pirel_item_idx on dcspp_payitem_rel (commerce_item_id)
Command completed successfully, 0 rows affected.


create index pirel_paygrp_idx on dcspp_payitem_rel (payment_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_payitem_rel set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_payship_rel (
	relationship_id	varchar(40)	not null,
	payment_group_id	varchar(40)	null,
	shipping_group_id	varchar(40)	null,
	amount	double precision	null
, primary key (relationship_id)
, foreign key (relationship_id) references dcspp_relationship (relationship_id))
Command completed successfully, 0 rows affected.



create index psrel_paygrp_idx on dcspp_payship_rel (payment_group_id)
Command completed successfully, 0 rows affected.


create index psrel_shipgrp_idx on dcspp_payship_rel (shipping_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_payship_rel set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_payorder_rel (
	relationship_id	varchar(40)	not null,
	payment_group_id	varchar(40)	null,
	order_id	varchar(40)	null,
	amount	double precision	null
, primary key (relationship_id)
, foreign key (relationship_id) references dcspp_relationship (relationship_id))
Command completed successfully, 0 rows affected.



create index porel_order_idx on dcspp_payorder_rel (order_id)
Command completed successfully, 0 rows affected.


create index porel_paygrp_idx on dcspp_payorder_rel (payment_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_payorder_rel set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_amount_info (
	amount_info_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	currency_code	varchar(10)	null,
	amount	double precision	null,
	discounted	tinyint	null,
	amount_is_final	tinyint	null
, primary key (amount_info_id)
, check (discounted IN (0,1))
, check (amount_is_final IN (0,1)))
Command completed successfully, 0 rows affected.



alter table dcspp_amount_info set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_order_price (
	amount_info_id	varchar(40)	not null,
	raw_subtotal	double precision	null,
	tax	double precision	null,
	shipping	double precision	null,
	manual_adj_total	double precision	null
, primary key (amount_info_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



alter table dcspp_order_price set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_item_price (
	amount_info_id	varchar(40)	not null,
	list_price	double precision	null,
	raw_total_price	double precision	null,
	sale_price	double precision	null,
	on_sale	tinyint	null,
	order_discount	double precision	null,
	qty_discounted	integer	null,
	qty_as_qualifier	integer	null,
	price_list	varchar(40)	null
, primary key (amount_info_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id)
, check (on_sale IN (0,1)))
Command completed successfully, 0 rows affected.



alter table dcspp_item_price set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_tax_price (
	amount_info_id	varchar(40)	not null,
	city_tax	double precision	null,
	county_tax	double precision	null,
	state_tax	double precision	null,
	country_tax	double precision	null
, primary key (amount_info_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



alter table dcspp_tax_price set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_ship_price (
	amount_info_id	varchar(40)	not null,
	raw_shipping	double precision	null
, primary key (amount_info_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



alter table dcspp_ship_price set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_amtinfo_adj (
	amount_info_id	varchar(40)	not null,
	adjustments	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (amount_info_id,sequence_num)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



create index amtinf_adj_aid_idx on dcspp_amtinfo_adj (amount_info_id)
Command completed successfully, 0 rows affected.


alter table dcspp_amtinfo_adj set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_price_adjust (
	adjustment_id	varchar(40)	not null,
	version	integer	not null,
	adj_description	varchar(254)	null,
	pricing_model	varchar(40)	null,
	manual_adjustment	varchar(40)	null,
	adjustment	double precision	null,
	qty_adjusted	integer	null
, primary key (adjustment_id))
Command completed successfully, 0 rows affected.



alter table dcspp_price_adjust set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_shipitem_sub (
	amount_info_id	varchar(40)	not null,
	shipping_group_id	varchar(42)	not null,
	ship_item_subtotal	varchar(40)	not null
, primary key (amount_info_id,shipping_group_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



create index ship_item_sub_idx on dcspp_shipitem_sub (amount_info_id)
Command completed successfully, 0 rows affected.


alter table dcspp_shipitem_sub set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_taxshipitem (
	amount_info_id	varchar(40)	not null,
	shipping_group_id	varchar(42)	not null,
	tax_ship_item_sub	varchar(40)	not null
, primary key (amount_info_id,shipping_group_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



create index tax_ship_item_idx on dcspp_taxshipitem (amount_info_id)
Command completed successfully, 0 rows affected.


alter table dcspp_taxshipitem set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_ntaxshipitem (
	amount_info_id	varchar(40)	not null,
	shipping_group_id	varchar(42)	not null,
	non_tax_item_sub	varchar(40)	not null
, primary key (amount_info_id,shipping_group_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



create index ntax_ship_item_idx on dcspp_ntaxshipitem (amount_info_id)
Command completed successfully, 0 rows affected.


alter table dcspp_ntaxshipitem set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_shipitem_tax (
	amount_info_id	varchar(40)	not null,
	shipping_group_id	varchar(42)	not null,
	ship_item_tax	varchar(40)	not null
, primary key (amount_info_id,shipping_group_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



create index ship_item_tax_idx on dcspp_shipitem_tax (amount_info_id)
Command completed successfully, 0 rows affected.


alter table dcspp_shipitem_tax set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_itmprice_det (
	amount_info_id	varchar(40)	not null,
	cur_price_details	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (amount_info_id,sequence_num)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



create index itmprc_det_aii_idx on dcspp_itmprice_det (amount_info_id)
Command completed successfully, 0 rows affected.


alter table dcspp_itmprice_det set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_det_price (
	amount_info_id	varchar(40)	not null,
	tax	double precision	null,
	order_discount	double precision	null,
	quantity	integer	null,
	qty_as_qualifier	integer	null
, primary key (amount_info_id))
Command completed successfully, 0 rows affected.



alter table dcspp_det_price set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_det_range (
	amount_info_id	varchar(40)	not null,
	low_bound	integer	null,
	high_bound	integer	null
, primary key (amount_info_id))
Command completed successfully, 0 rows affected.



alter table dcspp_det_range set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_order_adj (
	order_id	varchar(40)	not null,
	adjustment_id	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index order_adj_orid_idx on dcspp_order_adj (order_id)
Command completed successfully, 0 rows affected.


alter table dcspp_order_adj set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_manual_adj (
	manual_adjust_id	varchar(40)	not null,
	type	integer	not null,
	adjustment_type	integer	not null,
	reason	integer	not null,
	amount	double precision	null,
	notes	varchar(255)	null,
	version	integer	not null
, primary key (manual_adjust_id))
Command completed successfully, 0 rows affected.



alter table dcspp_manual_adj set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// dcs_mappers.sql





create table dcs_cart_event (
	id	varchar(40)	not null,
	timestamp	timestamp	null,
	orderid	varchar(40)	null,
	itemid	varchar(40)	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	quantity	integer	null,
	amount	double precision	null,
	profileid	varchar(40)	null)
Command completed successfully, 0 rows affected.



alter table dcs_cart_event set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_submt_ord_evt (
	id	varchar(40)	not null,
	clocktime	timestamp	null,
	orderid	varchar(40)	null,
	profileid	varchar(40)	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null)
Command completed successfully, 0 rows affected.



alter table dcs_submt_ord_evt set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prom_used_evt (
	id	varchar(40)	not null,
	clocktime	timestamp	null,
	orderid	varchar(40)	null,
	profileid	varchar(40)	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	promotionid	varchar(40)	null,
	order_amount	numeric(26,7)	null,
	discount	numeric(26,7)	null)
Command completed successfully, 0 rows affected.



alter table dcs_prom_used_evt set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_ord_merge_evt (
	id	varchar(40)	not null,
	clocktime	timestamp	null,
	sourceorderid	varchar(40)	null,
	destorderid	varchar(40)	null,
	profileid	varchar(40)	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	sourceremoved	tinyint	null
, check (sourceremoved in (0,1)))
Command completed successfully, 0 rows affected.



alter table dcs_ord_merge_evt set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_promo_rvkd (
	id	varchar(40)	not null,
	time_stamp	timestamp	null,
	promotionid	varchar(254)	not null,
	profileid	varchar(254)	not null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null)
Command completed successfully, 0 rows affected.



alter table dcs_promo_rvkd set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_promo_grntd (
	id	varchar(40)	not null,
	time_stamp	timestamp	null,
	promotionid	varchar(254)	not null,
	profileid	varchar(254)	not null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null)
Command completed successfully, 0 rows affected.



alter table dcs_promo_grntd set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// claimable_ddl.sql





create table dcspp_claimable (
	claimable_id	varchar(40)	not null,
	version	integer	not null,
	type	integer	not null,
	status	integer	null,
	expiration_date	timestamp	null
, primary key (claimable_id))
Command completed successfully, 0 rows affected.



alter table dcspp_claimable set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_giftcert (
	giftcertificate_id	varchar(40)	not null,
	amount	double precision	not null,
	amount_authorized	double precision	not null,
	amount_remaining	double precision	not null,
	purchaser_id	varchar(40)	null,
	purchase_date	timestamp	null,
	last_used	timestamp	null
, primary key (giftcertificate_id)
, foreign key (giftcertificate_id) references dcspp_claimable (claimable_id))
Command completed successfully, 0 rows affected.



create index claimable_user_idx on dcspp_giftcert (purchaser_id)
Command completed successfully, 0 rows affected.


alter table dcspp_giftcert set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_storecred_clm (
	store_credit_id	varchar(40)	not null,
	amount	double precision	not null,
	amount_authorized	double precision	not null,
	amount_remaining	double precision	not null,
	owner_id	varchar(40)	null,
	issue_date	timestamp	null,
	expiration_date	timestamp	null,
	last_used	timestamp	null
, primary key (store_credit_id)
, foreign key (store_credit_id) references dcspp_claimable (claimable_id))
Command completed successfully, 0 rows affected.



create index storecr_issue_idx on dcs_storecred_clm (issue_date)
Command completed successfully, 0 rows affected.


create index storecr_owner_idx on dcs_storecred_clm (owner_id)
Command completed successfully, 0 rows affected.


alter table dcs_storecred_clm set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_coupon (
	coupon_id	varchar(40)	not null,
	promotion_id	varchar(40)	not null
, primary key (coupon_id)
, foreign key (coupon_id) references dcspp_claimable (claimable_id))
Command completed successfully, 0 rows affected.



alter table dcspp_coupon set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// reporting_views.sql




//-        In the comments, the time periods indicated are calendar time, meaning that   
//-        the current period should be calculated from the start of the calendar time period,   
//-        rather than in real time.  For example, if it is Thursday, July 12,   
//-        the most current row in a view calculating totals for a week    
//-        would run from Sunday, July 8 - July 12, rather than July 5 - July 12.   
//-        drpt_order gathers basic information about each order   
create view drpt_order
as
select o.order_id as order_id, 
	o.submitted_date as submitted_date, 
	ai.amount as amount, 
	count(i.quantity) as distinct_items, 
	sum(i.quantity) as total_items,
	ba.state as state, 
	ba.country as country, 
	o.price_info as price_info
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcspp_pay_group pg, 
	dcspp_bill_addr ba
where o.order_id = i.order_ref 
	and o.price_info = ai.amount_info_id 
	and o.order_id = pg.order_ref
	and pg.payment_group_id = ba.payment_group_id
group by o.order_id, 
	o.submitted_date, 
	ai.amount, 
	ba.state, 
	ba.country,
	 o.price_info
         
Command completed successfully, 0 rows affected.




//-        drpt_cost_of_goods calculates the total wholesale cost   
//-        of the items purchased in each order   
create view drpt_cost_of_goods
as
select i.order_ref as order_id, 
	sum(i.quantity * s.wholesale_price) as cost_of_goods
from dcspp_item i, 
	dcs_sku s
where i.catalog_ref_id = s.sku_id
group by i.order_ref
         
Command completed successfully, 0 rows affected.




//-        drpt_discount calculates the total amount discounted   
//-        from each order via promotions   
create view drpt_discount
as
select o.order_id as order_id, 
	o.submitted_date as submitted_date, 
	(0 - sum(pa.adjustment)) as discount
from dcspp_order o, 
	dcspp_item i, 
	dcspp_amtinfo_adj aa, 
	dcspp_price_adjust pa
where o.order_id = i.order_ref 
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model is not null
group by o.order_id, 
	o.submitted_date
         
Command completed successfully, 0 rows affected.




//-        drptw_discounts calculates the number of orders that   
//-        were discounted by promotions over each week   
//-        The "UNION" operation allows weeks in which there   
//-        were no discounts to have a row in the view   
create view drptw_discounts
as
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) as week, 
	count(order_id) as num_of_discounts
from drpt_discount
group by week
UNION
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) as week, 
	0 as num_of_discounts
from dcspp_order 
where convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) not in (select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) from drpt_discount)
         
Command completed successfully, 0 rows affected.




//-        drptm_discounts calculates the number of orders that   
//-        were discounted by promotions over each month   
//-        The "UNION" operation allows months in which there   
//-        were no discounts to have a row in the view   
create view drptm_discounts
as
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) as month, 
	count(order_id) as num_of_discounts
from drpt_discount
group by month
UNION
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) as month, 
	0 as num_of_discounts
from dcspp_order 
where convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) not in (select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) from drpt_discount)
         
Command completed successfully, 0 rows affected.




//-        drptq_discounts calculates the number of orders that   
//-        were discounted by promotions over each quarter   
//-        The "UNION" operation allows quarters in which there   
//-        were no discounts to have a row in the view   
create view drptq_discounts
as
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') as quarter, 
	count(order_id) as num_of_discounts
from drpt_discount
group by quarter
UNION
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') as quarter, 
	0 as num_of_discounts
from dcspp_order 
where convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') not in (select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') from drpt_discount)
         
Command completed successfully, 0 rows affected.




//-        drpta_discounts calculates the number of orders that   
//-        were discounted by promotions over each year   
//-        The "UNION" operation allows years in which there   
//-        were no discounts to have a row in the view   
create view drpta_discounts
as
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') as year, 
	count(order_id) as num_of_discounts
from drpt_discount
group by year
UNION
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') as year, 
	0 as num_of_discounts
from dcspp_order 
where convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') not in (select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') from drpt_discount)
         
Command completed successfully, 0 rows affected.




//-        drpt_ordered_items comprises a list of each item purchased   
create view drpt_ordered_items
as
select o.order_id as order_id, 
	o.submitted_date as submitted_date, 
	i.catalog_ref_id as catalog_ref_id,
	i.product_id as product_id, 
	i.quantity as quantity, 
	ai.amount as price
from dcspp_order o, 
	dcspp_item i, 
	dcspp_amount_info ai
where o.order_id = i.order_ref 
	and i.price_info = ai.amount_info_id
         
Command completed successfully, 0 rows affected.




//-        drpt_sku_stock calculates the number of unique skus in stock per product   
//-        in the catalog.  The "UNION" operation exists so that a row will   
//-        appear for products that have no skus in stock   
create view drpt_sku_stock
as
select pc.product_id as product_id, 
	count(i.catalog_ref_id) as skus_in_stock
from dcs_prd_chldsku pc, 
	dcs_inventory i
where pc.sku_id = i.catalog_ref_id 
	and i.stock_level > 0
group by pc.product_id
UNION
select product_id, 
	0 as skus_in_stock 
from dcs_prd_chldsku 
where product_id not in 
(select product_id 
from dcs_prd_chldsku pc, 
	dcs_inventory i 
where pc.sku_id = i.catalog_ref_id 
	and i.stock_level > 0)
         
Command completed successfully, 0 rows affected.




//-        drptw_browses calculatess the number of times each product's page   
//-        has been viewed online each week   
create view drptw_browses
as
select repositoryid as product_id, 
	convert_date(CONVERT_INTEGER(timestamp)-CONVERT_INTEGER((DAYOFWEEK(timestamp) -1) *86400)) as week, 
	count(timestamp) as browses
from dss_dps_view_item
group by repositoryid, week
         
Command completed successfully, 0 rows affected.




//-        drptm_browses calculates the number of times each product's page   
//-        has been viewed online each month   
create view drptm_browses
as
select repositoryid as product_id, 
	convert_date(CONVERT_INTEGER(timestamp)-CONVERT_INTEGER((DAYOFMONTH(timestamp) -1) *86400)) as month, 
	count(timestamp) as browses
from dss_dps_view_item
group by repositoryid,	month
         
Command completed successfully, 0 rows affected.




//-        drptq_browses calculates the number of times each product's page   
//-        has been viewed online each quarter   
create view drptq_browses
as
select repositoryid as product_id, 
	convert_date(CONVERT_VARCHAR(year(timestamp))||'-'||CONVERT_VARCHAR((QUARTER(timestamp)-1)*3+1)||'-01') as quarter, 
	count(timestamp) as browses
from dss_dps_view_item
group by repositoryid, 
	quarter
         
Command completed successfully, 0 rows affected.




//-        drpta_browses calculates the number of times each product's page   
//-        has been viewed online each year   
create view drpta_browses
as
select repositoryid as product_id, 
	convert_date(CONVERT_VARCHAR(year(timestamp))||'-01-01') as year, 
	count(timestamp) as browses
from dss_dps_view_item
group by repositoryid,
	year
         
Command completed successfully, 0 rows affected.




//-        drptw_carts calculates the number of times each product has   
//-        been added to a user's shopping cart each week   
//-        Note:  A single user adding a quantity greater than one   
//-        to their cart at one time is considered a single "add to cart"   
create view drptw_carts
as
select pc.product_id as product_id, 
	convert_date(CONVERT_INTEGER(ce.timestamp)-CONVERT_INTEGER((DAYOFWEEK(ce.timestamp) -1) *86400)) as week, 
	count(ce.id) as adds_to_cart
from dcs_cart_event ce, 
	dcs_prd_chldsku pc
where ce.itemid = pc.sku_id
group by pc.product_id, 
	week
         
Command completed successfully, 0 rows affected.




//-        drptm_carts calculates the number of times each product has   
//-        been added to a user's shopping cart each month   
//-        Note:  A single user adding a quantity greater than one   
//-        to their cart at one time is considered a single "add to cart"   
create view drptm_carts
as
select pc.product_id as product_id, 
	convert_date(CONVERT_INTEGER(ce.timestamp)-CONVERT_INTEGER((DAYOFMONTH(ce.timestamp) -1) *86400)) as month, 
	count(ce.id) as adds_to_cart
from dcs_cart_event ce, 
	dcs_prd_chldsku pc
where ce.itemid = pc.sku_id
group by pc.product_id, 
	month
         
Command completed successfully, 0 rows affected.




//-        drptq_carts calculates the number of times each product has   
//-        been added to a user's shopping cart each quarter   
//-        Note:  A single user adding a quantity greater than one   
//-        to their cart at one time is considered a single "add to cart"   
create view drptq_carts
as
select pc.product_id as product_id, 
	convert_date(CONVERT_VARCHAR(year(ce.timestamp))||'-'||CONVERT_VARCHAR((QUARTER(ce.timestamp)-1)*3+1)||'-01') as quarter, 
	count(ce.id) as adds_to_cart
from dcs_cart_event ce, 
	dcs_prd_chldsku pc
where ce.itemid = pc.sku_id
group by pc.product_id, 
	quarter
         
Command completed successfully, 0 rows affected.




//-        drpta_carts calculates the number of times each product has   
//-        been added to a user's shopping cart each year   
//-        Note:  A single user adding a quantity greater than one   
//-        to their cart at one time is considered a single "add to cart"   
create view drpta_carts
as
select pc.product_id as product_id, 
	convert_date(CONVERT_VARCHAR(year(ce.timestamp))||'-01-01') as year, 
	count(ce.id) as adds_to_cart
from dcs_cart_event ce, 
	dcs_prd_chldsku pc
where ce.itemid = pc.sku_id
group by pc.product_id, 
	year
         
Command completed successfully, 0 rows affected.




//-        drpt_shipping compiles the total shipping cost for each shipping group   
create view drpt_shipping
as
select o.order_id as order_id, 
	ai.amount as shipping_cost
from dcspp_order o, 
	dcspp_ship_group sg, 
	dcspp_amount_info ai
where o.order_id = sg.order_ref 
	and sg.price_info = ai.amount_info_id
         
Command completed successfully, 0 rows affected.




//-        drpt_taxes compiles the total tax cost for each order   
create view drpt_taxes
as
select o.order_id as order_id, 
	ai.amount as tax
from dcspp_order o, 
	dcspp_amount_info ai
where o.tax_price_info = ai.amount_info_id
         
Command completed successfully, 0 rows affected.




//-        drpt_cancels compiles information about orders that failed or   
//-        were cancelled   
create view drpt_cancels
as
select o.order_id as order_id, 
	o.submitted_date as submitted_date,
	ai.amount as amount, 
	si.shipping_cost as shipping_cost,
	ti.tax as tax
from dcspp_order o, 
	dcspp_amount_info ai, 
	drpt_shipping si, 
	drpt_taxes ti
where (o.state = 'FAILED' or o.state = 'REMOVED') 
	and o.price_info = ai.amount_info_id
	and o.order_id = si.order_id 
	and o.order_id = ti.order_id
         
Command completed successfully, 0 rows affected.




//-        drptw_cancels calculates the number of orders that failed or   
//-        were cancelled each week.  It also calculates the total   
//-        amount, shipping costs, and tax costs from those orders.   
create view drptw_cancels
as
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) as week, 
	count(order_id) as number_of_cancels,
	sum(amount) as amount, 
	sum(shipping_cost) as shipping_cost, 
	sum(tax) as tax
from drpt_cancels
group by week
UNION
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) as week, 
	0 as number_of_cancels, 
	0 as amount,
	0 as shipping_cost, 
	0 as tax
from dcspp_order
where convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) not in (select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) from drpt_cancels)
group by week
         
Command completed successfully, 0 rows affected.




//-        drptm_cancels calculates the number of orders that failed or   
//-        were cancelled each month.  It also calculates the total   
//-        amount, shipping costs, and tax costs from those orders.   
create view drptm_cancels
as
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) as month, 
	count(order_id) as number_of_cancels,
	sum(amount) as amount, 
	sum(shipping_cost) as shipping_cost, 
	sum(tax) as tax
from drpt_cancels
group by month
UNION
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) as month, 
	0 as number_of_cancels, 
	0 as amount,
	0 as shipping_cost, 
	0 as tax
from dcspp_order
where convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) not in (select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) from drpt_cancels)
group by month
         
Command completed successfully, 0 rows affected.




//-        drptq_cancels calculates the number of orders that failed or   
//-        were cancelled each quarter.  It also calculates the total   
//-        amount, shipping costs, and tax costs from those orders.   
create view drptq_cancels
as
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') as quarter, 
	count(order_id) as number_of_cancels,
	sum(amount) as amount, 
	sum(shipping_cost) as shipping_cost, 
	sum(tax) as tax
from drpt_cancels
group by quarter
UNION
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') as quarter, 
	0 as number_of_cancels, 
	0 as amount,
	0 as shipping_cost, 
	0 as tax
from dcspp_order
where convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') not in (select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') from drpt_cancels)
group by quarter
         
Command completed successfully, 0 rows affected.




//-        drpta_cancels calculates the number of orders that failed or   
//-        were cancelled in the past year.  It also calculates the total   
//-        amount, shipping costs, and tax costs from those orders.   
create view drpta_cancels
as
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') as year, 
	count(order_id) as number_of_cancels,
	sum(amount) as amount, 
	sum(shipping_cost) as shipping_cost, 
	sum(tax) as tax
from drpt_cancels
group by year
UNION
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') as year, 
	0 as number_of_cancels, 
	0 as amount,
	0 as shipping_cost, 
	0 as tax
from dcspp_order
where convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') not in (select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') from drpt_cancels)
group by year
         
Command completed successfully, 0 rows affected.




//-        drptw_gift_certs calculates the number of gift certificates   
//-        that were redeemed each week   
create view drptw_gift_certs
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	count(gc.payment_group_id) as num_of_gift_certs
from dcspp_order o, 
	dcspp_pay_group pg, 
	dcspp_gift_cert gc
where o.order_id = pg.order_ref 
	and pg.payment_group_id = gc.payment_group_id
group by week
UNION
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) as week, 
	0 as num_of_gift_certs
from dcspp_order
where order_id not in 
(select pg.order_ref 
from dcspp_pay_group pg, 
	dcspp_gift_cert gc 
where pg.payment_group_id = gc.payment_group_id)
group by week
         
Command completed successfully, 0 rows affected.




//-        drptm_gift_certs calculates the number of gift certificates   
//-        that were redeemed each month   
create view drptm_gift_certs
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	count(gc.payment_group_id) as num_of_gift_certs
from dcspp_order o, 
	dcspp_pay_group pg, 
	dcspp_gift_cert gc
where o.order_id = pg.order_ref 
	and pg.payment_group_id = gc.payment_group_id
group by month
UNION
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) as month, 
	0 as num_of_gift_certs
from dcspp_order
where order_id not in 
(select pg.order_ref 
from dcspp_pay_group pg, 
	dcspp_gift_cert gc 
where pg.payment_group_id = gc.payment_group_id)
group by month
         
Command completed successfully, 0 rows affected.




//-        drptq_gift_certs calculates the number of gift certificates   
//-        that were redeemed each quarter   
create view drptq_gift_certs
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	count(gc.payment_group_id) as num_of_gift_certs
from dcspp_order o, 
	dcspp_pay_group pg, 
	dcspp_gift_cert gc
where o.order_id = pg.order_ref 
	and pg.payment_group_id = gc.payment_group_id
group by quarter
UNION
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') as quarter, 
	0 as num_of_gift_certs
from dcspp_order
where order_id not in 
(select pg.order_ref 
from dcspp_pay_group pg, 
	dcspp_gift_cert gc 
where pg.payment_group_id = gc.payment_group_id)
group by quarter
         
Command completed successfully, 0 rows affected.




//-        drpta_gift_certs calculates the number of gift certificates   
//-        that were redeemed each year   
create view drpta_gift_certs
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	count(gc.payment_group_id) as num_of_gift_certs
from dcspp_order o, 
	dcspp_pay_group pg, 
	dcspp_gift_cert gc
where o.order_id = pg.order_ref 
	and pg.payment_group_id = gc.payment_group_id
group by year
UNION
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') as year, 
	0 as num_of_gift_certs
from dcspp_order
where order_id not in 
(select pg.order_ref 
from dcspp_pay_group pg, 
	dcspp_gift_cert gc 
where pg.payment_group_id = gc.payment_group_id)
group by year
         
Command completed successfully, 0 rows affected.




//-        drptw_orders calculates various totals from orders over each week   
create view drptw_orders
as
select convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(dri.submitted_date) -1) *86400))
 as week, 
	(sum(ai.amount) + sum(si.shipping_cost) + sum(ti.tax)) as total_dollar_sales,
	(wct.amount + wct.shipping_cost + wct.tax) as dollar_cancels,
	(sum(ai.amount) - wct.amount) as merch_rev,
	(sum(si.shipping_cost) + sum(ti.tax) - wct.shipping_cost - wct.tax) as shipping_tax_rev,
	sum(cog.cost_of_goods) as cost_of_goods_sold,
	(count(dri.order_id)) as number_of_orders, 
	(wct.number_of_cancels) as cancelled_orders,
	(count(dri.order_id) - wct.number_of_cancels) as net_num_of_orders,
	sum(dri.total_items) as total_units_sold,
	wdt.num_of_discounts as num_of_discounts,
	wgct.num_of_gift_certs as num_of_gift_certs
from dcspp_amount_info ai, 
	drpt_shipping si, 
	drpt_taxes ti,
	drptw_cancels wct, 
	drptw_discounts wdt,
	drptw_gift_certs wgct, 
	drpt_order dri, 
	drpt_cost_of_goods cog
where dri.price_info = ai.amount_info_id 
	and dri.order_id = si.order_id 
	and dri.order_id = ti.order_id 
	and convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(dri.submitted_date) -1) *86400))
 = wct.week 
	and convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(dri.submitted_date) -1) *86400))
 = wdt.week 
	and convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(dri.submitted_date) -1) *86400))
 = wgct.week 
	and dri.order_id = cog.order_id
group by week, 
	wct.number_of_cancels, 
	wct.amount, 
	wct.shipping_cost, 
	wct.tax, 
	wdt.num_of_discounts, 
	wgct.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




//-        drptm_orders calculates various totals from orders over each month   
create view drptm_orders
as
select convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(dri.submitted_date) -1) *86400)) as month, 
	(sum(ai.amount) + sum(si.shipping_cost) + sum(ti.tax)) as total_dollar_sales,
	(mct.amount + mct.shipping_cost + mct.tax) as dollar_cancels,
	(sum(ai.amount) - mct.amount) as merch_rev,
	(sum(si.shipping_cost) + sum(ti.tax) - mct.shipping_cost - mct.tax) as shipping_tax_rev,
	sum(cog.cost_of_goods) as cost_of_goods_sold,
	(count(dri.order_id)) as number_of_orders, 
	(mct.number_of_cancels) as cancelled_orders,
	(count(dri.order_id) - mct.number_of_cancels) as net_num_of_orders,
	sum(dri.total_items) as total_units_sold,
	mdt.num_of_discounts as num_of_discounts,
	mgct.num_of_gift_certs as num_of_gift_certs
from dcspp_amount_info ai, 
	drpt_shipping si, 
	drpt_taxes ti,
	drptm_cancels mct, 
	drptm_discounts mdt,
	drptm_gift_certs mgct, 
	drpt_order dri, 
	drpt_cost_of_goods cog
where dri.price_info = ai.amount_info_id 
	and dri.order_id = si.order_id 
	and dri.order_id = ti.order_id 
	and convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(dri.submitted_date) -1) *86400)) = mct.month 
	and convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(dri.submitted_date) -1) *86400)) = mdt.month 
	and convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(dri.submitted_date) -1) *86400)) = mgct.month 
	and dri.order_id = cog.order_id
group by month, 
	mct.number_of_cancels, mct.amount, 
	mct.shipping_cost, 
	mct.tax, 
	mdt.num_of_discounts, 
	mgct.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




//-        drptq_orders calculates various totals from orders over each quarter   
create view drptq_orders
as
select convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(dri.submitted_date)-1)*3+1)||'-01') as quarter, 
	(sum(ai.amount) + sum(si.shipping_cost) + sum(ti.tax)) as total_dollar_sales,
	(qct.amount + qct.shipping_cost + qct.tax) as dollar_cancels,
	(sum(ai.amount) - qct.amount) as merch_rev,
	(sum(si.shipping_cost) + sum(ti.tax) - qct.shipping_cost - qct.tax) as shipping_tax_rev,
	sum(cog.cost_of_goods) as cost_of_goods_sold,
	(count(dri.order_id)) as number_of_orders, 
	(qct.number_of_cancels) as cancelled_orders,
	(count(dri.order_id) - qct.number_of_cancels) as net_num_of_orders,
	sum(dri.total_items) as total_units_sold,
	qdt.num_of_discounts as num_of_discounts,
	qgct.num_of_gift_certs as num_of_gift_certs
from dcspp_amount_info ai, 
	drpt_shipping si, 
	drpt_taxes ti,
	drptq_cancels qct, 
	drptq_discounts qdt,
	drptq_gift_certs qgct, 
	drpt_order dri, 
	drpt_cost_of_goods cog
where dri.price_info = ai.amount_info_id 
	and dri.order_id = si.order_id 
	and dri.order_id = ti.order_id 
	and convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(dri.submitted_date)-1)*3+1)||'-01') = qct.quarter 
	and convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(dri.submitted_date)-1)*3+1)||'-01') = qdt.quarter 
	and convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(dri.submitted_date)-1)*3+1)||'-01') = qgct.quarter 
	and dri.order_id = cog.order_id
group by quarter, 
	qct.number_of_cancels, 
	qct.amount, 
	qct.shipping_cost, 
	qct.tax, 
	qdt.num_of_discounts, 
	qgct.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




//-        drpta_orders calculates various totals from orders over each year   
create view drpta_orders
as
select convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-01-01') as year, 
	(sum(ai.amount) + sum(si.shipping_cost) + sum(ti.tax)) as total_dollar_sales,
	(act.amount + act.shipping_cost + act.tax) as dollar_cancels,
	(sum(ai.amount) - act.amount) as merch_rev,
	(sum(si.shipping_cost) + sum(ti.tax) - act.shipping_cost - act.tax) as shipping_tax_rev,
	sum(cog.cost_of_goods) as cost_of_goods_sold,
	(count(dri.order_id)) as number_of_orders, 
	(act.number_of_cancels) as cancelled_orders,
	(count(dri.order_id) - act.number_of_cancels) as net_num_of_orders,
	sum(dri.total_items) as total_units_sold,
	adt.num_of_discounts as num_of_discounts,
	agct.num_of_gift_certs as num_of_gift_certs
from dcspp_amount_info ai, 
	drpt_shipping si, 
	drpt_taxes ti,
	drpta_cancels act, 
	drpta_discounts adt,
	drpta_gift_certs agct, 
	drpt_order dri, 
	drpt_cost_of_goods cog
where dri.price_info = ai.amount_info_id 
	and dri.order_id = si.order_id 
	and dri.order_id = ti.order_id 
	and convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-01-01') = act.year 
	and convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-01-01') = adt.year 
	and convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-01-01') = agct.year 
	and dri.order_id = cog.order_id
group by year, 
	act.number_of_cancels, 
	act.amount, 
	act.shipping_cost, 
	act.tax, 
	adt.num_of_discounts, 
	agct.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




create view drpt_visitor
(profileid,day,state,country)
as
 select distinct 
       vi.profileid, 
       convert_date(vi.timestamp) as day, 
       ci.state,
       ci.country
from dss_dps_view_item vi, dps_user_address ua, dps_contact_info ci
      where vi.profileid = ua.id
      and ua.billing_addr_id = ci.id
         
Command completed successfully, 0 rows affected.




//-        drpt_cart calculates the total quantity and amount of   
//-        items that have been added to shopping carts over each day   
create view drpt_cart
(orderid,day,quantity,amount)
as
select
        orderid as orderid, 
	convert_date(timestamp) as day, 
	sum(quantity) as quantity, 
	sum(amount) as amount
from dcs_cart_event
group by orderid, 
	day
         
Command completed successfully, 0 rows affected.




//-        drptw_fiscal_info caclulates several revenue-related totals over each week   
create view drptw_fiscal_info
as
select wot.week as week, 
	wot.total_dollar_sales as total_dollar_sales,
	wot.dollar_cancels as dollar_cancels, 
	(wot.total_dollar_sales - wot.dollar_cancels) as net_dollar_sales,
	wot.merch_rev as merch_rev,
	wot.shipping_tax_rev as shipping_tax_rev, 
	wot.number_of_orders as number_of_orders,
	wot.cancelled_orders as cancelled_orders, 
	wot.net_num_of_orders as net_num_of_orders,
	count(distinct ce.orderid) as num_of_carts, 
	((wot.total_dollar_sales - wot.dollar_cancels) / wot.net_num_of_orders) as avg_order_rev,
	(wot.merch_rev / wot.net_num_of_orders) as avg_order_merc_rev,
	count(distinct vi.sessionid) as number_of_shoppers,
	(wot.number_of_orders / count(distinct vi.sessionid)) as shop_to_purc_conv,
	(count(distinct ce.orderid) / count(distinct vi.sessionid)) as shop_to_cart_conv,
	(wot.number_of_orders / count(distinct ce.orderid)) as cart_to_purc_conv,
	wot.num_of_discounts as num_of_discounts, 
	wot.num_of_gift_certs as num_of_gift_certs
from drptw_orders wot, 
	dcs_cart_event ce, 
	dss_dps_view_item vi
where convert_date(CONVERT_INTEGER(ce.timestamp)-CONVERT_INTEGER((DAYOFWEEK(ce.timestamp) -1) *86400))
 = wot.week 
	and convert_date(CONVERT_INTEGER(vi.timestamp)-CONVERT_INTEGER((DAYOFWEEK(vi.timestamp) -1) *86400)) = wot.week
group by wot.week, 
	wot.total_dollar_sales, 
	wot.dollar_cancels,
	wot.merch_rev, 
	wot.shipping_tax_rev, 
	wot.number_of_orders,
	wot.cancelled_orders, 
	wot.net_num_of_orders, 
	wot.num_of_discounts,
	wot.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




//-        drptm_fiscal_info caclulates several revenue-related totals over each month   
create view drptm_fiscal_info
as
select mot.month as month, 
	mot.total_dollar_sales as total_dollar_sales,
	mot.dollar_cancels as dollar_cancels, 
	(mot.total_dollar_sales - mot.dollar_cancels) as net_dollar_sales,
	mot.merch_rev as merch_rev,
	mot.shipping_tax_rev as shipping_tax_rev, 
	mot.number_of_orders as number_of_orders,
	mot.cancelled_orders as cancelled_orders, 
	mot.net_num_of_orders as net_num_of_orders,
	count(distinct ce.orderid) as num_of_carts, 
	((mot.total_dollar_sales - mot.dollar_cancels) / mot.net_num_of_orders) as avg_order_rev,
	(mot.merch_rev / mot.net_num_of_orders) as avg_order_merc_rev,
	count(distinct vi.sessionid) as number_of_shoppers,
	(mot.number_of_orders / count(distinct vi.sessionid)) as shop_to_purc_conv,
	(count(distinct ce.orderid) / count(distinct vi.sessionid)) as shop_to_cart_conv,
	(mot.number_of_orders / count(distinct ce.orderid)) as cart_to_purc_conv,
	mot.num_of_discounts as num_of_discounts, 
	mot.num_of_gift_certs as num_of_gift_certs
from drptm_orders mot, 
	dcs_cart_event ce, 
	dss_dps_view_item vi
where convert_date(CONVERT_INTEGER(ce.timestamp)-CONVERT_INTEGER((DAYOFMONTH(ce.timestamp) -1) *86400)) = mot.month 
	and convert_date(CONVERT_INTEGER(vi.timestamp)-CONVERT_INTEGER((DAYOFMONTH(vi.timestamp) -1) *86400)) = mot.month
group by mot.month, 
	mot.total_dollar_sales, 
	mot.dollar_cancels,
	mot.merch_rev, 
	mot.shipping_tax_rev, 
	mot.number_of_orders,
	mot.cancelled_orders, 
	mot.net_num_of_orders, 
	mot.num_of_discounts,
	mot.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




//-        drptq_fiscal_info caclulates several revenue-related totals over each quarter   
create view drptq_fiscal_info
as
select qot.quarter as quarter, 
	qot.total_dollar_sales as total_dollar_sales,
	qot.dollar_cancels as dollar_cancels, 
	(qot.total_dollar_sales - qot.dollar_cancels) as net_dollar_sales,
	qot.merch_rev as merch_rev,
	qot.shipping_tax_rev as shipping_tax_rev, 
	qot.number_of_orders as number_of_orders,
	qot.cancelled_orders as cancelled_orders, 
	qot.net_num_of_orders as net_num_of_orders,
	count(distinct ce.orderid) as num_of_carts, 
	((qot.total_dollar_sales - qot.dollar_cancels) / qot.net_num_of_orders) as avg_order_rev,
	(qot.merch_rev / qot.net_num_of_orders) as avg_order_merc_rev,
	count(distinct vi.sessionid) as number_of_shoppers,
	(qot.number_of_orders / count(distinct vi.sessionid)) as shop_to_purc_conv,
	(count(distinct ce.orderid) / count(distinct vi.sessionid)) as shop_to_cart_conv,
	(qot.number_of_orders / count(distinct ce.orderid)) as cart_to_purc_conv,
	qot.num_of_discounts as num_of_discounts, 
	qot.num_of_gift_certs as num_of_gift_certs
from drptq_orders qot, 
	dcs_cart_event ce, 
	dss_dps_view_item vi
where convert_date(CONVERT_VARCHAR(year(ce.timestamp))||'-'||CONVERT_VARCHAR((QUARTER(ce.timestamp)-1)*3+1)||'-01') = qot.quarter 
	and convert_date(CONVERT_VARCHAR(year(vi.timestamp))||'-'||CONVERT_VARCHAR((QUARTER(vi.timestamp)-1)*3+1)||'-01') = qot.quarter
group by qot.quarter, 
	qot.total_dollar_sales, 
	qot.dollar_cancels,
	qot.merch_rev, 
	qot.shipping_tax_rev, 
	qot.number_of_orders,
	qot.cancelled_orders, 
	qot.net_num_of_orders, 
	qot.num_of_discounts,
	qot.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




//-        drpta_fiscal_info caclulates several revenue-related totals over each year   
create view drpta_fiscal_info
as
select aot.year as year, 
	aot.total_dollar_sales as total_dollar_sales,
	aot.dollar_cancels as dollar_cancels, 
	(aot.total_dollar_sales - aot.dollar_cancels) as net_dollar_sales,
	aot.merch_rev as merch_rev,
	aot.shipping_tax_rev as shipping_tax_rev,
	aot.number_of_orders as number_of_orders,
	aot.cancelled_orders as cancelled_orders, 
	aot.net_num_of_orders as net_num_of_orders,
	count(distinct ce.orderid) as num_of_carts, 
	((aot.total_dollar_sales - aot.dollar_cancels) / aot.net_num_of_orders) as avg_order_rev,
	(aot.merch_rev / aot.net_num_of_orders) as avg_order_merc_rev,
	count(distinct vi.sessionid) as number_of_shoppers,
	(aot.number_of_orders / count(distinct vi.sessionid)) as shop_to_purc_conv,
	(count(distinct ce.orderid) / count(distinct vi.sessionid)) as shop_to_cart_conv,
	(aot.number_of_orders / count(distinct ce.orderid)) as cart_to_purc_conv,
	aot.num_of_discounts as num_of_discounts, 
	aot.num_of_gift_certs as num_of_gift_certs
from drpta_orders aot, 
	dcs_cart_event ce, 
	dss_dps_view_item vi
where convert_date(CONVERT_VARCHAR(year(ce.timestamp))||'-01-01') = aot.year 
	and convert_date(CONVERT_VARCHAR(year(vi.timestamp))||'-01-01') = aot.year
group by aot.year, 
	aot.total_dollar_sales, 
	aot.dollar_cancels,
	aot.merch_rev, 
	aot.shipping_tax_rev, 
	aot.number_of_orders,
	aot.cancelled_orders, 
	aot.net_num_of_orders, 
	aot.num_of_discounts,
	aot.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




//-        drptw_promotion calculates totals about orders that were discounted   
//-        by the sample 'promo60003' promotion over each week   
create view drptw_promotion
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by week
         
Command completed successfully, 0 rows affected.




//-        drptm_promotion calculates totals about orders that were discounted   
//-        by the sample 'promo60003' promotion over each month   
create view drptm_promotion
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by month
         
Command completed successfully, 0 rows affected.




//-        drptq_promotion calculates totals about orders that were discounted   
//-        by the sample 'promo60003' promotion over each quarter   
create view drptq_promotion
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by quarter
         
Command completed successfully, 0 rows affected.




//-        drpta_promotion calculates totals about orders that were discounted   
//-        by the sample 'promo60003' promotion over each year   
create view drpta_promotion
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by year
         
Command completed successfully, 0 rows affected.




//-        drptw_male_18_25 calculates totals about orders that were placed   
//-        each week by males aged 18-25   
create view drptw_male_18_25
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18)  
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by week
         
Command completed successfully, 0 rows affected.




//-        drptm_male_18_25 calculates totals about orders that were placed   
//-        each month by males aged 18-25   
create view drptm_male_18_25
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18) 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by month
         
Command completed successfully, 0 rows affected.




//-        drptq_male_18_25 calculates totals about orders that were placed   
//-        each quarter by males aged 18-25   
create view drptq_male_18_25
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18) 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25) 
group by quarter
         
Command completed successfully, 0 rows affected.




//-        drpta_male_18_25 calculates totals about orders that were placed   
//-        each year by males aged 18-25   
create view drpta_male_18_25
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18) 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by year
         
Command completed successfully, 0 rows affected.




//-        drptw_male_25_39 calculates totals about orders that were placed   
//-        each week by males aged 25-39   
create view drptw_male_25_39
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25) 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39)
group by week
         
Command completed successfully, 0 rows affected.




//-        drptm_male_25_39 calculates totals about orders that were placed   
//-        each month by males aged 25-39   
create view drptm_male_25_39
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25) 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39)
group by month
         
Command completed successfully, 0 rows affected.




//-        drptq_male_25_39 calculates totals about orders that were placed   
//-        each quarter by males aged 25-39   
create view drptq_male_25_39
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39)
group by quarter
         
Command completed successfully, 0 rows affected.




//-        drpta_male_25_39 calculates totals about orders that were placed   
//-        each year by males aged 25-39   
create view drpta_male_25_39
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39) 
group by year
         
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// reporting_views1.sql




//-        drpt_products compiles information about each product in the catalog   
create view drpt_products
as
select p.product_id as product_id, 
	c.display_name as category_name, 
	avg(s.wholesale_price) as avg_cost, 
	avg(s.list_price) as avg_list_price, 
	avg(s.sale_price) as avg_sale_price, 
	((avg(s.list_price) - avg(s.wholesale_price)) / avg(s.wholesale_price)) as avg_initial_markup, 
	sum(inv.stock_level) as units_on_hand, 
	count(s.sku_id) as number_of_skus
from dcs_product p, 
	dcs_category c, 
	dcs_sku s, 
	dcs_prd_chldsku pc, 
	dcs_inventory inv
where p.parent_cat_id = c.category_id 
	and p.product_id = pc.product_id 
	and pc.sku_id = s.sku_id
and pc.sku_id = inv.catalog_ref_id
group by p.product_id, c.display_name
         
Command completed successfully, 0 rows affected.




//-        drpt_category calculates statistics about prices and costs on a per-category basis   
create view drpt_category
as
select c.display_name as category_name, 
	avg(s.wholesale_price)as avg_cost,
	avg(s.list_price) as avg_list_price,
	avg(s.sale_price) as avg_sale_price,
	((avg(s.list_price) - avg(s.wholesale_price)) / avg(s.wholesale_price)) as avg_initial_markup
from dcs_category c, 
	dcs_sku s, 
	dcs_prd_chldsku pc, 
	dcs_product p
where c.category_id = p.parent_cat_id 
	and pc.product_id = p.product_id 
	and pc.sku_id = s.sku_id
group by c.display_name
         
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// reporting_views2.sql




//-        drptw_prod_sales calculates several statistics over each week on a per-product basis    
//- drptw_prod_sales calculates several statistics over each week on a per-product basis    
create view drptw_prod_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / wot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price * i.quantity)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / wot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	wb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / wb.browses) as shop_to_purc_conv,
	wc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / wc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptw_browses wb, 
	drptw_carts wc, 
	drpt_sku_stock si, 
	drptw_orders wot, 
	dcs_sku s
where o.order_id = i.order_ref 
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = wc.product_id 
	and i.product_id = wb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wb.week 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wc.week 
	and si.product_id = i.product_id 
	and wot.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400))
	and i.catalog_ref_id = s.sku_id
group by week, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	wb.browses, 
	wc.adds_to_cart, 
	wot.total_units_sold,
	wot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock
         
Command completed successfully, 0 rows affected.




//-        drptm_prod_sales calculates several statistics over each month on a per-product basis    
create view drptm_prod_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / mot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as months_on_hand,
	sum(ai.amount) as total_rev, 
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price * i.quantity)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / mot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	mb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / mb.browses) as shop_to_purc_conv,
	mc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / mc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptm_browses mb, 
	drptm_carts mc, 
	drpt_sku_stock si, 
	drptm_orders mot, 
	dcs_sku s
where o.order_id = i.order_ref 
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = mc.product_id 
	and i.product_id = mb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mb.month 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mc.month 
	and si.product_id = i.product_id 
	and mot.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id
group by month, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup,
	pri.units_on_hand, 
	mb.browses, 
	mc.adds_to_cart, 
	mot.total_units_sold,
	mot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock
         
Command completed successfully, 0 rows affected.




//-        drptq_prod_sales calculates several statistics over each quarter on a per-product basis    
create view drptq_prod_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / qot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as quarters_on_hand,
	sum(ai.amount) as total_rev, 
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price * i.quantity)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / qot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	qb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / qb.browses) as shop_to_purc_conv,
	qc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / qc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptq_browses qb, 
	drptq_carts qc, 
	drpt_sku_stock si, 
	drptq_orders qot, 
	dcs_sku s
where o.order_id = i.order_ref 
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = qc.product_id 
	and i.product_id = qb.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qb.quarter 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qc.quarter 
	and si.product_id = i.product_id 
	and qot.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and i.catalog_ref_id = s.sku_id
group by quarter, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup,
	pri.units_on_hand, 
	qb.browses, 	
	qc.adds_to_cart, 
	qot.total_units_sold,
	qot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock
         
Command completed successfully, 0 rows affected.




//-        drpta_prod_sales calculates several statistics over each year on a per-product basis    
create view drpta_prod_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / aot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as years_on_hand,
	sum(ai.amount) as total_rev, 
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price * i.quantity)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / aot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	ab.browses as browses, count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / ab.browses) as shop_to_purc_conv, 
	ac.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / ac.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drpta_browses ab, 
	drpta_carts ac, 
	drpt_sku_stock si, 
	drpta_orders aot, 
	dcs_sku s
where o.order_id = i.order_ref 
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = ac.product_id 
	and i.product_id = ab.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ab.year 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ac.year 
	and si.product_id = i.product_id 
	and aot.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') 
	and i.catalog_ref_id = s.sku_id
group by year, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup,
	pri.units_on_hand, 
	ab.browses, 
	ac.adds_to_cart, 
	aot.total_units_sold,
	aot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock
         
Command completed successfully, 0 rows affected.




//-        drptw_promo_sales calculates totals about products that were discounted   
//-        by the sample 'promo60003' promotion over each week   
create view drptw_promo_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / wpt.total_units_sold) as promo_units_sold_p, 
	(sum(i.quantity) / wot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / wpt.total_dollar_sales) as promo_rev_p,
	(sum(ai.amount) / wot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	wb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / wb.browses) as shop_to_purc_conv,
	wc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / wc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptw_browses wb, 
	drptw_carts wc, 
	drpt_sku_stock si, 
	drptw_orders wot, 
	dcs_sku s, 
	drptw_promotion wpt, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = wc.product_id 
	and i.product_id = wb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wb.week 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wc.week 
	and si.product_id = i.product_id 
	and wot.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and wpt.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by week, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	wb.browses, 
	wc.adds_to_cart, 
	wot.total_units_sold, 
	wot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	wpt.total_units_sold, 
	wpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptm_promo_sales calculates totals about products that were discounted   
//-        by the sample 'promo60003' promotion over each month   
create view drptm_promo_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / mpt.total_units_sold) as promo_units_sold_p, 
	(sum(i.quantity) / mot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as months_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / mpt.total_dollar_sales) as promo_rev_p,
	(sum(ai.amount) / mot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	mb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / mb.browses) as shop_to_purc_conv, 
	mc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / mc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptm_browses mb, 
	drptm_carts mc, 
	drpt_sku_stock si, 
	drptm_orders mot, 
	dcs_sku s, 
	drptm_promotion mpt, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = mc.product_id 
	and i.product_id = mb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mb.month 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mc.month 
	and si.product_id = i.product_id 
	and mot.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and mpt.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by month, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	mb.browses, 
	mc.adds_to_cart, 
	mot.total_units_sold, 
	mot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	mpt.total_units_sold, 
	mpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptq_promo_sales calculates totals about products that were discounted   
//-        by the sample 'promo60003' promotion over each quarter   
create view drptq_promo_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / qpt.total_units_sold) as promo_units_sold_p, 
	(sum(i.quantity) / qot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as quarters_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / qpt.total_dollar_sales) as promo_rev_p,
	(sum(ai.amount) / qot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	qb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / qb.browses) as shop_to_purc_conv, 
	qc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / qc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptq_browses qb, 
	drptq_carts qc, 
	drpt_sku_stock si, 
	drptq_orders qot,
	dcs_sku s, 
	drptq_promotion qpt, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = qc.product_id 
	and i.product_id = qb.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qb.quarter 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qc.quarter 
	and si.product_id = i.product_id 
	and qot.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and qpt.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and i.catalog_ref_id = s.sku_id
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by quarter, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	qb.browses, 
	qc.adds_to_cart, 
	qot.total_units_sold, 
	qot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	qpt.total_units_sold, 
	qpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drpta_promo_sales calculates totals about products that were discounted   
//-        by the sample 'promo60003' promotion over each year   
create view drpta_promo_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / apt.total_units_sold) as promo_units_sold_p, 
	(sum(i.quantity) / aot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as years_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / apt.total_dollar_sales) as promo_rev_p,
	(sum(ai.amount) / aot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	ab.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / ab.browses) as shop_to_purc_conv,
	ac.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / ac.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drpta_browses ab, 
	drpta_carts ac, 
	drpt_sku_stock si, 
	drpta_orders aot, 
	dcs_sku s, 
	drpta_promotion apt, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = ac.product_id 
	and i.product_id = ab.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ab.year 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ac.year 
	and si.product_id = i.product_id 
	and aot.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01')
	and apt.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01')
	and i.catalog_ref_id = s.sku_id
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by year, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	ab.browses, 
	ac.adds_to_cart, 
	aot.total_units_sold, 
	aot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	apt.total_units_sold, 
	apt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptw_m_18_25_sales calculates totals about products that were purchased   
//-        by males aged 18-25 each week   
create view drptw_m18_25_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / wpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / wot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / wpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / wot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	wb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / wb.browses) as shop_to_purc_conv,
	wc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / wc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptw_browses wb, 
	drptw_carts wc, 
	drpt_sku_stock si, 
	drptw_orders wot, 
	dcs_sku s, 
	drptw_male_18_25 wpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = wc.product_id 
	and i.product_id = wb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wb.week 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wc.week 
	and si.product_id = i.product_id 
	and wot.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and wpt.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18)  
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by week, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	wb.browses, 
	wc.adds_to_cart, 
	wot.total_units_sold, 
	wot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	wpt.total_units_sold, 
	wpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptm_m_18_25_sales calculates totals about products that were purchased   
//-        by males aged 18-25 each month   
create view drptm_m18_25_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / mpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / mot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as months_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / mpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / mot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	mb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / mb.browses) as shop_to_purc_conv,
	mc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / mc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptm_browses mb, 
	drptm_carts mc, 
	drpt_sku_stock si, 
	drptm_orders mot, 
	dcs_sku s, 
	drptm_male_18_25 mpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = mc.product_id 
	and i.product_id = mb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mb.month 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mc.month 
	and si.product_id = i.product_id 
	and mot.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and mpt.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18)  
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by month, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	mb.browses, 
	mc.adds_to_cart, 
	mot.total_units_sold, 
	mot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	mpt.total_units_sold, 
	mpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptq_m_18_25_sales calculates totals about products that were purchased   
//-        by males aged 18-25 each quarter   
create view drptq_m18_25_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / qpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / qot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as quarters_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / qpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / qot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	qb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / qb.browses) as shop_to_purc_conv,
	qc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / qc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptq_browses qb, 
	drptq_carts qc, 
	drpt_sku_stock si, 
	drptq_orders qot, 
	dcs_sku s, 
	drptq_male_18_25 qpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = qc.product_id 
	and i.product_id = qb.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qb.quarter 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qc.quarter 
	and si.product_id = i.product_id 
	and qot.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and qpt.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01')
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18)  
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by quarter, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	qb.browses, 
	qc.adds_to_cart, 
	qot.total_units_sold, 
	qot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	qpt.total_units_sold, 
	qpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drpta_m_18_25_sales calculates totals about products that were purchased   
//-        by males aged 18-25 each year   
create view drpta_m18_25_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / apt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / aot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as years_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / apt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / aot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	ab.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / ab.browses) as shop_to_purc_conv,
	ac.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / ac.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drpta_browses ab, 
	drpta_carts ac, 
	drpt_sku_stock si, 
	drpta_orders aot, 
	dcs_sku s, 
	drpta_male_18_25 apt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = ac.product_id 
	and i.product_id = ab.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ab.year 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ac.year 
	and si.product_id = i.product_id 
	and aot.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') 
	and apt.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01')
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18)  
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by year, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	ab.browses, 
	ac.adds_to_cart, 
	aot.total_units_sold, 
	aot.merch_rev,
	pri.number_of_skus, 
	si.skus_in_stock, 
	apt.total_units_sold, 
	apt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptw_m_25_39_sales calculates totals about products that were purchased   
//-        by males aged 25-39 each week   
create view drptw_m25_39_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / wpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / wot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / wpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / wot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	wb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / wb.browses) as shop_to_purc_conv,
	wc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / wc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptw_browses wb, 
	drptw_carts wc, 
	drpt_sku_stock si, 
	drptw_orders wot, 
	dcs_sku s, 
	drptw_male_25_39 wpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = wc.product_id 
	and i.product_id = wb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wb.week 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wc.week 
	and si.product_id = i.product_id 
	and wot.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and wpt.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39) 
group by week, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	wb.browses, 
	wc.adds_to_cart, 
	wot.total_units_sold, 
	wot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	wpt.total_units_sold, 
	wpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptm_m_25_39_sales calculates totals about products that were purchased   
//-        by males aged 25-39 each month   
create view drptm_m25_39_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / mpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / mot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as months_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / mpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / mot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	mb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / mb.browses) as shop_to_purc_conv,
	mc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / mc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptm_browses mb, 
	drptm_carts mc, 
	drpt_sku_stock si, 
	drptm_orders mot, 
	dcs_sku s, 
	drptm_male_25_39 mpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = mc.product_id 
	and i.product_id = mb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mb.month 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mc.month 
	and si.product_id = i.product_id 
	and mot.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and mpt.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39) 
group by month, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	mb.browses, 
	mc.adds_to_cart, 
	mot.total_units_sold, 
	mot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	mpt.total_units_sold, 
	mpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptq_m_25_39_sales calculates totals about products that were purchased   
//-        by males aged 25-39 each quarter   
create view drptq_m25_39_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / qpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / qot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as quarters_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / qpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / qot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	qb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / qb.browses) as shop_to_purc_conv,
	qc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / qc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptq_browses qb, 
	drptq_carts qc, 
	drpt_sku_stock si, 
	drptq_orders qot, 
	dcs_sku s, 
	drptq_male_25_39 qpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = qc.product_id 
	and i.product_id = qb.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qb.quarter 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qc.quarter 
	and si.product_id = i.product_id 
	and qot.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and qpt.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39) 
group by quarter, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	qb.browses, 
	qc.adds_to_cart, 
	qot.total_units_sold, 
	qot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	qpt.total_units_sold, 
	qpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drpta_m_25_39_sales calculates totals about products that were purchased   
//-        by males aged 25-39 each year   
create view drpta_m25_39_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / apt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / aot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as years_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / apt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / aot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	ab.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / ab.browses) as shop_to_purc_conv,
	ac.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / ac.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drpta_browses ab, 
	drpta_carts ac, 
	drpt_sku_stock si, 
	drpta_orders aot, 
	dcs_sku s, 
	drpta_male_25_39 apt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = ac.product_id 
	and i.product_id = ab.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ab.year 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ac.year 
	and si.product_id = i.product_id 
	and aot.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') 
	and apt.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39) 
group by year, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	ab.browses, 
	ac.adds_to_cart, 
	aot.total_units_sold, 
	aot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	apt.total_units_sold, 	
	apt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// reporting_views3.sql




//-        drptw_cat_sales calculates various statistics over each week on a per-category basis   
create view drptw_cat_sales
as
select wps.week as week, 
	wps.category_name as category_name, 
	cri.avg_cost as avg_cost,
	cri.avg_list_price as avg_list_price, 
	cri.avg_sale_price as avg_sale_price,
	cri.avg_initial_markup as avg_initial_markup,
	sum(wps.units_sold) as units_sold, 
	sum(wps.total_rev) as total_rev,
	sum(wps.cost_of_goods_sold) as cost_of_goods_sold,
	((sum(wps.total_rev) - sum(wps.cost_of_goods_sold)) / sum(wps.total_rev)) as maintained_markup,
	(sum(wps.units_sold) / wot.total_units_sold) as total_units_sold_p,
	(sum(wps.total_rev) / wot.merch_rev) as total_rev_p, 
	sum(wps.units_on_hand) as units_on_hand,
	sum(wps.number_of_skus) as number_of_skus, 
	sum(wps.skus_in_stock) as skus_in_stock,
	(sum(wps.skus_in_stock) / sum(wps.number_of_skus)) as skus_in_stock_p,
	sum(wps.browses) as browses, 
	sum(wps.browse_conversions) as browse_conversions,
	(sum(wps.browse_conversions) / sum(wps.browses)) as shop_to_purc_conv,
	sum(wps.adds_to_cart) as adds_to_cart, 
	sum(wps.cart_conversions) as cart_conversions,
	(sum(wps.cart_conversions) / sum(wps.adds_to_cart)) as cart_to_purc_conv
from drptw_prod_sales wps, 
	drpt_category cri, 
	drptw_orders wot
where wps.category_name = cri.category_name 
	and wps.week = wot.week
group by wps.week, 
	wps.category_name, 
	cri.avg_cost, 
	cri.avg_list_price, 
	cri.avg_sale_price,
	cri.avg_initial_markup,
	wot.total_units_sold, 
	wot.merch_rev
         
Command completed successfully, 0 rows affected.




//-        drptm_cat_sales calculates various statistics over each month on a per-category basis   
create view drptm_cat_sales
as
select mps.month as month, 
	mps.category_name as category_name, 
	cri.avg_cost as avg_cost,
	cri.avg_list_price as avg_list_price, 
	cri.avg_sale_price as avg_sale_price, 
	cri.avg_initial_markup as avg_initial_markup,
	sum(mps.units_sold) as units_sold, 
	sum(mps.total_rev) as total_rev,
	sum(mps.cost_of_goods_sold) as cost_of_goods_sold,
	((sum(mps.total_rev) - sum(mps.cost_of_goods_sold)) / sum(mps.total_rev)) as maintained_markup,
	(sum(mps.units_sold) / mot.total_units_sold) as total_units_sold_p,
	(sum(mps.total_rev) / mot.merch_rev) as total_rev_p, 
	sum(mps.units_on_hand) as units_on_hand,
	sum(mps.number_of_skus) as number_of_skus, 
	sum(mps.skus_in_stock) as skus_in_stock,
	(sum(mps.skus_in_stock) / sum(mps.number_of_skus)) as skus_in_stock_p,
	sum(mps.browses) as browses, 
	sum(mps.browse_conversions) as browse_conversions,
	(sum(mps.browse_conversions) / sum(mps.browses)) as shop_to_purc_conv,
	sum(mps.adds_to_cart) as adds_to_cart, 
	sum(mps.cart_conversions) as cart_conversions,
	(sum(mps.cart_conversions) / sum(mps.adds_to_cart)) as cart_to_purc_conv
from drptm_prod_sales mps, 
	drpt_category cri, 
	drptm_orders mot
where mps.category_name = cri.category_name 
	and mps.month = mot.month
group by mps.month, 
	mps.category_name, 
	cri.avg_cost, 
	cri.avg_list_price, 
	cri.avg_sale_price,
	cri.avg_initial_markup,
	mot.total_units_sold, 
	mot.merch_rev
         
Command completed successfully, 0 rows affected.




//-        drptq_cat_sales calculates various statistics over each quarter on a per-category basis   
create view drptq_cat_sales
as
select qps.quarter as quarter, 
	qps.category_name as category_name, 
	cri.avg_cost as avg_cost,
	cri.avg_list_price as avg_list_price, 
	cri.avg_sale_price as avg_sale_price, 
	cri.avg_initial_markup as avg_initial_markup,
	sum(qps.units_sold) as units_sold, 
	sum(qps.total_rev) as total_rev,
	sum(qps.cost_of_goods_sold) as cost_of_goods_sold,
	((sum(qps.total_rev) - sum(qps.cost_of_goods_sold)) / sum(qps.total_rev)) as maintained_markup,
	(sum(qps.units_sold) / qot.total_units_sold) as total_units_sold_p,
	(sum(qps.total_rev) / qot.merch_rev) as total_rev_p, 
	sum(qps.units_on_hand) as units_on_hand,
	sum(qps.number_of_skus) as number_of_skus, 
	sum(qps.skus_in_stock) as skus_in_stock,
	(sum(qps.skus_in_stock) / sum(qps.number_of_skus)) as skus_in_stock_p,
	sum(qps.browses) as browses, 
	sum(qps.browse_conversions) as browse_conversions,
	(sum(qps.browse_conversions) / sum(qps.browses)) as shop_to_purc_conv,
	sum(qps.adds_to_cart) as adds_to_cart, 
	sum(qps.cart_conversions) as cart_conversions,
	(sum(qps.cart_conversions) / sum(qps.adds_to_cart)) as cart_to_purc_conv
from drptq_prod_sales qps, 
	drpt_category cri, 
	drptq_orders qot
where qps.category_name = cri.category_name 
	and qps.quarter = qot.quarter
group by qps.quarter, 
	qps.category_name, 
	cri.avg_cost, 
	cri.avg_list_price, 
	cri.avg_sale_price,
	cri.avg_initial_markup,
	qot.total_units_sold, 
	qot.merch_rev
         
Command completed successfully, 0 rows affected.




//-        drpta_cat_sales calculates various statistics over each year on a per-category basis   
create view drpta_cat_sales
as
select aps.year as year, 
	aps.category_name as category_name, 
	cri.avg_cost as avg_cost,
	cri.avg_list_price as avg_list_price, 
	cri.avg_sale_price as avg_sale_price, 
	cri.avg_initial_markup as avg_initial_markup,
	sum(aps.units_sold) as units_sold, 
	sum(aps.total_rev) as total_rev,
	sum(aps.cost_of_goods_sold) as cost_of_goods_sold,
	((sum(aps.total_rev) - sum(aps.cost_of_goods_sold)) / sum(aps.total_rev)) as maintained_markup,
	(sum(aps.units_sold) / aot.total_units_sold) as total_units_sold_p,
	(sum(aps.total_rev) / aot.merch_rev) as total_rev_p, 
	sum(aps.units_on_hand) as units_on_hand,
	sum(aps.number_of_skus) as number_of_skus, 
	sum(aps.skus_in_stock) as skus_in_stock,
	(sum(aps.skus_in_stock) / sum(aps.number_of_skus)) as skus_in_stock_p,
	sum(aps.browses) as browses, sum(aps.browse_conversions) as browse_conversions,
	(sum(aps.browse_conversions) / sum(aps.browses)) as shop_to_purc_conv,
	sum(aps.adds_to_cart) as adds_to_cart, 
	sum(aps.cart_conversions) as cart_conversions,
	(sum(aps.cart_conversions) / sum(aps.adds_to_cart)) as cart_to_purc_conv
from drpta_prod_sales aps, 
	drpt_category cri, 
	drpta_orders aot
where aps.category_name = cri.category_name 
	and aps.year = aot.year
group by aps.year, 
	aps.category_name, 
	cri.avg_cost, 
	cri.avg_list_price, 
	cri.avg_sale_price,
	cri.avg_initial_markup,
	aot.total_units_sold, 
	aot.merch_rev
         
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// priceLists_ddl.sql





create table dcs_price_list (
	price_list_id	varchar(40)	not null,
	version	integer	not null,
	display_name	varchar(254)	null,
	description	varchar(254)	null,
	creation_date	timestamp	null,
	last_mod_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	locale	integer	null,
	base_price_list	varchar(40)	null,
	item_acl	long varchar	null
, primary key (price_list_id)
, foreign key (base_price_list) references dcs_price_list (price_list_id))
Command completed successfully, 0 rows affected.



create index dcs_pricelstbase_i on dcs_price_list (base_price_list)
Command completed successfully, 0 rows affected.


alter table dcs_price_list set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_complex_price (
	complex_price_id	varchar(40)	not null,
	version	integer	not null
, primary key (complex_price_id))
Command completed successfully, 0 rows affected.



alter table dcs_complex_price set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_price (
	price_id	varchar(40)	not null,
	version	integer	not null,
	price_list	varchar(40)	not null,
	product_id	varchar(40)	null,
	sku_id	varchar(40)	null,
	parent_sku_id	varchar(40)	null,
	pricing_scheme	integer	not null,
	list_price	double precision	null,
	complex_price	varchar(40)	null
, primary key (price_id)
, foreign key (complex_price) references dcs_complex_price (complex_price_id)
, foreign key (price_list) references dcs_price_list (price_list_id))
Command completed successfully, 0 rows affected.



create index dcs_cmplx_prc_idx on dcs_price (complex_price)
Command completed successfully, 0 rows affected.


create index dcs_price_idx1 on dcs_price (product_id)
Command completed successfully, 0 rows affected.


create index dcs_price_idx2 on dcs_price (price_list,sku_id)
Command completed successfully, 0 rows affected.


alter table dcs_price set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_price_levels (
	complex_price_id	varchar(40)	not null,
	price_levels	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (complex_price_id,sequence_num)
, foreign key (complex_price_id) references dcs_complex_price (complex_price_id))
Command completed successfully, 0 rows affected.



alter table dcs_price_levels set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_price_level (
	price_level_id	varchar(40)	not null,
	version	integer	not null,
	quantity	integer	not null,
	price	double precision	not null
, primary key (price_level_id))
Command completed successfully, 0 rows affected.



alter table dcs_price_level set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_gen_fol_pl (
	folder_id	varchar(40)	not null,
	type	integer	not null,
	name	varchar(40)	not null,
	parent	varchar(40)	null,
	description	varchar(254)	null,
	item_acl	long varchar	null
, primary key (folder_id))
Command completed successfully, 0 rows affected.



alter table dcs_gen_fol_pl set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_child_fol_pl (
	folder_id	varchar(40)	not null,
	sequence_num	integer	not null,
	child_folder_id	varchar(40)	not null
, primary key (folder_id,sequence_num)
, foreign key (folder_id) references dcs_gen_fol_pl (folder_id))
Command completed successfully, 0 rows affected.



alter table dcs_child_fol_pl set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_plfol_chld (
	plfol_id	varchar(40)	not null,
	sequence_num	integer	not null,
	price_list_id	varchar(40)	not null
, primary key (plfol_id,sequence_num)
, foreign key (plfol_id) references dcs_gen_fol_pl (folder_id))
Command completed successfully, 0 rows affected.



alter table dcs_plfol_chld set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// order_markers_ddl.sql





create table dcs_order_markers (
	marker_id	varchar(40)	not null,
	order_id	varchar(40)	not null,
	marker_key	varchar(100)	not null,
	marker_value	varchar(100)	null,
	marker_data	varchar(100)	null,
	creation_date	timestamp	null,
	version	integer	not null,
	marker_type	integer	null
, primary key (marker_id,order_id)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index dcs_ordrmarkers1_x on dcs_order_markers (order_id)
Command completed successfully, 0 rows affected.


alter table dcs_order_markers set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// abandoned_order_ddl.sql




//- $Id: //product/DCS/main/templates/DCS/AbandonedOrderServices/sql/abandoned_order_ddl.xml#16 $

create table dcspp_ord_abandon (
	abandonment_id	varchar(40)	not null,
	version	integer	not null,
	order_id	varchar(40)	not null,
	ord_last_updated	timestamp	null,
	abandon_state	varchar(40)	null,
	abandonment_count	integer	null,
	abandonment_date	timestamp	null,
	reanimation_date	timestamp	null,
	convert_date	timestamp	null,
	lost_date	timestamp	null
, primary key (abandonment_id))
Command completed successfully, 0 rows affected.



create index dcspp_ordabandn1_x on dcspp_ord_abandon (order_id)
Command completed successfully, 0 rows affected.


alter table dcspp_ord_abandon set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_user_abandoned (
	id	varchar(40)	not null,
	order_id	varchar(40)	not null,
	profile_id	varchar(40)	not null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dcs_user_abandoned set pessimistic
Command completed successfully, 0 rows affected.




create table drpt_conv_order (
	order_id	varchar(40)	not null,
	converted_date	timestamp	not null,
	amount	numeric(19,7)	not null,
	promo_count	integer	not null,
	promo_value	numeric(19,7)	not null
, primary key (order_id))
Command completed successfully, 0 rows affected.



alter table drpt_conv_order set pessimistic
Command completed successfully, 0 rows affected.




create table drpt_session_ord (
	dataset_id	varchar(40)	not null,
	order_id	varchar(40)	not null,
	date_time	timestamp	not null,
	amount	numeric(19,7)	not null,
	submitted	integer	not null,
	order_persistent	tinyint	null,
	session_id	varchar(40)	null,
	parent_session_id	varchar(40)	null
, primary key (order_id))
Command completed successfully, 0 rows affected.



alter table drpt_session_ord set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// abandoned_order_views.sql




create view drpt_abandon_ord
as
      select oa.abandonment_date as abandonment_date, ai.amount as amount, case when oa.abandon_state = 'CONVERTED' then 100 else 0 end as converted from dcspp_order o, dcspp_ord_abandon oa, dcspp_amount_info ai where oa.order_id=o.order_id and o.price_info=ai.amount_info_id
         
Command completed successfully, 0 rows affected.




create view drpt_tns_abndn_ord
as
      select date_time as abandonment_date, amount as amount from drpt_session_ord where submitted=0
         
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// data_warehouse_extract_ddl.sql




//- This file contains create table statements, which will configureyour database for use with the new data warehouse extract repositorythat is used as part of Affinity Selling

create table DCSX_PROF_PROD_PURCH_FACT_SUM (
	profile_id	varchar(40)	not null,
	product_id	varchar(40)	not null,
	last_purchase	timestamp	not null,
	occurrences	integer	not null,
	quantity	integer	not null
, primary key (profile_id,product_id))
Command completed successfully, 0 rows affected.



alter table DCSX_PROF_PROD_PURCH_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.




create table DCSX_PROF_BRND_PURCH_FACT_SUM (
	profile_id	varchar(40)	not null,
	brand_id	wvarchar(255)	not null,
	last_purchase	timestamp	not null,
	occurrences	integer	not null,
	quantity	integer	not null
, primary key (profile_id,brand_id))
Command completed successfully, 0 rows affected.



alter table DCSX_PROF_BRND_PURCH_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.




create table DCSX_PROF_CAT_PURCH_FACT_SUM (
	profile_id	varchar(40)	not null,
	category_id	varchar(40)	not null,
	last_purchase	timestamp	not null,
	occurrences	integer	not null,
	quantity	integer	not null
, primary key (profile_id,category_id))
Command completed successfully, 0 rows affected.



alter table DCSX_PROF_CAT_PURCH_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.




create table DCSX_PROF_PRICE_FACT_SUM (
	profile_id	varchar(40)	not null,
	occurrences	integer	null,
	min_price	double precision	null,
	max_price	double precision	null,
	average_price	double precision	null,
	standard_deviation	double precision	null
, primary key (profile_id))
Command completed successfully, 0 rows affected.



alter table DCSX_PROF_PRICE_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.




create table DCSX_PROD_AFF_FACT_SUM (
	product_1_id	varchar(40)	not null,
	product_2_id	varchar(40)	not null,
	segment_name	wvarchar(255)	not null,
	purchase_purchase_occurrences	integer	null,
	purchase_purchase_affinity	double precision	null,
	purchase_purchase_inflated	double precision	null,
	purchase_purchase_avg_spread	double precision	null,
	browse_purchase_occurrences	integer	null,
	browse_purchase_affinity	double precision	null,
	browse_browse_occurrences	integer	null,
	browse_browse_affinity	double precision	null
, primary key (product_1_id,product_2_id,segment_name))
Command completed successfully, 0 rows affected.



alter table DCSX_PROD_AFF_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.




create table DCSX_PROD_AFF_GLOBAL_FACT_SUM (
	product_1_id	varchar(40)	not null,
	product_2_id	varchar(40)	not null,
	purchase_purchase_occurrences	integer	null,
	purchase_purchase_affinity	double precision	null,
	purchase_purchase_inflated	double precision	null,
	purchase_purchase_avg_spread	double precision	null,
	browse_purchase_occurrences	integer	null,
	browse_purchase_affinity	double precision	null,
	browse_browse_occurrences	integer	null,
	browse_browse_affinity	double precision	null
, primary key (product_1_id,product_2_id))
Command completed successfully, 0 rows affected.



alter table DCSX_PROD_AFF_GLOBAL_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.




create table DCSX_CAT_AFF_FACT_SUM (
	category_1_id	varchar(40)	not null,
	category_2_id	varchar(40)	not null,
	segment_name	wvarchar(255)	not null,
	purchase_purchase_occurrences	integer	null,
	purchase_purchase_affinity	double precision	null,
	purchase_purchase_inflated	double precision	null,
	purchase_purchase_avg_spread	double precision	null
, primary key (category_1_id,category_2_id,segment_name))
Command completed successfully, 0 rows affected.



alter table DCSX_CAT_AFF_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.




create table DCSX_CAT_AFF_GLOBAL_FACT_SUM (
	category_1_id	varchar(40)	not null,
	category_2_id	varchar(40)	not null,
	purchase_purchase_occurrences	integer	null,
	purchase_purchase_affinity	double precision	null,
	purchase_purchase_inflated	double precision	null,
	purchase_purchase_avg_spread	double precision	null
, primary key (category_1_id,category_2_id))
Command completed successfully, 0 rows affected.



alter table DCSX_CAT_AFF_GLOBAL_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.




SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.
-- Developing Commerce Web Applications
-- Lab exercise setup script
-- Last modified: 10-January-2006

-- These tables are needed in addition to default tables 
drop table dynamusic_tour_concerts
SOLID Table Error 13011: Table DYNAMUSIC_TOUR_CONCERTS does not exist


drop table dynamusic_tour_venue
SOLID Table Error 13011: Table DYNAMUSIC_TOUR_VENUE does not exist


drop table dynamusic_tour_artists
SOLID Table Error 13011: Table DYNAMUSIC_TOUR_ARTISTS does not exist


drop table dynamusic_fanclub
SOLID Table Error 13011: Table DYNAMUSIC_FANCLUB does not exist


drop table dynamusic_poster
SOLID Table Error 13011: Table DYNAMUSIC_POSTER does not exist


drop table dynamusic_tour
SOLID Table Error 13011: Table DYNAMUSIC_TOUR does not exist


drop table dynamusic_newsongs_playlist
SOLID Table Error 13011: Table DYNAMUSIC_NEWSONGS_PLAYLIST does not exist


drop table dynamusic_user
SOLID Table Error 13011: Table DYNAMUSIC_USER does not exist


drop table dynamusic_prefgenres
SOLID Table Error 13011: Table DYNAMUSIC_PREFGENRES does not exist


drop table dynamusic_viewedartists
SOLID Table Error 13011: Table DYNAMUSIC_VIEWEDARTISTS does not exist


drop table dynamusic_viewedsongs
SOLID Table Error 13011: Table DYNAMUSIC_VIEWEDSONGS does not exist


drop table dynamusic_user_playlists
SOLID Table Error 13011: Table DYNAMUSIC_USER_PLAYLISTS does not exist


drop table dynamusic_playlist_song
SOLID Table Error 13011: Table DYNAMUSIC_PLAYLIST_SONG does not exist


drop table dynamusic_playlist
SOLID Table Error 13011: Table DYNAMUSIC_PLAYLIST does not exist


drop table dynamusic_venue_eventtypes
SOLID Table Error 13011: Table DYNAMUSIC_VENUE_EVENTTYPES does not exist


drop table dynamusic_concert_artists
SOLID Table Error 13011: Table DYNAMUSIC_CONCERT_ARTISTS does not exist


drop table dynamusic_concert
SOLID Table Error 13011: Table DYNAMUSIC_CONCERT does not exist


drop table dynamusic_venue
SOLID Table Error 13011: Table DYNAMUSIC_VENUE does not exist


drop table dynamusic_album_songs
SOLID Table Error 13011: Table DYNAMUSIC_ALBUM_SONGS does not exist


drop table dynamusic_classical_song
SOLID Table Error 13011: Table DYNAMUSIC_CLASSICAL_SONG does not exist


drop table dynamusic_song
SOLID Table Error 13011: Table DYNAMUSIC_SONG does not exist


drop table dynamusic_artist_soloist
SOLID Table Error 13011: Table DYNAMUSIC_ARTIST_SOLOIST does not exist


drop table dynamusic_artist_group_members
SOLID Table Error 13011: Table DYNAMUSIC_ARTIST_GROUP_MEMBERS does not exist


drop table dynamusic_CDROM_product_OS
SOLID Table Error 13011: Table DYNAMUSIC_CDROM_PRODUCT_OS does not exist


drop table dynamusic_CDROM_product
SOLID Table Error 13011: Table DYNAMUSIC_CDROM_PRODUCT does not exist


drop table dynamusic_product
SOLID Table Error 13011: Table DYNAMUSIC_PRODUCT does not exist


drop table dynamusic_album_product
SOLID Table Error 13011: Table DYNAMUSIC_ALBUM_PRODUCT does not exist


drop table dynamusic_artist
SOLID Table Error 13011: Table DYNAMUSIC_ARTIST does not exist


drop table dynamusic_product
SOLID Table Error 13011: Table DYNAMUSIC_PRODUCT does not exist


drop table dynamusic_item_bought
SOLID Table Error 13011: Table DYNAMUSIC_ITEM_BOUGHT does not exist



commit work
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_artist (
        id                      VARCHAR(32)     not null,
        name                    VARCHAR(100)    null,
        description             LONG VARCHAR    null,
        image                   VARCHAR(32)     null,
        genre			INTEGER		null,
        artist_type		INTEGER		null,
        primary key(id)
        )
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_artist_group_members (
        artist_id               VARCHAR(32)     not null,
        member_name             VARCHAR(32)     not null,
        primary key(artist_id,member_name)
        )
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_artist_group_members_idx ON dynamusic_artist_group_members(artist_id)
Command completed successfully, 0 rows affected.


        
CREATE TABLE dynamusic_artist_soloist (
	artist_id		VARCHAR(32)	not null,
	first_name		VARCHAR(100)	null,
	last_name		VARCHAR(100)	null,
	primary key(artist_id)
	)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_artist_soloist_idx ON dynamusic_artist_soloist(artist_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_song (
        id                      VARCHAR(32)     not null,
        title                   VARCHAR(100)    null,
        genre                   INTEGER         null,
        download                VARCHAR(100)    null,
--        artist                  VARCHAR(32)     null references dynamusic_artist(id),
        artist                  VARCHAR(32)     null,
        lyrics                  LONG VARCHAR    null,
        song_size		INTEGER		null,
        song_length		INTEGER		null,
        song_type		VARCHAR(20)	null,
        primary key(id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_classical_song (
        song_id                 VARCHAR(32)     not null,
        performer		VARCHAR(100)    null,
        primary key(song_id)
        )
Command completed successfully, 0 rows affected.


        
CREATE TABLE dynamusic_venue (
        id                      VARCHAR(32)     not null,
        name                    VARCHAR(100)    null,
        description             LONG VARCHAR    null,
        street1                 VARCHAR(100)    null,
        street2                 VARCHAR(100)    null,
        state                   VARCHAR(32)     null,
        city                    VARCHAR(50)     null,
        zip                     VARCHAR(10)     null,
        phone			VARCHAR(20)	null,
        image                   VARCHAR(100)    null,
        url                     VARCHAR(100)    null,
        primary key(id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_venue_eventtypes (
        venue_id                VARCHAR(32)     not null,
        event_type              VARCHAR(32)     not null,
        primary key(venue_id, event_type)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_concert (
        id                      VARCHAR(32)     not null,
        name                    VARCHAR(100)    null,
        description             LONG VARCHAR    null,
        venue                   VARCHAR(32)     null references dynamusic_venue(id),
        image                   VARCHAR(100)    null,
        event_date              TIMESTAMP       null,
        primary key(id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_concert_artists (
        concert_id              VARCHAR(32)     not null references dynamusic_concert(id),
--        artist_id               VARCHAR(32)     not null references dynamusic_artist(id),
        artist_id               VARCHAR(32)     not null,
        primary key(concert_id, artist_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_concert_artists_concert_idx ON dynamusic_concert_artists(concert_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_user (
        user_id                 VARCHAR(32)     not null references dps_user(id),
        info                    LONG VARCHAR    null,
        share_profile           NUMERIC(1)      null,
        CHECK (share_profile in (0, 1)),
        subscriber           NUMERIC(1)      null,
        CHECK (subscriber in (0, 1)),
        initial_download_number		INTEGER		null,
        my_download_number		INTEGER		null,
	num_orders	integer	not null,
	cum_order_amt	double precision	not null,
        primary key(user_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_user_user_idx ON dynamusic_user(user_id)
Command completed successfully, 0 rows affected.



create table dynamusic_item_bought (
	id	varchar(40)	not null	references dps_user (id),
	sequence_num	integer	not null,
	item	varchar(40)	not null,
	primary key (id,sequence_num)
)
Command completed successfully, 0 rows affected.



create index dyn_itm_bht_id_idx on dynamusic_item_bought (id)
Command completed successfully, 0 rows affected.


alter table dynamusic_item_bought set pessimistic
Command completed successfully, 0 rows affected.




CREATE TABLE dynamusic_prefgenres (
        id                      VARCHAR(32)     not null references dps_user(id),
        genre                   VARCHAR(32)     not null,
        primary key(id, genre)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_prefgenres_idx ON dynamusic_prefgenres(id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_viewedartists (
        user_id                 VARCHAR(32)     not null references dps_user(id),
--        artist_id               VARCHAR(32)     not null references dynamusic_artist(id),
        artist_id               VARCHAR(32)     not null,
        primary key(user_id, artist_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_viewedartists_idx ON dynamusic_viewedartists(user_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_viewedsongs (
        user_id                 VARCHAR(32)     not null references dps_user(id),
--        song_id               VARCHAR(32)     not null references dynamusic_song(id),
        song_id               VARCHAR(32)     not null,
        primary key(user_id, song_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_viewedsongs_idx ON dynamusic_viewedsongs(user_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_playlist (
        id                      VARCHAR(32)     not null,
        name                    VARCHAR(100)    null,
        publish                 NUMERIC(1)      null,
        description             LONG VARCHAR    null,
           CHECK (publish in (0, 1)),
        primary key(id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_playlist_song (
        pl_id                   VARCHAR(32)     not null references dynamusic_playlist(id),
        song_id                 VARCHAR(32)     not null references dynamusic_song(id),
        primary key(song_id, pl_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_playlist_song_pl_idx ON dynamusic_playlist_song(pl_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_user_playlists (
        user_id                 VARCHAR(32)     not null references dps_user(id),
        pl_id                   VARCHAR(32)     not null references dynamusic_playlist(id),
        primary key(user_id, pl_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_user_playlists_user_idx ON dynamusic_user_playlists(user_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_newsongs_playlist (
        user_id                 VARCHAR(32)     not null references dps_user(id),
        newsongs_playlist       LONG VARCHAR    null,
        newsongs_auto_update    NUMERIC(1)      null,
        primary key(user_id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_tour (
     id            VARCHAR(32)     not null,
     tour_name     VARCHAR(32)     null,
     primary key(id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_poster (
     artist_id     VARCHAR(32)     not null,
     tour_id       VARCHAR(32)     not null references dynamusic_tour(id),
     poster_name   VARCHAR(32)     null,
     image         VARCHAR(32)     null,
     primary key(artist_id, tour_id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_fanclub (
     organization_id	VARCHAR(32)	not null,
     download_limit	INTEGER		not null,
     primary key(organization_id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_tour_artists (
        tour_id      VARCHAR(32)     not null references dynamusic_tour(id),
--        artist_id    VARCHAR(32)     not null references dynamusic_artist(id),
        artist_id    VARCHAR(32)     not null,
        primary key(tour_id, artist_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_tour_artists_tour_idx ON dynamusic_tour_artists(tour_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_tour_venue (
        tour_id      VARCHAR(32)     not null references dynamusic_tour(id),
        venue_id     VARCHAR(32)     not null references dynamusic_venue(id),
        primary key(tour_id, venue_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_tour_venue_tour_idx ON dynamusic_tour_venue(tour_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_tour_concerts (
        tour_id      VARCHAR(32)     not null references dynamusic_tour(id),
        date_key          VARCHAR(32)     not null,
        concert   VARCHAR(32)     not null references dynamusic_concert(id),
        primary key(tour_id, date_key)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_product (
        product_id	VARCHAR(40)	NOT NULL	REFERENCES dcs_product(product_id),
        available	TINYINT		null,
        downloadable    TINYINT		null,
        PRIMARY KEY(product_id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_album_product (
        product_id	VARCHAR(40)	NOT NULL	REFERENCES dcs_product(product_id),
        album_title	VARCHAR(100)    null,
        album_length    VARCHAR(20)		null,
        artist          VARCHAR(32)     null references dynamusic_artist(id),
        release_date	TIMESTAMP	null,
        genre           INTEGER         null,
        CD_type		VARCHAR(20)	null,		
        PRIMARY KEY(product_id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_CDROM_product (
        product_id              VARCHAR(40)     not null,
        description		LONG VARCHAR	null,
        primary key(product_id)
        )
Command completed successfully, 0 rows affected.


        
CREATE TABLE dynamusic_CDROM_product_OS (
        product_id      VARCHAR(40)     not null references dynamusic_CDROM_product(product_id),
        os_option	VARCHAR(100)    not null,
        primary key(product_id)
        )
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_album_songs (
        album_id                VARCHAR(32)     not null references dynamusic_album_product(product_id),
        song_list               VARCHAR(32)     not null references dynamusic_song(id),
        primary key(album_id, song_list)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_album_songs_album_idx ON dynamusic_album_songs(album_id)
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.



SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.
drop table loyalty_transactions
SOLID Table Error 13011: Table LOYALTY_TRANSACTIONS does not exist



commit work
Command completed successfully, 0 rows affected.




CREATE TABLE loyalty_transactions (
		id					VARCHAR(32)			not null,
		amount				INTEGER				null,
		description			LONG VARCHAR		null,
		transaction_date	TIMESTAMP			null,
		profile_id			VARCHAR(32)			null,
		primary key(id)		
)
Command completed successfully, 0 rows affected.



CREATE TABLE loyalty_user_transactions (
		user_id                 VARCHAR(32)     not null references dps_user(id),
        loyalty_trans_id		VARCHAR(32)     not null references loyalty_transactions(id),
        sequence_num  			INTEGER,
        primary key(user_id, loyalty_trans_id)
)
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.

SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.
drop table dcspp_loyalty_points_payment_group
SOLID Table Error 13011: Table DCSPP_LOYALTY_POINTS_PAYMENT_GROUP does not exist



commit work
Command completed successfully, 0 rows affected.



CREATE TABLE loyalty_points_payment_group (
		id					VARCHAR(32)				NOT NULL,
		user_id             VARCHAR(32)     		not null references dps_user(id),
		loyalty_points		INTEGER					null,
		primary key(id)	
)
Command completed successfully, 0 rows affected.



CREATE TABLE loyalty_users_payment_groups (
		id							VARCHAR(32)				NOT NULL,
		loyalty_points_group_id   	VARCHAR(32)     		not null references loyalty_points_payment_group(id),
		primary key(id)	
)
Command completed successfully, 0 rows affected.



CREATE TABLE loyalty_status (
		status_id			VARCHAR(32)				NOT NULL references dcspp_pay_status(status_id),
		auth_expiration     TIMESTAMP	     		null,
		primary key(status_id)	
)
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.

SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.

// the source for this section is 
// id_generator.sql





create table das_id_generator (
	id_space_name	varchar(60)	not null,
	seed	numeric(19,0)	not null,
	batch_size	integer	not null,
	prefix	varchar(10)	null,
	suffix	varchar(10)	null
, primary key (id_space_name))
Command completed successfully, 0 rows affected.



alter table das_id_generator set pessimistic
Command completed successfully, 0 rows affected.




create table das_secure_id_gen (
	id_space_name	varchar(60)	not null,
	seed	numeric(19,0)	not null,
	batch_size	integer	not null,
	ids_per_batch	integer	null,
	prefix	varchar(10)	null,
	suffix	varchar(10)	null
, primary key (id_space_name))
Command completed successfully, 0 rows affected.



alter table das_secure_id_gen set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// cluster_name_ddl.sql





create table das_cluster_name (
	cluster_name	varchar(255)	not null,
	saved_date	bigint	not null)
Command completed successfully, 0 rows affected.



alter table das_cluster_name set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// dms_limbo_ddl.sql




//- This table is where limbo instance/clients identify themselves. --There should only be one entry in this table for each Dynamo running PatchBay with message delays enabled.

create table dms_limbo (
	limbo_name	varchar(250)	not null,
	limbo_id	numeric(19,0)	not null
, primary key (limbo_name))
Command completed successfully, 0 rows affected.



alter table dms_limbo set pessimistic
Command completed successfully, 0 rows affected.



//- The following four tables comprise the parts of the stored messages.

create table dms_limbo_msg (
	msg_id	numeric(19,0)	not null,
	limbo_id	numeric(19,0)	not null,
	delivery_date	numeric(19,0)	not null,
	delivery_count	numeric(2,0)	not null,
	msg_src_name	varchar(250)	not null,
	port_name	varchar(250)	not null,
	msg_class	varchar(250)	not null,
	msg_class_type	numeric(1,0)	not null,
	jms_type	varchar(250)	null,
	jms_expiration	numeric(19,0)	null,
	jms_correlationid	varchar(250)	null
, primary key (msg_id))
Command completed successfully, 0 rows affected.



create index dms_limbo_read_idx on dms_limbo_msg (limbo_id,delivery_date)
Command completed successfully, 0 rows affected.


alter table dms_limbo_msg set pessimistic
Command completed successfully, 0 rows affected.



//- If serialized reply-to destinations are known to be small enough, this binary column's size can be reduced for efficiency.  The size here has been chosen to work with local dms and SQL-JMS.

create table dms_limbo_replyto (
	msg_id	numeric(19,0)	not null,
	jms_replyto	varbinary(500)	null
, primary key (msg_id))
Command completed successfully, 0 rows affected.



alter table dms_limbo_replyto set pessimistic
Command completed successfully, 0 rows affected.



//- If serialized message bodies are known to be small enough, this binary column's size can be reduced for efficiency.  The size here has been chosen to work with almost all types of messages but may be larger than necessary.  Actual usage analysis is recommended for finding the optimal binary column size.

create table dms_limbo_body (
	msg_id	numeric(19,0)	not null,
	msg_body	long varbinary	null
, primary key (msg_id))
Command completed successfully, 0 rows affected.



alter table dms_limbo_body set pessimistic
Command completed successfully, 0 rows affected.



//- This table represents a map of properties for messages stored above, i.e.  there can be multiple rows in this table for a single row in the preceeding tables.

create table dms_limbo_props (
	msg_id	numeric(19,0)	not null,
	prop_name	varchar(250)	not null,
	prop_value	varchar(250)	not null
, primary key (msg_id,prop_name))
Command completed successfully, 0 rows affected.



alter table dms_limbo_props set pessimistic
Command completed successfully, 0 rows affected.




create table dms_limbo_ptypes (
	msg_id	numeric(19,0)	not null,
	prop_name	varchar(250)	not null,
	prop_type	numeric(1,0)	not null
, primary key (msg_id,prop_name))
Command completed successfully, 0 rows affected.



alter table dms_limbo_ptypes set pessimistic
Command completed successfully, 0 rows affected.




create table dms_limbo_delay (
	msg_id	numeric(19,0)	not null,
	delay	numeric(19,0)	not null,
	max_attempts	numeric(2,0)	not null,
	failure_port	varchar(250)	not null,
	jms_timestamp	numeric(19,0)	null,
	jms_deliverymode	numeric(10,0)	null,
	jms_priority	numeric(10,0)	null,
	jms_messageid	varchar(250)	null,
	jms_redelivered	numeric(1,0)	null,
	jms_destination	varbinary(500)	null
, primary key (msg_id))
Command completed successfully, 0 rows affected.



alter table dms_limbo_delay set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// create_sql_jms_ddl.sql





create table dms_client (
	client_name	varchar(250)	not null,
	client_id	numeric(19,0)	null
, primary key (client_name))
Command completed successfully, 0 rows affected.



alter table dms_client set pessimistic
Command completed successfully, 0 rows affected.




create table dms_queue (
	queue_name	varchar(250)	null,
	queue_id	numeric(19,0)	not null,
	temp_id	numeric(19,0)	null
, primary key (queue_id))
Command completed successfully, 0 rows affected.



alter table dms_queue set pessimistic
Command completed successfully, 0 rows affected.




create table dms_queue_recv (
	client_id	numeric(19,0)	null,
	receiver_id	numeric(19,0)	not null,
	queue_id	numeric(19,0)	null
, primary key (receiver_id))
Command completed successfully, 0 rows affected.



alter table dms_queue_recv set pessimistic
Command completed successfully, 0 rows affected.




create table dms_queue_entry (
	queue_id	numeric(19,0)	not null,
	msg_id	numeric(19,0)	not null,
	delivery_date	numeric(19,0)	null,
	handling_client_id	numeric(19,0)	null,
	read_state	numeric(19,0)	null
, primary key (queue_id,msg_id))
Command completed successfully, 0 rows affected.



alter table dms_queue_entry set pessimistic
Command completed successfully, 0 rows affected.




create table dms_topic (
	topic_name	varchar(250)	null,
	topic_id	numeric(19,0)	not null,
	temp_id	numeric(19,0)	null
, primary key (topic_id))
Command completed successfully, 0 rows affected.



alter table dms_topic set pessimistic
Command completed successfully, 0 rows affected.




create table dms_topic_sub (
	client_id	numeric(19,0)	null,
	subscriber_name	varchar(250)	null,
	subscriber_id	numeric(19,0)	not null,
	topic_id	numeric(19,0)	null,
	durable	numeric(1,0)	null,
	active	numeric(1,0)	null
, primary key (subscriber_id))
Command completed successfully, 0 rows affected.



alter table dms_topic_sub set pessimistic
Command completed successfully, 0 rows affected.




create table dms_topic_entry (
	subscriber_id	numeric(19,0)	not null,
	msg_id	numeric(19,0)	not null,
	delivery_date	numeric(19,0)	null,
	read_state	numeric(19,0)	null
, primary key (subscriber_id,msg_id))
Command completed successfully, 0 rows affected.



create index dms_topic_msg_idx on dms_topic_entry (msg_id,subscriber_id)
Command completed successfully, 0 rows affected.


create index dms_topic_read_idx on dms_topic_entry (read_state,delivery_date)
Command completed successfully, 0 rows affected.


alter table dms_topic_entry set pessimistic
Command completed successfully, 0 rows affected.




create table dms_msg (
	msg_class	varchar(250)	null,
	has_properties	numeric(1,0)	null,
	reference_count	numeric(10,0)	null,
	msg_id	numeric(19,0)	not null,
	timestamp	numeric(19,0)	null,
	correlation_id	varchar(250)	null,
	reply_to	numeric(19,0)	null,
	destination	numeric(19,0)	null,
	delivery_mode	numeric(1,0)	null,
	redelivered	numeric(1,0)	null,
	type	varchar(250)	null,
	expiration	numeric(19,0)	null,
	priority	numeric(1,0)	null,
	small_body	varbinary(250)	null,
	large_body	long varbinary	null
, primary key (msg_id))
Command completed successfully, 0 rows affected.



alter table dms_msg set pessimistic
Command completed successfully, 0 rows affected.




create table dms_msg_properties (
	msg_id	numeric(19,0)	not null,
	data_type	numeric(1,0)	null,
	name	varchar(250)	not null,
	value	varchar(250)	null
, primary key (msg_id,name))
Command completed successfully, 0 rows affected.



alter table dms_msg_properties set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// create_staff_ddl.sql




//- SQL for creating the Dynamo Staff Repository for the GSA
//- Primary account table.
//-  Type=1 is a login account.  The first_name, last_name, and password         fields are valid for this type of account.
//- Type=2 is a group account.  The description field is valid for        this type of account.
//- Type=4 is a privilege account.  The description field is valid for        this type of account.

create table das_account (
	account_name	wvarchar(254)	not null,
	type	integer	not null,
	first_name	wvarchar(254)	null,
	last_name	wvarchar(254)	null,
	password	varchar(254)	null,
	description	wvarchar(254)	null,
	lastpwdupdate	timestamp	null
, primary key (account_name))
Command completed successfully, 0 rows affected.



alter table das_account set pessimistic
Command completed successfully, 0 rows affected.




create table das_group_assoc (
	account_name	wvarchar(254)	not null,
	sequence_num	integer	not null,
	group_name	wvarchar(254)	not null
, primary key (account_name,sequence_num))
Command completed successfully, 0 rows affected.



alter table das_group_assoc set pessimistic
Command completed successfully, 0 rows affected.



//- Adding the previous password information

create table das_acct_prevpwd (
	account_name	wvarchar(254)	not null,
	seq_num	integer	not null,
	prevpwd	varchar(35)	null
, primary key (account_name,seq_num)
, foreign key (account_name) references das_account (account_name))
Command completed successfully, 0 rows affected.



alter table das_acct_prevpwd set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// create_gsa_subscribers_ddl.sql





create table das_gsa_subscriber (
	id	integer	not null,
	address	varchar(50)	not null,
	port	integer	not null,
	repository	varchar(256)	not null,
	itemdescriptor	varchar(256)	not null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table das_gsa_subscriber set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// create_sds.sql





create table das_sds (
	sds_name	varchar(50)	not null,
	curr_ds_name	varchar(50)	null,
	dynamo_server	varchar(80)	null,
	last_modified	timestamp	null
, primary key (sds_name))
Command completed successfully, 0 rows affected.



alter table das_sds set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// integration_data_ddl.sql





create table if_integ_data (
	item_id	varchar(40)	not null,
	descriptor	wvarchar(255)	not null,
	repository	wvarchar(255)	not null,
	state	integer	not null,
	last_import	timestamp	null,
	version	integer	not null
, primary key (item_id,descriptor,repository))
Command completed successfully, 0 rows affected.



alter table if_integ_data set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// rl_example_ddl.sql





create table rlex_file_folder (
	folder_id	varchar(40)	not null,
	folder_name	wvarchar(255)	not null,
	parent_folder	varchar(40)	null
, primary key (folder_id))
Command completed successfully, 0 rows affected.



create index rlex_file_fold_id1 on rlex_file_folder (folder_name)
Command completed successfully, 0 rows affected.


alter table rlex_file_folder set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_file_asset (
	file_asset_id	varchar(40)	not null,
	asset_type	numeric(19)	not null,
	filename	wvarchar(255)	not null,
	last_modified	timestamp	null,
	size_bytes	numeric(19)	null,
	parent_folder	varchar(40)	null
, primary key (file_asset_id)
, foreign key (parent_folder) references rlex_file_folder (folder_id))
Command completed successfully, 0 rows affected.



create index rlex_file_asst_id2 on rlex_file_asset (parent_folder)
Command completed successfully, 0 rows affected.


create index rlex_file_asst_id1 on rlex_file_asset (filename)
Command completed successfully, 0 rows affected.


create index rlex_file_asst_id3 on rlex_file_asset (size_bytes)
Command completed successfully, 0 rows affected.


create index rlex_file_asst_id4 on rlex_file_asset (last_modified)
Command completed successfully, 0 rows affected.


alter table rlex_file_asset set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_text_file (
	text_file_id	varchar(40)	not null,
	text_content	long varchar	null
, primary key (text_file_id)
, foreign key (text_file_id) references rlex_file_asset (file_asset_id))
Command completed successfully, 0 rows affected.



alter table rlex_text_file set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_binary_file (
	binary_file_id	varchar(40)	not null,
	binary_content	long varbinary	null
, primary key (binary_file_id)
, foreign key (binary_file_id) references rlex_file_asset (file_asset_id))
Command completed successfully, 0 rows affected.



alter table rlex_binary_file set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_article_file (
	article_file_id	varchar(40)	not null,
	published_date	timestamp	null,
	keywords	varchar(80)	null
, primary key (article_file_id)
, foreign key (article_file_id) references rlex_file_asset (file_asset_id))
Command completed successfully, 0 rows affected.



alter table rlex_article_file set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_user (
	id	varchar(32)	not null,
	nam_col	varchar(32)	null,
	age_col	varchar(32)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table rlex_user set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_address (
	addr_id	varchar(32)	not null,
	user_id	varchar(32)	null,
	street	varchar(32)	null,
	city	varchar(32)	null
, primary key (addr_id)
, foreign key (user_id) references rlex_user (id))
Command completed successfully, 0 rows affected.



alter table rlex_address set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_contact (
	con_id	varchar(32)	not null,
	rank	integer	not null,
	user_id	varchar(32)	null,
	email	varchar(255)	null,
	url	varchar(255)	null
, primary key (con_id,rank)
, foreign key (user_id) references rlex_user (id))
Command completed successfully, 0 rows affected.



alter table rlex_contact set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_phone (
	phone_id	varchar(32)	not null,
	kind	varchar(64)	not null,
	user_id	varchar(32)	null,
	pnumber	varchar(64)	null
, primary key (phone_id,kind)
, foreign key (user_id) references rlex_user (id))
Command completed successfully, 0 rows affected.



alter table rlex_phone set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_job (
	id	varchar(32)	not null,
	jobtype	varchar(32)	null,
	title	varchar(32)	null
, primary key (id)
, foreign key (id) references rlex_user (id))
Command completed successfully, 0 rows affected.



alter table rlex_job set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_subjects (
	id	varchar(32)	not null,
	seq_num	integer	not null,
	subject	varchar(32)	null
, primary key (id,seq_num)
, foreign key (id) references rlex_user (id))
Command completed successfully, 0 rows affected.



alter table rlex_subjects set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_worst (
	id	varchar(32)	not null,
	seq_num	integer	not null,
	subject	varchar(32)	null
, primary key (id,seq_num)
, foreign key (id) references rlex_user (id))
Command completed successfully, 0 rows affected.



alter table rlex_worst set pessimistic
Command completed successfully, 0 rows affected.




create table rlex_credit_card (
	id	varchar(32)	not null,
	card_key	varchar(32)	not null,
	card_num	varchar(32)	null
, primary key (id,card_key)
, foreign key (id) references rlex_user (id))
Command completed successfully, 0 rows affected.



alter table rlex_credit_card set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// nucleus_security_ddl.sql





create table das_nucl_sec (
	func_name	wvarchar(254)	not null,
	policy	wvarchar(254)	not null
, primary key (func_name))
Command completed successfully, 0 rows affected.



alter table das_nucl_sec set pessimistic
Command completed successfully, 0 rows affected.




create table das_ns_acls (
	id	wvarchar(254)	not null,
	index_num	integer	not null,
	acl	wvarchar(254)	not null
, primary key (id,index_num))
Command completed successfully, 0 rows affected.



alter table das_ns_acls set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// media_ddl.sql




//-     media content repository tables.  

create table media_folder (
	folder_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	description	wvarchar(254)	null,
	name	wvarchar(254)	not null,
	path	wvarchar(254)	not null,
	parent_folder_id	varchar(40)	null
, primary key (folder_id)
, foreign key (parent_folder_id) references media_folder (folder_id))
Command completed successfully, 0 rows affected.



create index fldr_mfldrid_idx on media_folder (parent_folder_id)
Command completed successfully, 0 rows affected.


create index md_fldr_path_idx on media_folder (path)
Command completed successfully, 0 rows affected.


alter table media_folder set pessimistic
Command completed successfully, 0 rows affected.




create table media_base (
	media_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	description	wvarchar(254)	null,
	name	wvarchar(254)	not null,
	path	wvarchar(254)	not null,
	parent_folder_id	varchar(40)	not null,
	media_type	integer	null
, primary key (media_id)
, foreign key (parent_folder_id) references media_folder (folder_id))
Command completed successfully, 0 rows affected.



create index med_mfldrid_idx on media_base (parent_folder_id)
Command completed successfully, 0 rows affected.


create index media_path_idx on media_base (path)
Command completed successfully, 0 rows affected.


create index media_type_idx on media_base (media_type)
Command completed successfully, 0 rows affected.


alter table media_base set pessimistic
Command completed successfully, 0 rows affected.




create table media_ext (
	media_id	varchar(40)	not null,
	url	varchar(254)	not null
, primary key (media_id)
, foreign key (media_id) references media_base (media_id))
Command completed successfully, 0 rows affected.



alter table media_ext set pessimistic
Command completed successfully, 0 rows affected.




create table media_bin (
	media_id	varchar(40)	not null,
	length	integer	not null,
	last_modified	timestamp	not null,
	data	long varbinary	not null
, primary key (media_id)
, foreign key (media_id) references media_base (media_id))
Command completed successfully, 0 rows affected.



alter table media_bin set pessimistic
Command completed successfully, 0 rows affected.




create table media_txt (
	media_id	varchar(40)	not null,
	length	integer	not null,
	last_modified	timestamp	not null,
	data	long wvarchar	not null
, primary key (media_id)
, foreign key (media_id) references media_base (media_id))
Command completed successfully, 0 rows affected.



alter table media_txt set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// deployment_ddl.sql




//-     These tables are for the daf deployment system  

create table das_deployment (
	deployment_id	varchar(40)	not null,
	version	integer	not null,
	start_time	timestamp	null,
	end_time	timestamp	null,
	failure_time	timestamp	null,
	status	integer	null,
	prev_status	integer	null,
	status_detail	varchar(255)	null,
	current_phase	integer	null,
	rep_high_mark	integer	null,
	rep_marks_avail	integer	null,
	file_high_mark	integer	null,
	file_marks_avail	integer	null,
	thread_batch_size	integer	null,
	failure_count	integer	null,
	purge_deploy_data	tinyint	null
, primary key (deployment_id))
Command completed successfully, 0 rows affected.



create index das_dpl_start_idx on das_deployment (start_time)
Command completed successfully, 0 rows affected.


alter table das_deployment set optimistic
Command completed successfully, 0 rows affected.




create table das_depl_progress (
	deployment_id	varchar(40)	not null,
	version	integer	not null,
	work_completed	integer	null,
	total_work	integer	null)
Command completed successfully, 0 rows affected.



alter table das_depl_progress set optimistic
Command completed successfully, 0 rows affected.




create table das_thread_batch (
	thread_batch_id	varchar(40)	not null,
	version	integer	not null,
	deployment	varchar(40)	null,
	type	integer	null,
	owner	varchar(255)	null,
	thread_name	varchar(255)	null,
	lower_bound	integer	null,
	upper_bound	integer	null,
	last_update_time	timestamp	null
, primary key (thread_batch_id))
Command completed successfully, 0 rows affected.



create index das_tb_deployment on das_thread_batch (deployment)
Command completed successfully, 0 rows affected.


create index das_tb_owner on das_thread_batch (owner)
Command completed successfully, 0 rows affected.


create index das_tb_thread_nam on das_thread_batch (thread_name)
Command completed successfully, 0 rows affected.


alter table das_thread_batch set optimistic
Command completed successfully, 0 rows affected.




create table das_deploy_data (
	deploy_data_id	varchar(40)	not null,
	version	integer	not null,
	type	integer	null,
	source	varchar(255)	null,
	destination	varchar(255)	null,
	dest_server	varchar(255)	null,
	deployment	varchar(40)	null
, primary key (deploy_data_id)
, foreign key (deployment) references das_deployment (deployment_id))
Command completed successfully, 0 rows affected.



create index dd_deployment_idx on das_deploy_data (deployment)
Command completed successfully, 0 rows affected.


alter table das_deploy_data set optimistic
Command completed successfully, 0 rows affected.




create table das_deploy_mark (
	marker_id	varchar(40)	not null,
	version	integer	not null,
	type	integer	null,
	status	integer	null,
	index_number	integer	null,
	marker_action	integer	null,
	deployment_id	varchar(40)	null,
	deployment_data	varchar(40)	null
, primary key (marker_id))
Command completed successfully, 0 rows affected.



create index marker_index_idx on das_deploy_mark (index_number)
Command completed successfully, 0 rows affected.


alter table das_deploy_mark set optimistic
Command completed successfully, 0 rows affected.




create table das_rep_mark (
	rep_marker_id	varchar(40)	not null,
	item_desc_name	varchar(255)	null,
	item_id	varchar(255)	null
, primary key (rep_marker_id))
Command completed successfully, 0 rows affected.



alter table das_rep_mark set optimistic
Command completed successfully, 0 rows affected.




create table das_file_mark (
	file_marker_id	varchar(40)	not null,
	file_path	varchar(1000)	null
, primary key (file_marker_id))
Command completed successfully, 0 rows affected.



alter table das_file_mark set optimistic
Command completed successfully, 0 rows affected.




create table das_depl_depldat (
	deployment_id	varchar(40)	not null,
	sequence_num	integer	not null,
	deployment_data	varchar(40)	null
, primary key (deployment_id,sequence_num))
Command completed successfully, 0 rows affected.



alter table das_depl_depldat set optimistic
Command completed successfully, 0 rows affected.




create table das_depl_options (
	deployment_id	varchar(40)	not null,
	tag	varchar(255)	not null,
	optionValue	varchar(255)	null
, primary key (deployment_id,tag))
Command completed successfully, 0 rows affected.



alter table das_depl_options set optimistic
Command completed successfully, 0 rows affected.




create table das_depl_repmaps (
	deployment_id	varchar(40)	not null,
	source	varchar(255)	not null,
	destination	varchar(255)	null
, primary key (deployment_id,source))
Command completed successfully, 0 rows affected.



alter table das_depl_repmaps set optimistic
Command completed successfully, 0 rows affected.




create table das_depl_item_ref (
	item_ref_id	varchar(40)	not null,
	version	integer	not null,
	deployment_id	varchar(40)	null,
	repository	varchar(255)	null,
	item_desc_name	varchar(255)	null,
	item_id	varchar(255)	null,
	item_index	integer	null
, primary key (item_ref_id))
Command completed successfully, 0 rows affected.



create index das_dpl_itmx_idx on das_depl_item_ref (item_index)
Command completed successfully, 0 rows affected.


create index das_dpl_dplid_idx on das_depl_item_ref (deployment_id)
Command completed successfully, 0 rows affected.


alter table das_depl_item_ref set optimistic
Command completed successfully, 0 rows affected.




create table das_dd_markers (
	deploy_data_id	varchar(40)	not null,
	sequence_num	integer	not null,
	marker	varchar(40)	null
, primary key (deploy_data_id,sequence_num)
, foreign key (marker) references das_deploy_mark (marker_id))
Command completed successfully, 0 rows affected.



create index marker_idx on das_dd_markers (marker)
Command completed successfully, 0 rows affected.


alter table das_dd_markers set optimistic
Command completed successfully, 0 rows affected.




create table das_dep_fail_info (
	id	varchar(40)	not null,
	deployment_id	varchar(40)	not null,
	marker_id	varchar(40)	null,
	severity	varchar(40)	null,
	failure_message	varchar(255)	null,
	failure_time	timestamp	null,
	error_code	varchar(40)	null,
	cause	long varchar	null)
Command completed successfully, 0 rows affected.



alter table das_dep_fail_info set optimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.




SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.

// the source for this section is 
// user_ddl.sql




//- This file contains create table statements, which will configure your database for use with the new DPS schema.
//- Add the organization definition.  It's out of place, but since dps_user references it, it's got to be defined up here

create table dps_organization (
	org_id	varchar(40)	not null,
	name	wvarchar(254)	not null,
	description	wvarchar(254)	null,
	parent_org	varchar(40)	null
, primary key (org_id)
, foreign key (parent_org) references dps_organization (org_id))
Command completed successfully, 0 rows affected.



create index dps_orgparent_org on dps_organization (parent_org)
Command completed successfully, 0 rows affected.


alter table dps_organization set pessimistic
Command completed successfully, 0 rows affected.



//- Default Profile User Template
//- Basic user info.  note: the password field size must be at a minimum 35 characters       if DPS stores a hash of the password and not the actual value.

create table dps_user (
	id	varchar(40)	not null,
	login	wvarchar(40)	not null,
	auto_login	numeric(1,0)	null,
	password	varchar(35)	null,
	member	numeric(1,0)	null,
	first_name	wvarchar(40)	null,
	middle_name	wvarchar(40)	null,
	last_name	wvarchar(40)	null,
	user_type	integer	null,
	locale	integer	null,
	lastactivity_date	timestamp	null,
	lastpwdupdate	timestamp	null,
	generatedpwd	tinyint	null,
	registration_date	timestamp	null,
	email	wvarchar(255)	null,
	email_status	integer	null,
	receive_email	integer	null,
	last_emailed	timestamp	null,
	gender	integer	null,
	date_of_birth	timestamp	null,
	securityStatus	integer	null,
	description	wvarchar(254)	null
, primary key (id)
, unique (login)
, check (auto_login in (0,1))
, check (member in (0,1)))
Command completed successfully, 0 rows affected.



alter table dps_user set pessimistic
Command completed successfully, 0 rows affected.




create table dps_contact_info (
	id	varchar(40)	not null,
	user_id	varchar(40)	null,
	prefix	wvarchar(40)	null,
	first_name	wvarchar(40)	null,
	middle_name	wvarchar(40)	null,
	last_name	wvarchar(40)	null,
	suffix	wvarchar(40)	null,
	job_title	wvarchar(100)	null,
	company_name	wvarchar(40)	null,
	address1	wvarchar(50)	null,
	address2	wvarchar(50)	null,
	address3	wvarchar(50)	null,
	city	wvarchar(30)	null,
	state	wvarchar(20)	null,
	postal_code	wvarchar(10)	null,
	county	wvarchar(40)	null,
	country	wvarchar(40)	null,
	phone_number	wvarchar(15)	null,
	fax_number	wvarchar(15)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dps_contact_info set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_address (
	id	varchar(40)	not null,
	home_addr_id	varchar(40)	null,
	billing_addr_id	varchar(40)	null,
	shipping_addr_id	varchar(40)	null
, primary key (id)
, foreign key (id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dps_usr_adr_shp_id on dps_user_address (shipping_addr_id)
Command completed successfully, 0 rows affected.


create index dps_usr_blng_ad_id on dps_user_address (billing_addr_id)
Command completed successfully, 0 rows affected.


create index dps_usr_home_ad_id on dps_user_address (home_addr_id)
Command completed successfully, 0 rows affected.


alter table dps_user_address set pessimistic
Command completed successfully, 0 rows affected.




create table dps_other_addr (
	user_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	address_id	varchar(40)	not null
, primary key (user_id,tag)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



alter table dps_other_addr set pessimistic
Command completed successfully, 0 rows affected.




create table dps_mailing (
	id	varchar(40)	not null,
	name	wvarchar(255)	null,
	subject	wvarchar(80)	null,
	uniq_server_id	varchar(255)	null,
	from_address	wvarchar(255)	null,
	replyto	wvarchar(255)	null,
	template_URL	varchar(255)	null,
	alt_template_URL	varchar(255)	null,
	batch_exec_id	varchar(40)	null,
	cc	long varchar	null,
	bcc	long varchar	null,
	send_as_html	integer	null,
	send_as_text	integer	null,
	params	long varbinary	null,
	start_time	timestamp	null,
	end_time	timestamp	null,
	status	integer	null,
	num_profiles	integer	null,
	num_sent	integer	null,
	num_bounces	integer	null,
	num_soft_bounces	integer	null,
	num_errors	integer	null,
	num_skipped	integer	null,
	fill_from_templ	numeric(1,0)	null,
	is_batched	tinyint	null,
	ignore_fatigue	tinyint	null,
	batch_size	integer	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dps_mailing set pessimistic
Command completed successfully, 0 rows affected.




create table dps_mail_trackdata (
	mailing_id	varchar(40)	not null,
	map_key	varchar(254)	not null,
	map_value	varchar(254)	null
, primary key (mailing_id,map_key)
, foreign key (mailing_id) references dps_mailing (id))
Command completed successfully, 0 rows affected.



alter table dps_mail_trackdata set pessimistic
Command completed successfully, 0 rows affected.




create table dps_mail_batch (
	mailing_id	varchar(40)	not null,
	start_idx	integer	not null,
	uniq_server_id	varchar(254)	null,
	start_time	timestamp	null,
	end_time	timestamp	null,
	status	integer	null,
	num_profiles	integer	null,
	num_sent	integer	null,
	num_bounces	integer	null,
	num_errors	integer	null,
	num_skipped	integer	null,
	is_summarized	tinyint	null
, primary key (mailing_id,start_idx)
, foreign key (mailing_id) references dps_mailing (id))
Command completed successfully, 0 rows affected.



alter table dps_mail_batch set pessimistic
Command completed successfully, 0 rows affected.




create table dps_mail_server (
	uniq_server_id	varchar(254)	not null,
	last_updated	timestamp	null
, primary key (uniq_server_id))
Command completed successfully, 0 rows affected.



alter table dps_mail_server set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_mailing (
	mailing_id	varchar(40)	not null,
	user_id	varchar(40)	not null,
	idx	integer	not null
, primary key (mailing_id,user_id)
, foreign key (mailing_id) references dps_mailing (id)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dps_u_mail_uid on dps_user_mailing (user_id)
Command completed successfully, 0 rows affected.


alter table dps_user_mailing set pessimistic
Command completed successfully, 0 rows affected.




create table dps_email_address (
	mailing_id	varchar(40)	not null,
	email_address	varchar(255)	not null,
	idx	integer	not null
, primary key (mailing_id,idx)
, foreign key (mailing_id) references dps_mailing (id))
Command completed successfully, 0 rows affected.



alter table dps_email_address set pessimistic
Command completed successfully, 0 rows affected.



//- Organizations/roles

create table dps_role (
	role_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	name	wvarchar(254)	not null,
	description	wvarchar(254)	null
, primary key (role_id))
Command completed successfully, 0 rows affected.



alter table dps_role set pessimistic
Command completed successfully, 0 rows affected.



//- Extending the user profile to include references to the roles that are assigned to this user

create table dps_user_roles (
	user_id	varchar(40)	not null,
	atg_role	varchar(40)	not null
, primary key (user_id,atg_role)
, foreign key (atg_role) references dps_role (role_id)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dps_usr_roles_id on dps_user_roles (atg_role)
Command completed successfully, 0 rows affected.


alter table dps_user_roles set pessimistic
Command completed successfully, 0 rows affected.




create table dps_org_role (
	org_id	varchar(40)	not null,
	atg_role	varchar(40)	not null
, primary key (org_id,atg_role)
, foreign key (org_id) references dps_organization (org_id)
, foreign key (atg_role) references dps_role (role_id))
Command completed successfully, 0 rows affected.



create index dps_org_rolerole on dps_org_role (atg_role)
Command completed successfully, 0 rows affected.


alter table dps_org_role set pessimistic
Command completed successfully, 0 rows affected.




create table dps_role_rel_org (
	organization	varchar(40)	not null,
	sequence_num	integer	not null,
	role_id	varchar(40)	not null
, primary key (organization,sequence_num)
, foreign key (organization) references dps_organization (org_id)
, foreign key (role_id) references dps_role (role_id))
Command completed successfully, 0 rows affected.



create index dps_role_rel_org on dps_role_rel_org (role_id)
Command completed successfully, 0 rows affected.


alter table dps_role_rel_org set pessimistic
Command completed successfully, 0 rows affected.




create table dps_relativerole (
	role_id	varchar(40)	not null,
	dps_function	wvarchar(40)	not null,
	relative_to	varchar(40)	not null
, primary key (role_id)
, foreign key (relative_to) references dps_organization (org_id)
, foreign key (role_id) references dps_role (role_id))
Command completed successfully, 0 rows affected.



create index dps_relativerole on dps_relativerole (relative_to)
Command completed successfully, 0 rows affected.


alter table dps_relativerole set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_org (
	organization	varchar(40)	not null,
	user_id	varchar(40)	not null
, primary key (organization,user_id)
, foreign key (organization) references dps_organization (org_id)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dps_usr_orgusr_id on dps_user_org (user_id)
Command completed successfully, 0 rows affected.


alter table dps_user_org set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_org_anc (
	user_id	varchar(40)	not null,
	sequence_num	integer	not null,
	anc_org	varchar(40)	not null
, primary key (user_id,sequence_num)
, foreign key (anc_org) references dps_organization (org_id)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dps_usr_org_ancanc on dps_user_org_anc (anc_org)
Command completed successfully, 0 rows affected.


alter table dps_user_org_anc set pessimistic
Command completed successfully, 0 rows affected.




create table dps_org_chldorg (
	org_id	varchar(40)	not null,
	child_org_id	varchar(40)	not null
, primary key (org_id,child_org_id)
, foreign key (child_org_id) references dps_organization (org_id)
, foreign key (org_id) references dps_organization (org_id))
Command completed successfully, 0 rows affected.



create index dps_org_chldorg_id on dps_org_chldorg (child_org_id)
Command completed successfully, 0 rows affected.


alter table dps_org_chldorg set pessimistic
Command completed successfully, 0 rows affected.




create table dps_org_ancestors (
	org_id	varchar(40)	not null,
	sequence_num	integer	not null,
	anc_org	varchar(40)	not null
, primary key (org_id,sequence_num)
, foreign key (anc_org) references dps_organization (org_id)
, foreign key (org_id) references dps_organization (org_id))
Command completed successfully, 0 rows affected.



create index dps_org_ancanc_org on dps_org_ancestors (anc_org)
Command completed successfully, 0 rows affected.


alter table dps_org_ancestors set pessimistic
Command completed successfully, 0 rows affected.



//- Adding the folder information

create table dps_folder (
	folder_id	varchar(40)	not null,
	type	integer	not null,
	name	wvarchar(254)	not null,
	parent	varchar(40)	null,
	description	wvarchar(254)	null
, primary key (folder_id)
, foreign key (parent) references dps_folder (folder_id))
Command completed successfully, 0 rows affected.



create index dps_folderparent on dps_folder (parent)
Command completed successfully, 0 rows affected.


alter table dps_folder set pessimistic
Command completed successfully, 0 rows affected.




create table dps_child_folder (
	folder_id	varchar(40)	not null,
	child_folder_id	varchar(40)	not null
, primary key (folder_id,child_folder_id)
, foreign key (child_folder_id) references dps_folder (folder_id)
, foreign key (folder_id) references dps_folder (folder_id))
Command completed successfully, 0 rows affected.



create index dps_chld_fldr_fld on dps_child_folder (child_folder_id)
Command completed successfully, 0 rows affected.


alter table dps_child_folder set pessimistic
Command completed successfully, 0 rows affected.




create table dps_rolefold_chld (
	rolefold_id	varchar(40)	not null,
	role_id	varchar(40)	not null
, primary key (rolefold_id,role_id)
, foreign key (rolefold_id) references dps_folder (folder_id)
, foreign key (role_id) references dps_role (role_id))
Command completed successfully, 0 rows affected.



create index dps_rolfldchldrole on dps_rolefold_chld (role_id)
Command completed successfully, 0 rows affected.


alter table dps_rolefold_chld set pessimistic
Command completed successfully, 0 rows affected.



//- Adding the previous password information

create table dps_user_prevpwd (
	id	varchar(40)	not null,
	seq_num	integer	not null,
	prevpwd	varchar(35)	null
, primary key (id,seq_num)
, foreign key (id) references dps_user (id))
Command completed successfully, 0 rows affected.



alter table dps_user_prevpwd set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// logging_ddl.sql




//- This file contains create table statements needed to configure your database for use with the DPS logging/reporting subsystem.This script will create tables and indexes associated with the newlogging and reporting subsystem. To initialize these tables run thelogging_init.sql script.
//- Tables for storing logging data for reports

create table dps_event_type (
	id	integer	not null,
	name	varchar(32)	not null
, primary key (id)
, unique (name))
Command completed successfully, 0 rows affected.



alter table dps_event_type set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_event (
	id	numeric(19,0)	not null,
	timestamp	timestamp	not null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	eventtype	integer	not null,
	profileid	varchar(25)	null,
	member	numeric(1,0)	not null
, primary key (id)
, foreign key (eventtype) references dps_event_type (id)
, check (member in (0,1)))
Command completed successfully, 0 rows affected.



create index dps_user_event_ix on dps_user_event (eventtype)
Command completed successfully, 0 rows affected.


create index dps_ue_ts on dps_user_event (timestamp)
Command completed successfully, 0 rows affected.


alter table dps_user_event set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_event_sum (
	eventtype	integer	not null,
	summarycount	integer	not null,
	fromtime	timestamp	not null,
	totime	timestamp	not null
, foreign key (eventtype) references dps_event_type (id))
Command completed successfully, 0 rows affected.



create index dps_user_ev_sum_ix on dps_user_event_sum (eventtype)
Command completed successfully, 0 rows affected.


create index dps_ues_ft on dps_user_event_sum (fromtime,totime,eventtype)
Command completed successfully, 0 rows affected.


alter table dps_user_event_sum set pessimistic
Command completed successfully, 0 rows affected.




create table dps_request (
	id	numeric(19,0)	not null,
	timestamp	timestamp	not null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	name	varchar(255)	not null,
	member	numeric(1,0)	not null
, primary key (id)
, check (member in (0,1)))
Command completed successfully, 0 rows affected.



create index dps_r_ts on dps_request (timestamp)
Command completed successfully, 0 rows affected.


alter table dps_request set pessimistic
Command completed successfully, 0 rows affected.




create table dps_reqname_sum (
	name	varchar(255)	not null,
	member	numeric(1,0)	not null,
	summarycount	integer	not null,
	fromtime	timestamp	not null,
	totime	timestamp	not null
, check (member in (0,1)))
Command completed successfully, 0 rows affected.



create index dps_rns_ft on dps_reqname_sum (fromtime,totime)
Command completed successfully, 0 rows affected.


alter table dps_reqname_sum set pessimistic
Command completed successfully, 0 rows affected.




create table dps_session_sum (
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	member	numeric(1,0)	not null,
	summarycount	integer	not null,
	fromtime	timestamp	not null,
	totime	timestamp	not null
, check (member in (0,1)))
Command completed successfully, 0 rows affected.



create index dps_rss_ft on dps_session_sum (fromtime,totime,sessionid)
Command completed successfully, 0 rows affected.


alter table dps_session_sum set pessimistic
Command completed successfully, 0 rows affected.




create table dps_con_req (
	id	numeric(19,0)	not null,
	timestamp	timestamp	not null,
	requestid	numeric(19,0)	null,
	contentid	varchar(255)	not null
, primary key (id))
Command completed successfully, 0 rows affected.



create index dps_cr_ts on dps_con_req (timestamp)
Command completed successfully, 0 rows affected.


alter table dps_con_req set pessimistic
Command completed successfully, 0 rows affected.




create table dps_con_req_sum (
	contentid	varchar(255)	not null,
	member	numeric(1,0)	not null,
	summarycount	integer	not null,
	fromtime	timestamp	not null,
	totime	timestamp	not null
, check (member in (0,1)))
Command completed successfully, 0 rows affected.



create index dps_crs_ft on dps_con_req_sum (fromtime,totime)
Command completed successfully, 0 rows affected.


alter table dps_con_req_sum set pessimistic
Command completed successfully, 0 rows affected.




create table dps_pgrp_req_sum (
	groupname	wvarchar(64)	not null,
	contentname	wvarchar(255)	not null,
	summarycount	integer	not null,
	fromtime	timestamp	not null,
	totime	timestamp	not null)
Command completed successfully, 0 rows affected.



create index dps_prs_ft on dps_pgrp_req_sum (fromtime,totime)
Command completed successfully, 0 rows affected.


alter table dps_pgrp_req_sum set pessimistic
Command completed successfully, 0 rows affected.




create table dps_pgrp_con_sum (
	groupname	wvarchar(64)	not null,
	contentname	wvarchar(64)	not null,
	summarycount	integer	not null,
	fromtime	timestamp	not null,
	totime	timestamp	not null)
Command completed successfully, 0 rows affected.



create index dps_pcs_ft on dps_pgrp_con_sum (fromtime,totime)
Command completed successfully, 0 rows affected.


alter table dps_pgrp_con_sum set pessimistic
Command completed successfully, 0 rows affected.




create table dps_log_id (
	tablename	varchar(30)	not null,
	nextid	numeric(19,0)	not null
, primary key (tablename))
Command completed successfully, 0 rows affected.



alter table dps_log_id set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// logging_init.sql




//- This file contains SQL statements which will initialize theDPS logging/reporting tables.
//- Set names of the default user event types, and initialize the log entry id counters

	INSERT INTO dps_event_type (id, name) VALUES (0, 'newsession')
Command completed successfully, 1 rows affected.


	INSERT INTO dps_event_type (id, name) VALUES (1, 'sessionexpiration')
Command completed successfully, 1 rows affected.


	INSERT INTO dps_event_type (id, name) VALUES (2, 'login')
Command completed successfully, 1 rows affected.


	INSERT INTO dps_event_type (id, name) VALUES (3, 'registration')
Command completed successfully, 1 rows affected.


	INSERT INTO dps_event_type (id, name) VALUES (4, 'logout')
Command completed successfully, 1 rows affected.


	INSERT INTO dps_log_id (tablename, nextid)
	VALUES ('dps_user_event', 0)
Command completed successfully, 1 rows affected.



	INSERT INTO dps_log_id (tablename, nextid)
	VALUES ('dps_request', 0)
Command completed successfully, 1 rows affected.


	INSERT INTO dps_log_id (tablename, nextid)
	VALUES ('dps_con_req', 0)
Command completed successfully, 1 rows affected.


        
commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// personalization_ddl.sql




//- This file contains create table statements needed to configure your database for personzalization assets.This script will create tables and indexes associated with the user segment list manager.

create table dps_seg_list (
	segment_list_id	varchar(40)	not null,
	display_name	varchar(256)	null,
	description	varchar(1024)	null,
	folder_id	varchar(40)	null
, primary key (segment_list_id))
Command completed successfully, 0 rows affected.



alter table dps_seg_list set pessimistic
Command completed successfully, 0 rows affected.




create table dps_seg_list_name (
	segment_list_id	varchar(40)	not null,
	seq	integer	not null,
	group_name	varchar(256)	not null
, primary key (segment_list_id,seq)
, foreign key (segment_list_id) references dps_seg_list (segment_list_id))
Command completed successfully, 0 rows affected.



alter table dps_seg_list_name set pessimistic
Command completed successfully, 0 rows affected.




create table dps_seg_list_folder (
	folder_id	varchar(40)	not null,
	display_name	varchar(256)	null,
	description	varchar(1024)	null,
	parent_folder_id	varchar(40)	null
, primary key (folder_id)
, foreign key (parent_folder_id) references dps_seg_list_folder (folder_id))
Command completed successfully, 0 rows affected.



create index dps_sgmlstfldr1_x on dps_seg_list_folder (parent_folder_id)
Command completed successfully, 0 rows affected.


alter table dps_seg_list_folder set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.




SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.

// the source for this section is 
// das_mappers.sql





create table dss_das_event (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null)
Command completed successfully, 0 rows affected.



alter table dss_das_event set pessimistic
Command completed successfully, 0 rows affected.




create table dss_das_form (
	id	varchar(32)	not null,
	clocktime	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	formname	varchar(254)	null)
Command completed successfully, 0 rows affected.



alter table dss_das_form set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// dps_mappers.sql





create table dss_dps_event (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	profileid	varchar(25)	null,
	scenarioPathInfo	varchar(254)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_event set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_page_visit (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	path	varchar(255)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_page_visit set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_view_item (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	repositoryname	wvarchar(255)	null,
	folder	varchar(255)	null,
	itemtype	varchar(255)	null,
	repositoryid	varchar(255)	null,
	itemdescriptor	varchar(255)	null,
	page	varchar(255)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_view_item set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_click (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	destinationpath	varchar(255)	null,
	sourcenames	varchar(255)	null,
	sourcepath	varchar(255)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_click set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_referrer (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	referrerpath	varchar(255)	null,
	referrersite	varchar(255)	null,
	referrerpage	varchar(255)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_referrer set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_inbound (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	messagesubject	varchar(255)	null,
	originalsubject	varchar(255)	null,
	messagefrom	varchar(64)	null,
	messageto	varchar(255)	null,
	messagecc	varchar(255)	null,
	messagereplyto	varchar(64)	null,
	receiveddate	numeric(19,0)	null,
	bounced	varchar(6)	null,
	bounceemailaddr	varchar(255)	null,
	bouncereplycode	varchar(10)	null,
	bounceerrormess	varchar(255)	null,
	bouncestatuscode	varchar(10)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_inbound set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_admin_reg (
	id	varchar(32)	not null,
	clocktime	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	adminprofileid	varchar(25)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_admin_reg set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_property (
	id	varchar(32)	not null,
	clocktime	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	propertypath	varchar(254)	null,
	oldvalue	varchar(254)	null,
	newvalue	varchar(254)	null,
	changesign	varchar(16)	null,
	changeamount	numeric(19,7)	null,
	changepercentage	numeric(19,7)	null,
	elementsadded	varchar(254)	null,
	elementsremoved	varchar(254)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_property set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_admin_prop (
	id	varchar(32)	not null,
	clocktime	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	propertypath	varchar(254)	null,
	oldvalue	varchar(254)	null,
	newvalue	varchar(254)	null,
	changesign	varchar(16)	null,
	changeamount	numeric(19,7)	null,
	changepercentage	numeric(19,7)	null,
	elementsadded	varchar(254)	null,
	elementsremoved	varchar(254)	null,
	adminprofileid	varchar(25)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_admin_prop set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_update (
	id	varchar(32)	not null,
	clocktime	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	changedproperties	long varchar	null,
	oldvalues	long varchar	null,
	newvalues	long varchar	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_update set pessimistic
Command completed successfully, 0 rows affected.




create table dss_dps_admin_up (
	id	varchar(32)	not null,
	clocktime	timestamp	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	changedproperties	long varchar	null,
	oldvalues	long varchar	null,
	newvalues	long varchar	null,
	adminprofileid	varchar(25)	null,
	profileid	varchar(25)	null)
Command completed successfully, 0 rows affected.



alter table dss_dps_admin_up set pessimistic
Command completed successfully, 0 rows affected.




create table dps_scenario_value (
	id	varchar(40)	not null,
	tag	varchar(42)	not null,
	scenario_value	varchar(100)	null
, primary key (id,tag)
, foreign key (id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dps_scenval_id on dps_scenario_value (id)
Command completed successfully, 0 rows affected.


alter table dps_scenario_value set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// dss_mappers.sql





create table dss_audit_trail (
	id	varchar(32)	not null,
	timestamp	timestamp	null,
	label	wvarchar(255)	null,
	profileid	varchar(25)	null,
	segmentName	wvarchar(254)	null,
	processName	wvarchar(254)	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null)
Command completed successfully, 0 rows affected.



alter table dss_audit_trail set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// scenario_ddl.sql





create table dss_coll_scenario (
	id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	modification_time	numeric(19,0)	null,
	segment_name	wvarchar(255)	null,
	creator_id	varchar(25)	null,
	state	varchar(16)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_coll_scenario set pessimistic
Command completed successfully, 0 rows affected.



//- user_id references the user table but because it is a backwards referencewe cannot have a REFERENCES(dps_user) here.

create table dss_ind_scenario (
	id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	modification_time	numeric(19,0)	null,
	segment_name	wvarchar(255)	null,
	creator_id	varchar(25)	null,
	state	varchar(16)	null,
	user_id	varchar(25)	not null
, primary key (id))
Command completed successfully, 0 rows affected.



create index dss_indscenario1_x on dss_ind_scenario (modification_time)
Command completed successfully, 0 rows affected.


alter table dss_ind_scenario set pessimistic
Command completed successfully, 0 rows affected.




create table dss_scenario_strs (
	id	varchar(25)	not null,
	tag	wvarchar(25)	not null,
	context_str	varchar(255)	null
, primary key (id,tag)
, foreign key (id) references dss_ind_scenario (id))
Command completed successfully, 0 rows affected.



create index dss_scn_st_idx on dss_scenario_strs (id)
Command completed successfully, 0 rows affected.


alter table dss_scenario_strs set pessimistic
Command completed successfully, 0 rows affected.




create table dss_scenario_bools (
	id	varchar(25)	not null,
	tag	wvarchar(25)	not null,
	context_bool	numeric(1,0)	null
, primary key (id,tag)
, foreign key (id) references dss_ind_scenario (id))
Command completed successfully, 0 rows affected.



create index dss_scn_bo_idx on dss_scenario_bools (id)
Command completed successfully, 0 rows affected.


alter table dss_scenario_bools set pessimistic
Command completed successfully, 0 rows affected.




create table dss_scenario_longs (
	id	varchar(25)	not null,
	tag	wvarchar(25)	not null,
	context_long	numeric(19,0)	null
, primary key (id,tag)
, foreign key (id) references dss_ind_scenario (id))
Command completed successfully, 0 rows affected.



create index dss_scn_lg_idx on dss_scenario_longs (id)
Command completed successfully, 0 rows affected.


alter table dss_scenario_longs set pessimistic
Command completed successfully, 0 rows affected.




create table dss_scenario_dbls (
	id	varchar(25)	not null,
	tag	wvarchar(25)	not null,
	context_dbl	double precision	null
, primary key (id,tag)
, foreign key (id) references dss_ind_scenario (id))
Command completed successfully, 0 rows affected.



create index dss_scn_db_idx on dss_scenario_dbls (id)
Command completed successfully, 0 rows affected.


alter table dss_scenario_dbls set pessimistic
Command completed successfully, 0 rows affected.




create table dss_scenario_dates (
	id	varchar(25)	not null,
	tag	wvarchar(25)	not null,
	context_date	timestamp	null
, primary key (id,tag)
, foreign key (id) references dss_ind_scenario (id))
Command completed successfully, 0 rows affected.



create index dss_scn_dt_idx on dss_scenario_dates (id)
Command completed successfully, 0 rows affected.


alter table dss_scenario_dates set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_scenario (
	id	varchar(40)	not null,
	ind_scenario_id	varchar(25)	not null
, primary key (ind_scenario_id)
, foreign key (id) references dps_user (id)
, foreign key (ind_scenario_id) references dss_ind_scenario (id))
Command completed successfully, 0 rows affected.



create index dps_uscn_u_idx on dps_user_scenario (id)
Command completed successfully, 0 rows affected.


alter table dps_user_scenario set pessimistic
Command completed successfully, 0 rows affected.




create table dss_scenario_info (
	id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	scenario_status	integer	null,
	modification_time	numeric(19,0)	null,
	creation_time	numeric(19,0)	null,
	author	varchar(25)	null,
	last_modified_by	varchar(25)	null,
	sdl	long varbinary	null,
	psm_version	integer	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_scenario_info set pessimistic
Command completed successfully, 0 rows affected.




create table dss_scen_mig_info (
	id	varchar(25)	not null,
	scenario_info_id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	modification_time	numeric(19,0)	null,
	psm_version	integer	null,
	sdl	long varbinary	null,
	migration_status	integer	null
, primary key (id)
, foreign key (scenario_info_id) references dss_scenario_info (id))
Command completed successfully, 0 rows affected.



create index dss_scenmiginfo_id on dss_scen_mig_info (scenario_info_id)
Command completed successfully, 0 rows affected.


alter table dss_scen_mig_info set pessimistic
Command completed successfully, 0 rows affected.




create table dss_mig_info_seg (
	id	varchar(25)	not null,
	idx	integer	not null,
	segment_name	varchar(255)	null
, primary key (id,idx)
, foreign key (id) references dss_scen_mig_info (id))
Command completed successfully, 0 rows affected.



alter table dss_mig_info_seg set pessimistic
Command completed successfully, 0 rows affected.




create table dss_template_info (
	id	varchar(25)	not null,
	template_name	wvarchar(255)	null,
	modification_time	numeric(19,0)	null,
	creation_time	numeric(19,0)	null,
	author	varchar(25)	null,
	last_modified_by	varchar(25)	null,
	sdl	long varbinary	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_template_info set pessimistic
Command completed successfully, 0 rows affected.




create table dss_coll_trans (
	id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	modification_time	numeric(19,0)	null,
	server_id	varchar(40)	null,
	message_bean	long varbinary	null,
	event_type	varchar(255)	null,
	segment_name	wvarchar(255)	null,
	state	varchar(16)	null,
	coll_scenario_id	varchar(25)	null,
	step	integer	null,
	current_count	integer	null,
	last_query_id	varchar(25)	null
, primary key (id)
, foreign key (coll_scenario_id) references dss_coll_scenario (id))
Command completed successfully, 0 rows affected.



create index dss_ctrcid_idx on dss_coll_trans (coll_scenario_id)
Command completed successfully, 0 rows affected.


alter table dss_coll_trans set pessimistic
Command completed successfully, 0 rows affected.




create table dss_ind_trans (
	id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	modification_time	numeric(19,0)	null,
	server_id	varchar(40)	null,
	message_bean	long varbinary	null,
	event_type	varchar(255)	null,
	segment_name	wvarchar(255)	null,
	state	varchar(16)	null,
	last_query_id	varchar(25)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_ind_trans set pessimistic
Command completed successfully, 0 rows affected.




create table dss_deletion (
	id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	modification_time	numeric(19,0)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_deletion set pessimistic
Command completed successfully, 0 rows affected.




create table dss_server_id (
	server_id	varchar(40)	not null,
	server_type	integer	not null
, primary key (server_id))
Command completed successfully, 0 rows affected.



alter table dss_server_id set pessimistic
Command completed successfully, 0 rows affected.




create table dss_del_seg_name (
	id	varchar(25)	not null,
	idx	integer	not null,
	segment_name	varchar(255)	null
, primary key (id,idx))
Command completed successfully, 0 rows affected.



alter table dss_del_seg_name set pessimistic
Command completed successfully, 0 rows affected.



//- migration_info_id references the migration info table, but we don't have aREFERENCES dss_scen_mig_info(id) here, because we want to be ableto delete the migration info without deleting this row

create table dss_migration (
	id	varchar(25)	not null,
	scenario_name	wvarchar(255)	null,
	old_mod_time	numeric(19,0)	null,
	new_mod_time	numeric(19,0)	null,
	migration_info_id	varchar(25)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_migration set pessimistic
Command completed successfully, 0 rows affected.




create table dss_mig_seg_name (
	id	varchar(25)	not null,
	idx	integer	not null,
	segment_name	varchar(255)	null
, primary key (id,idx)
, foreign key (id) references dss_migration (id))
Command completed successfully, 0 rows affected.



alter table dss_mig_seg_name set pessimistic
Command completed successfully, 0 rows affected.




create table dss_xref (
	id	varchar(25)	not null,
	scenario_name	varchar(255)	null,
	reference_type	varchar(30)	null,
	reference_target	varchar(255)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_xref set pessimistic
Command completed successfully, 0 rows affected.



//- user_id references the user table but because it is a backwards referencewe cannot have a REFERENCES(dps_user) here.

create table dss_profile_slot (
	id	varchar(25)	not null,
	slot_name	varchar(255)	null,
	item_offset	numeric(19,0)	null,
	user_id	varchar(25)	not null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dss_profile_slot set pessimistic
Command completed successfully, 0 rows affected.




create table dps_user_slot (
	id	varchar(40)	not null,
	profile_slot_id	varchar(25)	not null
, primary key (id,profile_slot_id)
, foreign key (id) references dps_user (id)
, foreign key (profile_slot_id) references dss_profile_slot (id))
Command completed successfully, 0 rows affected.



create index dps_usr_sltprfl_id on dps_user_slot (profile_slot_id)
Command completed successfully, 0 rows affected.


alter table dps_user_slot set pessimistic
Command completed successfully, 0 rows affected.




create table dss_slot_items (
	slot_id	varchar(25)	not null,
	item_id	varchar(255)	null,
	idx	integer	not null
, primary key (slot_id,idx)
, foreign key (slot_id) references dss_profile_slot (id))
Command completed successfully, 0 rows affected.



alter table dss_slot_items set pessimistic
Command completed successfully, 0 rows affected.




create table dss_slot_priority (
	slot_id	varchar(25)	not null,
	idx	integer	not null,
	priority	numeric(19,0)	not null
, primary key (slot_id,idx)
, foreign key (slot_id) references dss_profile_slot (id))
Command completed successfully, 0 rows affected.



alter table dss_slot_priority set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// markers_ddl.sql





create table dps_markers (
	marker_id	varchar(40)	not null,
	marker_key	varchar(100)	not null,
	marker_value	varchar(100)	null,
	marker_data	varchar(100)	null,
	creation_date	timestamp	null,
	version	integer	not null,
	marker_type	integer	null
, primary key (marker_id))
Command completed successfully, 0 rows affected.



alter table dps_markers set pessimistic
Command completed successfully, 0 rows affected.




create table dps_usr_markers (
	profile_id	varchar(40)	not null,
	marker_id	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (profile_id,sequence_num)
, foreign key (profile_id) references dps_user (id)
, foreign key (marker_id) references dps_markers (marker_id))
Command completed successfully, 0 rows affected.



create index dpsusrmarkers1_ix on dps_usr_markers (marker_id)
Command completed successfully, 0 rows affected.


alter table dps_usr_markers set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// business_process_rpt_ddl.sql





create table drpt_stage_reached (
	id	varchar(40)	not null,
	owner_id	varchar(40)	not null,
	process_start_time	timestamp	not null,
	event_time	timestamp	not null,
	bp_name	varchar(255)	not null,
	bp_stage	varchar(255)	null,
	is_transient	numeric(1,0)	not null,
	bp_stage_sequence	integer	not null
, check (is_transient in (0,1)))
Command completed successfully, 0 rows affected.



alter table drpt_stage_reached set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// profile_bp_markers_ddl.sql





create table dss_user_bpmarkers (
	marker_id	varchar(40)	not null,
	profile_id	varchar(40)	not null,
	marker_key	varchar(100)	not null,
	marker_value	varchar(100)	null,
	marker_data	varchar(100)	null,
	creation_date	timestamp	null,
	version	integer	not null,
	marker_type	integer	null
, primary key (marker_id,profile_id))
Command completed successfully, 0 rows affected.



alter table dss_user_bpmarkers set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.




SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.

// the source for this section is 
// commerce_user.sql





create table dps_credit_card (
	id	varchar(40)	not null,
	credit_card_number	varchar(40)	null,
	credit_card_type	varchar(40)	null,
	expiration_month	varchar(20)	null,
	exp_day_of_month	varchar(20)	null,
	expiration_year	varchar(20)	null,
	billing_addr	varchar(40)	null
, primary key (id))
Command completed successfully, 0 rows affected.



create index dps_crcdba_idx on dps_credit_card (billing_addr)
Command completed successfully, 0 rows affected.


alter table dps_credit_card set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_user (
	user_id	varchar(40)	not null,
	allow_partial_ship	tinyint	null,
	default_creditcard	varchar(40)	null,
	daytime_phone_num	varchar(20)	null,
	express_checkout	tinyint	null,
	default_carrier	wvarchar(256)	null
, primary key (user_id)
, foreign key (default_creditcard) references dps_credit_card (id)
, check (allow_partial_ship in (0,1))
, check (express_checkout in (0,1)))
Command completed successfully, 0 rows affected.



create index dcs_usrdcc_idx on dcs_user (default_creditcard)
Command completed successfully, 0 rows affected.


alter table dcs_user set pessimistic
Command completed successfully, 0 rows affected.




create table dps_usr_creditcard (
	user_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	credit_card_id	varchar(40)	not null
, primary key (user_id,tag)
, foreign key (credit_card_id) references dps_credit_card (id)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dps_ucccid_idx on dps_usr_creditcard (credit_card_id)
Command completed successfully, 0 rows affected.


create index dps_uccuid_idx on dps_usr_creditcard (user_id)
Command completed successfully, 0 rows affected.


alter table dps_usr_creditcard set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// product_catalog_ddl.sql





create table dcs_folder (
	folder_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	description	wvarchar(254)	null,
	name	wvarchar(254)	not null,
	path	wvarchar(254)	not null,
	parent_folder_id	varchar(40)	null
, primary key (folder_id)
, foreign key (parent_folder_id) references dcs_folder (folder_id))
Command completed successfully, 0 rows affected.



create index fldr_pfldrid_idx on dcs_folder (parent_folder_id)
Command completed successfully, 0 rows affected.


create index fldr_end_dte_idx on dcs_folder (end_date)
Command completed successfully, 0 rows affected.


create index fldr_path_idx on dcs_folder (path)
Command completed successfully, 0 rows affected.


create index fldr_strt_dte_idx on dcs_folder (start_date)
Command completed successfully, 0 rows affected.


alter table dcs_folder set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_media (
	media_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	description	wvarchar(254)	null,
	name	wvarchar(254)	not null,
	path	wvarchar(254)	not null,
	parent_folder_id	varchar(40)	not null,
	media_type	integer	null
, primary key (media_id)
, foreign key (parent_folder_id) references dcs_folder (folder_id))
Command completed successfully, 0 rows affected.



create index med_pfldrid_idx on dcs_media (parent_folder_id)
Command completed successfully, 0 rows affected.


create index med_end_dte_idx on dcs_media (end_date)
Command completed successfully, 0 rows affected.


create index med_path_idx on dcs_media (path)
Command completed successfully, 0 rows affected.


create index med_strt_dte_idx on dcs_media (start_date)
Command completed successfully, 0 rows affected.


create index med_type_idx on dcs_media (media_type)
Command completed successfully, 0 rows affected.


alter table dcs_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_media_ext (
	media_id	varchar(40)	not null,
	url	varchar(254)	not null
, primary key (media_id)
, foreign key (media_id) references dcs_media (media_id))
Command completed successfully, 0 rows affected.



alter table dcs_media_ext set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_media_bin (
	media_id	varchar(40)	not null,
	length	integer	not null,
	last_modified	timestamp	not null,
	data	long varbinary	not null
, primary key (media_id)
, foreign key (media_id) references dcs_media (media_id))
Command completed successfully, 0 rows affected.



alter table dcs_media_bin set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_media_txt (
	media_id	varchar(40)	not null,
	length	integer	not null,
	last_modified	timestamp	not null,
	data	long wvarchar	not null
, primary key (media_id)
, foreign key (media_id) references dcs_media (media_id))
Command completed successfully, 0 rows affected.



alter table dcs_media_txt set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_category (
	category_id	varchar(40)	not null,
	version	integer	not null,
	catalog_id	varchar(40)	null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	display_name	wvarchar(254)	null,
	description	wvarchar(254)	null,
	long_description	long wvarchar	null,
	parent_cat_id	varchar(40)	null,
	category_type	integer	null,
	root_category	numeric(1,0)	null
, primary key (category_id)
, check (root_category in (0,1)))
Command completed successfully, 0 rows affected.



create index cat_end_dte_idx on dcs_category (end_date)
Command completed successfully, 0 rows affected.


create index cat_pcatid_idx on dcs_category (parent_cat_id)
Command completed successfully, 0 rows affected.


create index cat_strt_dte_idx on dcs_category (start_date)
Command completed successfully, 0 rows affected.


create index cat_type_idx on dcs_category (category_type)
Command completed successfully, 0 rows affected.


alter table dcs_category set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_category_acl (
	category_id	varchar(40)	not null,
	item_acl	long varchar	null
, primary key (category_id))
Command completed successfully, 0 rows affected.



alter table dcs_category_acl set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_product (
	product_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	display_name	wvarchar(254)	null,
	description	wvarchar(254)	null,
	long_description	long wvarchar	null,
	parent_cat_id	varchar(40)	null,
	product_type	integer	null,
	admin_display	varchar(254)	null
, primary key (product_id))
Command completed successfully, 0 rows affected.



create index prd_end_dte_idx on dcs_product (end_date)
Command completed successfully, 0 rows affected.


create index prd_pcatid_idx on dcs_product (parent_cat_id)
Command completed successfully, 0 rows affected.


create index prd_strt_dte_idx on dcs_product (start_date)
Command completed successfully, 0 rows affected.


create index prd_type_idx on dcs_product (product_type)
Command completed successfully, 0 rows affected.


alter table dcs_product set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_product_acl (
	product_id	varchar(40)	not null,
	item_acl	long varchar	null
, primary key (product_id))
Command completed successfully, 0 rows affected.



alter table dcs_product_acl set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku (
	sku_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	display_name	wvarchar(254)	null,
	description	wvarchar(254)	null,
	sku_type	integer	null,
	wholesale_price	double precision	null,
	list_price	double precision	null,
	sale_price	double precision	null,
	on_sale	numeric(1,0)	null,
	tax_status	integer	null,
	fulfiller	integer	null,
	item_acl	long varchar	null
, primary key (sku_id)
, check (on_sale in (0,1)))
Command completed successfully, 0 rows affected.



create index sku_end_dte_idx on dcs_sku (end_date)
Command completed successfully, 0 rows affected.


create index sku_lstprice_idx on dcs_sku (list_price)
Command completed successfully, 0 rows affected.


create index sku_sleprice_idx on dcs_sku (sale_price)
Command completed successfully, 0 rows affected.


create index sku_strt_dte_idx on dcs_sku (start_date)
Command completed successfully, 0 rows affected.


create index sku_type_idx on dcs_sku (sku_type)
Command completed successfully, 0 rows affected.


alter table dcs_sku set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_groups (
	category_id	varchar(40)	not null,
	child_prd_group	varchar(254)	null,
	child_cat_group	varchar(254)	null,
	related_cat_group	varchar(254)	null
, primary key (category_id)
, foreign key (category_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



alter table dcs_cat_groups set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_chldprd (
	category_id	varchar(40)	not null,
	sequence_num	integer	not null,
	child_prd_id	varchar(40)	not null
, primary key (category_id,sequence_num)
, foreign key (category_id) references dcs_category (category_id)
, foreign key (child_prd_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index ct_chldprd_cpi_idx on dcs_cat_chldprd (child_prd_id)
Command completed successfully, 0 rows affected.


create index ct_chldprd_cid_idx on dcs_cat_chldprd (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_chldprd set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_chldcat (
	category_id	varchar(40)	not null,
	sequence_num	integer	not null,
	child_cat_id	varchar(40)	not null
, primary key (category_id,sequence_num)
, foreign key (child_cat_id) references dcs_category (category_id)
, foreign key (category_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



create index ct_chldcat_cci_idx on dcs_cat_chldcat (child_cat_id)
Command completed successfully, 0 rows affected.


create index ct_chldcat_cid_idx on dcs_cat_chldcat (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_chldcat set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_ancestors (
	category_id	varchar(40)	not null,
	anc_cat_id	varchar(40)	not null
, primary key (category_id,anc_cat_id))
Command completed successfully, 0 rows affected.



create index dcs_ct_anc_cat_id on dcs_cat_ancestors (anc_cat_id)
Command completed successfully, 0 rows affected.


create index dcs_ct_cat_id on dcs_cat_ancestors (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_ancestors set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_rltdcat (
	category_id	varchar(40)	not null,
	sequence_num	integer	not null,
	related_cat_id	varchar(40)	not null
, primary key (category_id,sequence_num)
, foreign key (category_id) references dcs_category (category_id)
, foreign key (related_cat_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



create index ct_rltdcat_rci_idx on dcs_cat_rltdcat (related_cat_id)
Command completed successfully, 0 rows affected.


create index ct_rltdcat_cid_idx on dcs_cat_rltdcat (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_rltdcat set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_keywrds (
	category_id	varchar(40)	not null,
	sequence_num	integer	not null,
	keyword	wvarchar(254)	not null
, primary key (category_id,sequence_num)
, foreign key (category_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



create index cat_keywrds_idx on dcs_cat_keywrds (keyword)
Command completed successfully, 0 rows affected.


create index ct_keywrds_cid_idx on dcs_cat_keywrds (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_keywrds set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_media (
	category_id	varchar(40)	not null,
	template_id	varchar(40)	null,
	thumbnail_image_id	varchar(40)	null,
	small_image_id	varchar(40)	null,
	large_image_id	varchar(40)	null
, primary key (category_id)
, foreign key (category_id) references dcs_category (category_id)
, foreign key (large_image_id) references dcs_media (media_id)
, foreign key (small_image_id) references dcs_media (media_id)
, foreign key (template_id) references dcs_media (media_id)
, foreign key (thumbnail_image_id) references dcs_media (media_id))
Command completed successfully, 0 rows affected.



create index ct_mdia_lrimid_idx on dcs_cat_media (large_image_id)
Command completed successfully, 0 rows affected.


create index ct_mdia_smimid_idx on dcs_cat_media (small_image_id)
Command completed successfully, 0 rows affected.


create index ct_mdia_tmplid_idx on dcs_cat_media (template_id)
Command completed successfully, 0 rows affected.


create index ct_mdia_thimid_idx on dcs_cat_media (thumbnail_image_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_aux_media (
	category_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	media_id	varchar(40)	not null
, primary key (category_id,tag)
, foreign key (category_id) references dcs_category (category_id)
, foreign key (media_id) references dcs_media (media_id))
Command completed successfully, 0 rows affected.



create index ct_aux_mdia_mi_idx on dcs_cat_aux_media (media_id)
Command completed successfully, 0 rows affected.


create index ct_aux_mdia_ci_idx on dcs_cat_aux_media (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_aux_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_keywrds (
	product_id	varchar(40)	not null,
	sequence_num	integer	not null,
	keyword	wvarchar(254)	not null
, primary key (product_id,sequence_num)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index prd_keywrds_idx on dcs_prd_keywrds (keyword)
Command completed successfully, 0 rows affected.


create index pr_keywrds_pid_idx on dcs_prd_keywrds (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_keywrds set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_media (
	product_id	varchar(40)	not null,
	template_id	varchar(40)	null,
	thumbnail_image_id	varchar(40)	null,
	small_image_id	varchar(40)	null,
	large_image_id	varchar(40)	null
, primary key (product_id)
, foreign key (large_image_id) references dcs_media (media_id)
, foreign key (small_image_id) references dcs_media (media_id)
, foreign key (template_id) references dcs_media (media_id)
, foreign key (thumbnail_image_id) references dcs_media (media_id)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index pr_mdia_lrimid_idx on dcs_prd_media (large_image_id)
Command completed successfully, 0 rows affected.


create index pr_mdia_smimid_idx on dcs_prd_media (small_image_id)
Command completed successfully, 0 rows affected.


create index pr_mdia_tmplid_idx on dcs_prd_media (template_id)
Command completed successfully, 0 rows affected.


create index pr_mdia_thimid_idx on dcs_prd_media (thumbnail_image_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_aux_media (
	product_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	media_id	varchar(40)	not null
, primary key (product_id,tag)
, foreign key (media_id) references dcs_media (media_id)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index pr_aux_mdia_mi_idx on dcs_prd_aux_media (media_id)
Command completed successfully, 0 rows affected.


create index pr_aux_mdia_pi_idx on dcs_prd_aux_media (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_aux_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_chldsku (
	product_id	varchar(40)	not null,
	sequence_num	integer	not null,
	sku_id	varchar(40)	not null
, primary key (product_id,sequence_num)
, foreign key (product_id) references dcs_product (product_id)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



create index pr_chldsku_sid_idx on dcs_prd_chldsku (sku_id)
Command completed successfully, 0 rows affected.


create index pr_chldsku_pid_idx on dcs_prd_chldsku (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_chldsku set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_skuattr (
	product_id	varchar(40)	not null,
	sequence_num	integer	not null,
	attribute_name	wvarchar(40)	not null
, primary key (product_id,sequence_num)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index pr_skuattr_pid_idx on dcs_prd_skuattr (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_skuattr set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_groups (
	product_id	varchar(40)	not null,
	related_prd_group	varchar(254)	null
, primary key (product_id)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



alter table dcs_prd_groups set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_rltdprd (
	product_id	varchar(40)	not null,
	sequence_num	integer	not null,
	related_prd_id	varchar(40)	not null
, primary key (product_id,sequence_num)
, foreign key (product_id) references dcs_product (product_id)
, foreign key (related_prd_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index pr_rltdprd_rpi_idx on dcs_prd_rltdprd (related_prd_id)
Command completed successfully, 0 rows affected.


create index pr_rltdprd_pid_idx on dcs_prd_rltdprd (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_rltdprd set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_ancestors (
	product_id	varchar(40)	not null,
	anc_cat_id	varchar(40)	not null
, primary key (product_id,anc_cat_id))
Command completed successfully, 0 rows affected.



create index dcs_prd_anc_cat_id on dcs_prd_ancestors (anc_cat_id)
Command completed successfully, 0 rows affected.


create index dcs_prd_prd_id on dcs_prd_ancestors (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_ancestors set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_attr (
	sku_id	varchar(40)	not null,
	attribute_name	wvarchar(42)	not null,
	attribute_value	varchar(254)	not null
, primary key (sku_id,attribute_name)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



create index sku_attr_skuid_idx on dcs_sku_attr (sku_id)
Command completed successfully, 0 rows affected.


alter table dcs_sku_attr set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_link (
	sku_link_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	display_name	wvarchar(254)	null,
	description	wvarchar(254)	null,
	quantity	integer	not null,
	bundle_item	varchar(40)	not null,
	item_acl	long varchar	null
, primary key (sku_link_id)
, foreign key (bundle_item) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



create index sk_link_bndlid_idx on dcs_sku_link (bundle_item)
Command completed successfully, 0 rows affected.


create index skl_end_dte_idx on dcs_sku_link (end_date)
Command completed successfully, 0 rows affected.


create index skl_strt_dte_idx on dcs_sku_link (start_date)
Command completed successfully, 0 rows affected.


alter table dcs_sku_link set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_bndllnk (
	sku_id	varchar(40)	not null,
	sequence_num	integer	not null,
	sku_link_id	varchar(40)	not null
, primary key (sku_id,sequence_num)
, foreign key (sku_id) references dcs_sku (sku_id)
, foreign key (sku_link_id) references dcs_sku_link (sku_link_id))
Command completed successfully, 0 rows affected.



create index sk_bndllnk_sli_idx on dcs_sku_bndllnk (sku_link_id)
Command completed successfully, 0 rows affected.


create index sk_bndllnk_sid_idx on dcs_sku_bndllnk (sku_id)
Command completed successfully, 0 rows affected.


alter table dcs_sku_bndllnk set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_media (
	sku_id	varchar(40)	not null,
	template_id	varchar(40)	null,
	thumbnail_image_id	varchar(40)	null,
	small_image_id	varchar(40)	null,
	large_image_id	varchar(40)	null
, primary key (sku_id)
, foreign key (large_image_id) references dcs_media (media_id)
, foreign key (small_image_id) references dcs_media (media_id)
, foreign key (template_id) references dcs_media (media_id)
, foreign key (thumbnail_image_id) references dcs_media (media_id)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



create index sk_mdia_lrimid_idx on dcs_sku_media (large_image_id)
Command completed successfully, 0 rows affected.


create index sk_mdia_smimid_idx on dcs_sku_media (small_image_id)
Command completed successfully, 0 rows affected.


create index sk_mdia_tmplid_idx on dcs_sku_media (template_id)
Command completed successfully, 0 rows affected.


create index sk_mdia_thimid_idx on dcs_sku_media (thumbnail_image_id)
Command completed successfully, 0 rows affected.


alter table dcs_sku_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_aux_media (
	sku_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	media_id	varchar(40)	not null
, primary key (sku_id,tag)
, foreign key (media_id) references dcs_media (media_id)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



create index sk_aux_mdia_mi_idx on dcs_sku_aux_media (media_id)
Command completed successfully, 0 rows affected.


create index sk_aux_mdia_si_idx on dcs_sku_aux_media (sku_id)
Command completed successfully, 0 rows affected.


alter table dcs_sku_aux_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_replace (
	sku_id	varchar(40)	not null,
	sequence_num	integer	not null,
	replacement	varchar(40)	not null
, primary key (sku_id,sequence_num)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



create index sk_replace_sid_idx on dcs_sku_replace (sku_id)
Command completed successfully, 0 rows affected.


alter table dcs_sku_replace set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_conf (
	sku_id	varchar(40)	not null,
	config_props	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (sku_id,sequence_num)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



alter table dcs_sku_conf set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_config_prop (
	config_prop_id	varchar(40)	not null,
	version	integer	not null,
	display_name	wvarchar(40)	null,
	description	wvarchar(255)	null,
	item_acl	long varchar	null
, primary key (config_prop_id))
Command completed successfully, 0 rows affected.



alter table dcs_config_prop set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_conf_options (
	config_prop_id	varchar(40)	not null,
	config_options	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (config_prop_id,sequence_num)
, foreign key (config_prop_id) references dcs_config_prop (config_prop_id))
Command completed successfully, 0 rows affected.



alter table dcs_conf_options set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_config_opt (
	config_opt_id	varchar(40)	not null,
	version	integer	not null,
	display_name	wvarchar(40)	null,
	description	wvarchar(255)	null,
	sku	varchar(40)	null,
	product	varchar(40)	null,
	price	double precision	null,
	item_acl	long varchar	null
, primary key (config_opt_id))
Command completed successfully, 0 rows affected.



create index ct_conf_prod_idx on dcs_config_opt (product)
Command completed successfully, 0 rows affected.


create index ct_conf_sku_idx on dcs_config_opt (sku)
Command completed successfully, 0 rows affected.


alter table dcs_config_opt set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_foreign_cat (
	catalog_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	name	wvarchar(100)	null,
	description	wvarchar(255)	null,
	host	varchar(100)	null,
	port	integer	null,
	base_url	varchar(255)	null,
	return_url	varchar(255)	null,
	item_acl	long varchar	null
, primary key (catalog_id))
Command completed successfully, 0 rows affected.



alter table dcs_foreign_cat set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// inventory_ddl.sql





create table dcs_inventory (
	inventory_id	varchar(40)	not null,
	version	integer	not null,
	inventory_lock	varchar(20)	null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	display_name	varchar(254)	null,
	description	varchar(254)	null,
	catalog_ref_id	varchar(40)	not null,
	avail_status	integer	not null,
	availability_date	timestamp	null,
	stock_level	integer	null,
	backorder_level	integer	null,
	preorder_level	integer	null,
	stock_thresh	integer	null,
	backorder_thresh	integer	null,
	preorder_thresh	integer	null
, primary key (inventory_id)
, unique (catalog_ref_id))
Command completed successfully, 0 rows affected.



create index inv_end_dte_idx on dcs_inventory (end_date)
Command completed successfully, 0 rows affected.


create index inv_strt_dte_idx on dcs_inventory (start_date)
Command completed successfully, 0 rows affected.


alter table dcs_inventory set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// promotion_ddl.sql





create table dcs_promotion (
	promotion_id	varchar(40)	not null,
	version	integer	not null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	display_name	wvarchar(254)	null,
	description	wvarchar(254)	null,
	promotion_type	integer	null,
	enabled	numeric(1,0)	null,
	begin_usable	timestamp	null,
	end_usable	timestamp	null,
	priority	integer	null,
	global	numeric(1,0)	null,
	anon_profile	numeric(1,0)	null,
	allow_multiple	numeric(1,0)	null,
	uses	integer	null,
	rel_expiration	numeric(1,0)	null,
	time_until_expire	integer	null
, primary key (promotion_id)
, check (enabled in (0,1))
, check (global in (0,1))
, check (anon_profile in (0,1))
, check (allow_multiple in (0,1))
, check (rel_expiration in (0,1)))
Command completed successfully, 0 rows affected.



create index prmo_bgin_use_idx on dcs_promotion (begin_usable)
Command completed successfully, 0 rows affected.


create index prmo_end_dte_idx on dcs_promotion (end_date)
Command completed successfully, 0 rows affected.


create index prmo_end_use_idx on dcs_promotion (end_usable)
Command completed successfully, 0 rows affected.


create index prmo_strt_dte_idx on dcs_promotion (start_date)
Command completed successfully, 0 rows affected.


alter table dcs_promotion set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_promo_media (
	promotion_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	media_id	varchar(40)	not null
, primary key (promotion_id,tag)
, foreign key (media_id) references dcs_media (media_id)
, foreign key (promotion_id) references dcs_promotion (promotion_id))
Command completed successfully, 0 rows affected.



create index promo_mdia_mid_idx on dcs_promo_media (media_id)
Command completed successfully, 0 rows affected.


create index promo_mdia_pid_idx on dcs_promo_media (promotion_id)
Command completed successfully, 0 rows affected.


alter table dcs_promo_media set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_discount_promo (
	promotion_id	varchar(40)	not null,
	calculator	varchar(254)	not null,
	adjuster	numeric(19,7)	not null,
	pmdl_rule	long wvarchar	not null,
	one_use	numeric(1,0)	null
, primary key (promotion_id)
, foreign key (promotion_id) references dcs_promotion (promotion_id)
, check (one_use in (0, 1)))
Command completed successfully, 0 rows affected.



alter table dcs_discount_promo set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_promo_upsell (
	promotion_id	varchar(40)	not null,
	upsell	tinyint	null
, primary key (promotion_id)
, foreign key (promotion_id) references dcs_promotion (promotion_id)
, check (upsell in (0, 1)))
Command completed successfully, 0 rows affected.



alter table dcs_promo_upsell set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_upsell_action (
	action_id	varchar(40)	not null,
	version	integer	not null,
	name	varchar(40)	not null,
	upsell_prd_grp	long varchar	null
, primary key (action_id))
Command completed successfully, 0 rows affected.



alter table dcs_upsell_action set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_close_qualif (
	close_qualif_id	varchar(40)	not null,
	version	integer	not null,
	name	varchar(40)	not null,
	priority	integer	null,
	qualifier	long wvarchar	null,
	upsell_media	varchar(40)	null,
	upsell_action	varchar(40)	null
, primary key (close_qualif_id)
, foreign key (upsell_media) references dcs_media (media_id)
, foreign key (upsell_action) references dcs_upsell_action (action_id))
Command completed successfully, 0 rows affected.



create index dcs_closequalif2_x on dcs_close_qualif (upsell_media)
Command completed successfully, 0 rows affected.


create index dcs_closequalif1_x on dcs_close_qualif (upsell_action)
Command completed successfully, 0 rows affected.


alter table dcs_close_qualif set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prm_cls_qlf (
	promotion_id	varchar(40)	not null,
	closeness_qualif	varchar(40)	not null
, foreign key (promotion_id) references dcs_promotion (promotion_id)
, foreign key (closeness_qualif) references dcs_close_qualif (close_qualif_id))
Command completed successfully, 0 rows affected.



create index dcs_prm_cls_qlf2_x on dcs_prm_cls_qlf (promotion_id)
Command completed successfully, 0 rows affected.


create index dcs_prm_cls_qlf1_x on dcs_prm_cls_qlf (closeness_qualif)
Command completed successfully, 0 rows affected.


alter table dcs_prm_cls_qlf set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_upsell_prods (
	action_id	varchar(40)	not null,
	product_id	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (action_id,product_id)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index dcs_upsellprods1_x on dcs_upsell_prods (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_upsell_prods set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// user_promotion_ddl.sql




//- The promotion line was commented out to allow the profile and promotion tables to be delinked. The promotion tables are intended to be used as a "read-only" table on the production servers. The promotion (and product catalog) tables are promoted and made active on the production system through copy-switch. In doing so, the profile tables and the promotion tables cannot be in the same database, and therefore we must remove this referece. However if you are not going to use copy-switch for the promotions, then you can add this reference back in.     promotion			VARCHAR(40)		NOT NULL	REFERENCES dcs_promotion(promotion_id),

create table dcs_usr_promostat (
	status_id	varchar(40)	not null,
	profile_id	varchar(40)	not null,
	promotion	varchar(40)	not null,
	num_uses	integer	null,
	expirationDate	timestamp	null
, primary key (status_id))
Command completed successfully, 0 rows affected.



create index promostat_prof_idx on dcs_usr_promostat (profile_id)
Command completed successfully, 0 rows affected.


create index usr_prmstat_pr_idx on dcs_usr_promostat (promotion)
Command completed successfully, 0 rows affected.


alter table dcs_usr_promostat set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_usr_actvpromo (
	id	varchar(40)	not null,
	sequence_num	integer	not null,
	promo_status_id	varchar(40)	not null
, primary key (id,sequence_num))
Command completed successfully, 0 rows affected.



create index usr_actvprm_id_idx on dcs_usr_actvpromo (id)
Command completed successfully, 0 rows affected.


alter table dcs_usr_actvpromo set pessimistic
Command completed successfully, 0 rows affected.



//- The promotion_id column was commented out to allow the profile and promotion tables to be delinked. The promotion tables are intended to be used as a "read-only" table on the production servers. The promotion (and product catalog) tables are promoted and made active on the production system through copy-switch. In doing so, the profile tables and the promotion tables cannot be in the same database, and therefore we must remove this referece. However if you are not going to use copy-switch for the promotions, then you can add this reference back in.        promotion_id                    VARCHAR(40)             NOT NULL        REFERENCES dcs_promotion(promotion_id),

create table dcs_usr_usedpromo (
	id	varchar(40)	not null,
	promotion_id	varchar(40)	not null
, primary key (id,promotion_id))
Command completed successfully, 0 rows affected.



create index usr_usedprm_id_idx on dcs_usr_usedpromo (id)
Command completed successfully, 0 rows affected.


create index usr_usedprm_pi_idx on dcs_usr_usedpromo (promotion_id)
Command completed successfully, 0 rows affected.


alter table dcs_usr_usedpromo set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// user_giftlist_ddl.sql





create table dcs_giftlist (
	id	varchar(40)	not null,
	owner_id	varchar(40)	null,
	is_public	numeric(1,0)	not null,
	is_published	numeric(1,0)	not null,
	event_name	wvarchar(64)	null,
	event_type	integer	null,
	event_date	timestamp	null,
	comments	wvarchar(254)	null,
	description	wvarchar(254)	null,
	instructions	wvarchar(254)	null,
	creation_date	timestamp	null,
	last_modified_date	timestamp	null,
	shipping_addr_id	varchar(40)	null
, primary key (id)
, check (is_public in (0,1))
, check (is_published in (0,1)))
Command completed successfully, 0 rows affected.



create index gftlst_shpadid_idx on dcs_giftlist (shipping_addr_id)
Command completed successfully, 0 rows affected.


create index gft_evnt_name_idx on dcs_giftlist (event_name)
Command completed successfully, 0 rows affected.


create index gft_evnt_type_idx on dcs_giftlist (event_type)
Command completed successfully, 0 rows affected.


create index gft_owner_id_idx on dcs_giftlist (owner_id)
Command completed successfully, 0 rows affected.


alter table dcs_giftlist set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_giftinst (
	giftlist_id	varchar(40)	not null,
	tag	varchar(42)	not null,
	special_inst	varchar(254)	null
, primary key (giftlist_id,tag)
, foreign key (giftlist_id) references dcs_giftlist (id))
Command completed successfully, 0 rows affected.



create index giftinst_gflid_idx on dcs_giftinst (giftlist_id)
Command completed successfully, 0 rows affected.


alter table dcs_giftinst set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_giftitem (
	id	varchar(40)	not null,
	catalog_ref_id	varchar(40)	null,
	product_id	varchar(40)	null,
	display_name	wvarchar(254)	null,
	description	wvarchar(254)	null,
	quantity_desired	integer	null,
	quantity_purchased	integer	null
, primary key (id))
Command completed successfully, 0 rows affected.



create index giftitem_cat_idx on dcs_giftitem (catalog_ref_id)
Command completed successfully, 0 rows affected.


create index giftitem_prod_idx on dcs_giftitem (product_id)
Command completed successfully, 0 rows affected.


alter table dcs_giftitem set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_giftlist_item (
	giftlist_id	varchar(40)	not null,
	sequence_num	integer	not null,
	giftitem_id	varchar(40)	null
, primary key (giftlist_id,sequence_num)
, foreign key (giftitem_id) references dcs_giftitem (id)
, foreign key (giftlist_id) references dcs_giftlist (id))
Command completed successfully, 0 rows affected.



create index gftlst_itm_gii_idx on dcs_giftlist_item (giftitem_id)
Command completed successfully, 0 rows affected.


create index gftlst_itm_gli_idx on dcs_giftlist_item (giftlist_id)
Command completed successfully, 0 rows affected.


alter table dcs_giftlist_item set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_user_wishlist (
	user_id	varchar(40)	not null,
	giftlist_id	varchar(40)	null
, primary key (user_id)
, foreign key (giftlist_id) references dcs_giftlist (id))
Command completed successfully, 0 rows affected.



create index usr_wshlst_gli_idx on dcs_user_wishlist (giftlist_id)
Command completed successfully, 0 rows affected.


alter table dcs_user_wishlist set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_user_giftlist (
	user_id	varchar(40)	not null,
	sequence_num	integer	not null,
	giftlist_id	varchar(40)	null
, primary key (user_id,sequence_num))
Command completed successfully, 0 rows affected.



create index usr_gftlst_uid_idx on dcs_user_giftlist (user_id)
Command completed successfully, 0 rows affected.


alter table dcs_user_giftlist set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_user_otherlist (
	user_id	varchar(40)	not null,
	sequence_num	integer	not null,
	giftlist_id	varchar(40)	null
, primary key (user_id,sequence_num)
, foreign key (giftlist_id) references dcs_giftlist (id))
Command completed successfully, 0 rows affected.



create index usr_otrlst_gli_idx on dcs_user_otherlist (giftlist_id)
Command completed successfully, 0 rows affected.


alter table dcs_user_otherlist set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// order_ddl.sql





create table dcspp_order (
	order_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	order_class_type	varchar(40)	null,
	profile_id	varchar(40)	null,
	description	varchar(64)	null,
	state	varchar(40)	null,
	state_detail	wvarchar(254)	null,
	created_by_order	varchar(40)	null,
	origin_of_order	integer	null,
	creation_date	timestamp	null,
	submitted_date	timestamp	null,
	last_modified_date	timestamp	null,
	completed_date	timestamp	null,
	price_info	varchar(40)	null,
	tax_price_info	varchar(40)	null,
	explicitly_saved	tinyint	null
, primary key (order_id)
, check (explicitly_saved IN (0,1)))
Command completed successfully, 0 rows affected.



create index order_lastmod_idx on dcspp_order (last_modified_date)
Command completed successfully, 0 rows affected.


create index order_profile_idx on dcspp_order (profile_id)
Command completed successfully, 0 rows affected.


create index order_submit_idx on dcspp_order (submitted_date)
Command completed successfully, 0 rows affected.


alter table dcspp_order set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_ship_group (
	shipping_group_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	shipgrp_class_type	varchar(40)	null,
	shipping_method	varchar(40)	null,
	description	varchar(64)	null,
	ship_on_date	timestamp	null,
	actual_ship_date	timestamp	null,
	state	varchar(40)	null,
	state_detail	wvarchar(254)	null,
	submitted_date	timestamp	null,
	price_info	varchar(40)	null,
	order_ref	varchar(40)	null
, primary key (shipping_group_id))
Command completed successfully, 0 rows affected.



alter table dcspp_ship_group set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_pay_group (
	payment_group_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	paygrp_class_type	varchar(40)	null,
	payment_method	varchar(40)	null,
	amount	double precision	null,
	amount_authorized	double precision	null,
	amount_debited	double precision	null,
	amount_credited	double precision	null,
	currency_code	varchar(10)	null,
	state	varchar(40)	null,
	state_detail	wvarchar(254)	null,
	submitted_date	timestamp	null,
	order_ref	varchar(40)	null
, primary key (payment_group_id))
Command completed successfully, 0 rows affected.



alter table dcspp_pay_group set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_item (
	commerce_item_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	item_class_type	varchar(40)	null,
	catalog_id	varchar(40)	null,
	catalog_ref_id	varchar(40)	null,
	catalog_key	varchar(40)	null,
	product_id	varchar(40)	null,
	quantity	integer	null,
	state	varchar(40)	null,
	state_detail	wvarchar(254)	null,
	price_info	varchar(40)	null,
	order_ref	varchar(40)	null
, primary key (commerce_item_id))
Command completed successfully, 0 rows affected.



create index item_catref_idx on dcspp_item (catalog_ref_id)
Command completed successfully, 0 rows affected.


create index item_prodref_idx on dcspp_item (product_id)
Command completed successfully, 0 rows affected.


alter table dcspp_item set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_relationship (
	relationship_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	rel_class_type	varchar(40)	null,
	relationship_type	varchar(40)	null,
	order_ref	varchar(40)	null
, primary key (relationship_id))
Command completed successfully, 0 rows affected.



alter table dcspp_relationship set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_rel_orders (
	order_id	varchar(40)	not null,
	related_orders	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



alter table dcspp_rel_orders set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_order_inst (
	order_id	varchar(40)	not null,
	tag	varchar(42)	not null,
	special_inst	wvarchar(254)	null
, primary key (order_id,tag)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index order_inst_oid_idx on dcspp_order_inst (order_id)
Command completed successfully, 0 rows affected.


alter table dcspp_order_inst set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_order_sg (
	order_id	varchar(40)	not null,
	shipping_groups	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index order_sg_ordid_idx on dcspp_order_sg (order_id)
Command completed successfully, 0 rows affected.


alter table dcspp_order_sg set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_order_pg (
	order_id	varchar(40)	not null,
	payment_groups	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index order_pg_ordid_idx on dcspp_order_pg (order_id)
Command completed successfully, 0 rows affected.


alter table dcspp_order_pg set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_order_item (
	order_id	varchar(40)	not null,
	commerce_items	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index order_item_oid_idx on dcspp_order_item (order_id)
Command completed successfully, 0 rows affected.


alter table dcspp_order_item set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_order_rel (
	order_id	varchar(40)	not null,
	relationships	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index order_rel_orid_idx on dcspp_order_rel (order_id)
Command completed successfully, 0 rows affected.


alter table dcspp_order_rel set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_ship_inst (
	shipping_group_id	varchar(40)	not null,
	tag	varchar(42)	not null,
	special_inst	wvarchar(254)	null
, primary key (shipping_group_id,tag)
, foreign key (shipping_group_id) references dcspp_ship_group (shipping_group_id))
Command completed successfully, 0 rows affected.



create index ship_inst_sgid_idx on dcspp_ship_inst (shipping_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_ship_inst set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_hrd_ship_grp (
	shipping_group_id	varchar(40)	not null,
	tracking_number	varchar(40)	null
, primary key (shipping_group_id)
, foreign key (shipping_group_id) references dcspp_ship_group (shipping_group_id))
Command completed successfully, 0 rows affected.



alter table dcspp_hrd_ship_grp set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_ele_ship_grp (
	shipping_group_id	varchar(40)	not null,
	email_address	varchar(255)	null
, primary key (shipping_group_id)
, foreign key (shipping_group_id) references dcspp_ship_group (shipping_group_id))
Command completed successfully, 0 rows affected.



alter table dcspp_ele_ship_grp set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_ship_addr (
	shipping_group_id	varchar(40)	not null,
	prefix	wvarchar(40)	null,
	first_name	wvarchar(40)	null,
	middle_name	wvarchar(40)	null,
	last_name	wvarchar(40)	null,
	suffix	wvarchar(40)	null,
	job_title	wvarchar(40)	null,
	company_name	wvarchar(40)	null,
	address_1	wvarchar(50)	null,
	address_2	wvarchar(50)	null,
	address_3	wvarchar(50)	null,
	city	wvarchar(40)	null,
	county	wvarchar(40)	null,
	state	wvarchar(40)	null,
	postal_code	wvarchar(10)	null,
	country	wvarchar(40)	null,
	phone_number	wvarchar(40)	null,
	fax_number	wvarchar(40)	null,
	email	wvarchar(255)	null
, primary key (shipping_group_id)
, foreign key (shipping_group_id) references dcspp_ship_group (shipping_group_id))
Command completed successfully, 0 rows affected.



alter table dcspp_ship_addr set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_hand_inst (
	handling_inst_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	hndinst_class_type	varchar(40)	null,
	handling_method	varchar(40)	null,
	shipping_group_id	varchar(40)	null,
	commerce_item_id	varchar(40)	null,
	quantity	integer	null
, primary key (handling_inst_id))
Command completed successfully, 0 rows affected.



create index hi_item_idx on dcspp_hand_inst (commerce_item_id)
Command completed successfully, 0 rows affected.


create index hi_ship_group_idx on dcspp_hand_inst (shipping_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_hand_inst set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_gift_inst (
	handling_inst_id	varchar(40)	not null,
	giftlist_id	varchar(40)	null,
	giftlist_item_id	varchar(40)	null
, primary key (handling_inst_id)
, foreign key (handling_inst_id) references dcspp_hand_inst (handling_inst_id))
Command completed successfully, 0 rows affected.



alter table dcspp_gift_inst set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_sg_hand_inst (
	shipping_group_id	varchar(40)	not null,
	handling_instrs	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (shipping_group_id,sequence_num)
, foreign key (shipping_group_id) references dcspp_ship_group (shipping_group_id))
Command completed successfully, 0 rows affected.



create index sg_hnd_ins_sgi_idx on dcspp_sg_hand_inst (shipping_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_sg_hand_inst set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_pay_inst (
	payment_group_id	varchar(40)	not null,
	tag	varchar(42)	not null,
	special_inst	wvarchar(254)	null
, primary key (payment_group_id,tag)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



create index pay_inst_pgrid_idx on dcspp_pay_inst (payment_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_pay_inst set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_config_item (
	config_item_id	varchar(40)	not null,
	reconfig_data	varchar(255)	null,
	notes	varchar(255)	null
, primary key (config_item_id)
, foreign key (config_item_id) references dcspp_item (commerce_item_id))
Command completed successfully, 0 rows affected.



alter table dcspp_config_item set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_subsku_item (
	subsku_item_id	varchar(40)	not null,
	ind_quantity	integer	null
, primary key (subsku_item_id)
, foreign key (subsku_item_id) references dcspp_item (commerce_item_id))
Command completed successfully, 0 rows affected.



alter table dcspp_subsku_item set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_item_ci (
	commerce_item_id	varchar(40)	not null,
	commerce_items	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (commerce_item_id,sequence_num)
, foreign key (commerce_item_id) references dcspp_item (commerce_item_id))
Command completed successfully, 0 rows affected.



alter table dcspp_item_ci set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_gift_cert (
	payment_group_id	varchar(40)	not null,
	profile_id	varchar(40)	null,
	gift_cert_number	varchar(50)	null
, primary key (payment_group_id)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



create index gc_number_idx on dcspp_gift_cert (gift_cert_number)
Command completed successfully, 0 rows affected.


create index gc_profile_idx on dcspp_gift_cert (profile_id)
Command completed successfully, 0 rows affected.


alter table dcspp_gift_cert set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_store_cred (
	payment_group_id	varchar(40)	not null,
	profile_id	varchar(40)	null,
	store_cred_number	varchar(50)	null
, primary key (payment_group_id)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



create index sc_number_idx on dcspp_store_cred (store_cred_number)
Command completed successfully, 0 rows affected.


create index sc_profile_idx on dcspp_store_cred (profile_id)
Command completed successfully, 0 rows affected.


alter table dcspp_store_cred set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_credit_card (
	payment_group_id	varchar(40)	not null,
	credit_card_number	varchar(40)	null,
	credit_card_type	varchar(40)	null,
	expiration_month	varchar(20)	null,
	exp_day_of_month	varchar(20)	null,
	expiration_year	varchar(20)	null
, primary key (payment_group_id)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



alter table dcspp_credit_card set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_bill_addr (
	payment_group_id	varchar(40)	not null,
	prefix	wvarchar(40)	null,
	first_name	wvarchar(40)	null,
	middle_name	wvarchar(40)	null,
	last_name	wvarchar(40)	null,
	suffix	wvarchar(40)	null,
	job_title	wvarchar(40)	null,
	company_name	wvarchar(40)	null,
	address_1	wvarchar(50)	null,
	address_2	wvarchar(50)	null,
	address_3	wvarchar(50)	null,
	city	wvarchar(40)	null,
	county	wvarchar(40)	null,
	state	wvarchar(40)	null,
	postal_code	wvarchar(10)	null,
	country	wvarchar(40)	null,
	phone_number	wvarchar(40)	null,
	fax_number	wvarchar(40)	null,
	email	wvarchar(255)	null
, primary key (payment_group_id)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



alter table dcspp_bill_addr set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_pay_status (
	status_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	trans_id	varchar(50)	null,
	amount	double precision	null,
	trans_success	tinyint	null,
	error_message	wvarchar(254)	null,
	trans_timestamp	timestamp	null
, primary key (status_id)
, check (trans_success IN (0,1)))
Command completed successfully, 0 rows affected.



alter table dcspp_pay_status set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_cc_status (
	status_id	varchar(40)	not null,
	auth_expiration	timestamp	null,
	avs_code	varchar(40)	null,
	avs_desc_result	wvarchar(254)	null,
	integration_data	varchar(256)	null
, primary key (status_id)
, foreign key (status_id) references dcspp_pay_status (status_id))
Command completed successfully, 0 rows affected.



alter table dcspp_cc_status set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_gc_status (
	status_id	varchar(40)	not null,
	auth_expiration	timestamp	null
, primary key (status_id)
, foreign key (status_id) references dcspp_pay_status (status_id))
Command completed successfully, 0 rows affected.



alter table dcspp_gc_status set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_sc_status (
	status_id	varchar(40)	not null,
	auth_expiration	timestamp	null
, primary key (status_id)
, foreign key (status_id) references dcspp_pay_status (status_id))
Command completed successfully, 0 rows affected.



alter table dcspp_sc_status set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_auth_status (
	payment_group_id	varchar(40)	not null,
	auth_status	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (payment_group_id,sequence_num)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



create index auth_stat_pgid_idx on dcspp_auth_status (payment_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_auth_status set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_debit_status (
	payment_group_id	varchar(40)	not null,
	debit_status	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (payment_group_id,sequence_num)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



create index debit_stat_pgi_idx on dcspp_debit_status (payment_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_debit_status set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_cred_status (
	payment_group_id	varchar(40)	not null,
	credit_status	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (payment_group_id,sequence_num)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



create index cred_stat_pgid_idx on dcspp_cred_status (payment_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_cred_status set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_shipitem_rel (
	relationship_id	varchar(40)	not null,
	shipping_group_id	varchar(40)	null,
	commerce_item_id	varchar(40)	null,
	quantity	integer	null,
	returned_qty	integer	null,
	amount	double precision	null,
	state	varchar(40)	null,
	state_detail	wvarchar(254)	null
, primary key (relationship_id)
, foreign key (relationship_id) references dcspp_relationship (relationship_id))
Command completed successfully, 0 rows affected.



create index sirel_item_idx on dcspp_shipitem_rel (commerce_item_id)
Command completed successfully, 0 rows affected.


create index sirel_shipgrp_idx on dcspp_shipitem_rel (shipping_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_shipitem_rel set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_rel_range (
	relationship_id	varchar(40)	not null,
	low_bound	integer	null,
	high_bound	integer	null
, primary key (relationship_id))
Command completed successfully, 0 rows affected.



alter table dcspp_rel_range set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_payitem_rel (
	relationship_id	varchar(40)	not null,
	payment_group_id	varchar(40)	null,
	commerce_item_id	varchar(40)	null,
	quantity	integer	null,
	amount	double precision	null
, primary key (relationship_id)
, foreign key (relationship_id) references dcspp_relationship (relationship_id))
Command completed successfully, 0 rows affected.



create index pirel_item_idx on dcspp_payitem_rel (commerce_item_id)
Command completed successfully, 0 rows affected.


create index pirel_paygrp_idx on dcspp_payitem_rel (payment_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_payitem_rel set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_payship_rel (
	relationship_id	varchar(40)	not null,
	payment_group_id	varchar(40)	null,
	shipping_group_id	varchar(40)	null,
	amount	double precision	null
, primary key (relationship_id)
, foreign key (relationship_id) references dcspp_relationship (relationship_id))
Command completed successfully, 0 rows affected.



create index psrel_paygrp_idx on dcspp_payship_rel (payment_group_id)
Command completed successfully, 0 rows affected.


create index psrel_shipgrp_idx on dcspp_payship_rel (shipping_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_payship_rel set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_payorder_rel (
	relationship_id	varchar(40)	not null,
	payment_group_id	varchar(40)	null,
	order_id	varchar(40)	null,
	amount	double precision	null
, primary key (relationship_id)
, foreign key (relationship_id) references dcspp_relationship (relationship_id))
Command completed successfully, 0 rows affected.



create index porel_order_idx on dcspp_payorder_rel (order_id)
Command completed successfully, 0 rows affected.


create index porel_paygrp_idx on dcspp_payorder_rel (payment_group_id)
Command completed successfully, 0 rows affected.


alter table dcspp_payorder_rel set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_amount_info (
	amount_info_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	currency_code	varchar(10)	null,
	amount	double precision	null,
	discounted	tinyint	null,
	amount_is_final	tinyint	null
, primary key (amount_info_id)
, check (discounted IN (0,1))
, check (amount_is_final IN (0,1)))
Command completed successfully, 0 rows affected.



alter table dcspp_amount_info set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_order_price (
	amount_info_id	varchar(40)	not null,
	raw_subtotal	double precision	null,
	tax	double precision	null,
	shipping	double precision	null,
	manual_adj_total	double precision	null
, primary key (amount_info_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



alter table dcspp_order_price set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_item_price (
	amount_info_id	varchar(40)	not null,
	list_price	double precision	null,
	raw_total_price	double precision	null,
	sale_price	double precision	null,
	on_sale	tinyint	null,
	order_discount	double precision	null,
	qty_discounted	integer	null,
	qty_as_qualifier	integer	null,
	price_list	varchar(40)	null
, primary key (amount_info_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id)
, check (on_sale IN (0,1)))
Command completed successfully, 0 rows affected.



alter table dcspp_item_price set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_tax_price (
	amount_info_id	varchar(40)	not null,
	city_tax	double precision	null,
	county_tax	double precision	null,
	state_tax	double precision	null,
	country_tax	double precision	null
, primary key (amount_info_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



alter table dcspp_tax_price set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_ship_price (
	amount_info_id	varchar(40)	not null,
	raw_shipping	double precision	null
, primary key (amount_info_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



alter table dcspp_ship_price set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_amtinfo_adj (
	amount_info_id	varchar(40)	not null,
	adjustments	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (amount_info_id,sequence_num)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



create index amtinf_adj_aid_idx on dcspp_amtinfo_adj (amount_info_id)
Command completed successfully, 0 rows affected.


alter table dcspp_amtinfo_adj set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_price_adjust (
	adjustment_id	varchar(40)	not null,
	version	integer	not null,
	adj_description	varchar(254)	null,
	pricing_model	varchar(40)	null,
	manual_adjustment	varchar(40)	null,
	adjustment	double precision	null,
	qty_adjusted	integer	null
, primary key (adjustment_id))
Command completed successfully, 0 rows affected.



alter table dcspp_price_adjust set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_shipitem_sub (
	amount_info_id	varchar(40)	not null,
	shipping_group_id	varchar(42)	not null,
	ship_item_subtotal	varchar(40)	not null
, primary key (amount_info_id,shipping_group_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



create index ship_item_sub_idx on dcspp_shipitem_sub (amount_info_id)
Command completed successfully, 0 rows affected.


alter table dcspp_shipitem_sub set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_taxshipitem (
	amount_info_id	varchar(40)	not null,
	shipping_group_id	varchar(42)	not null,
	tax_ship_item_sub	varchar(40)	not null
, primary key (amount_info_id,shipping_group_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



create index tax_ship_item_idx on dcspp_taxshipitem (amount_info_id)
Command completed successfully, 0 rows affected.


alter table dcspp_taxshipitem set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_ntaxshipitem (
	amount_info_id	varchar(40)	not null,
	shipping_group_id	varchar(42)	not null,
	non_tax_item_sub	varchar(40)	not null
, primary key (amount_info_id,shipping_group_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



create index ntax_ship_item_idx on dcspp_ntaxshipitem (amount_info_id)
Command completed successfully, 0 rows affected.


alter table dcspp_ntaxshipitem set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_shipitem_tax (
	amount_info_id	varchar(40)	not null,
	shipping_group_id	varchar(42)	not null,
	ship_item_tax	varchar(40)	not null
, primary key (amount_info_id,shipping_group_id)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



create index ship_item_tax_idx on dcspp_shipitem_tax (amount_info_id)
Command completed successfully, 0 rows affected.


alter table dcspp_shipitem_tax set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_itmprice_det (
	amount_info_id	varchar(40)	not null,
	cur_price_details	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (amount_info_id,sequence_num)
, foreign key (amount_info_id) references dcspp_amount_info (amount_info_id))
Command completed successfully, 0 rows affected.



create index itmprc_det_aii_idx on dcspp_itmprice_det (amount_info_id)
Command completed successfully, 0 rows affected.


alter table dcspp_itmprice_det set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_det_price (
	amount_info_id	varchar(40)	not null,
	tax	double precision	null,
	order_discount	double precision	null,
	quantity	integer	null,
	qty_as_qualifier	integer	null
, primary key (amount_info_id))
Command completed successfully, 0 rows affected.



alter table dcspp_det_price set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_det_range (
	amount_info_id	varchar(40)	not null,
	low_bound	integer	null,
	high_bound	integer	null
, primary key (amount_info_id))
Command completed successfully, 0 rows affected.



alter table dcspp_det_range set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_order_adj (
	order_id	varchar(40)	not null,
	adjustment_id	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index order_adj_orid_idx on dcspp_order_adj (order_id)
Command completed successfully, 0 rows affected.


alter table dcspp_order_adj set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_manual_adj (
	manual_adjust_id	varchar(40)	not null,
	type	integer	not null,
	adjustment_type	integer	not null,
	reason	integer	not null,
	amount	double precision	null,
	notes	varchar(255)	null,
	version	integer	not null
, primary key (manual_adjust_id))
Command completed successfully, 0 rows affected.



alter table dcspp_manual_adj set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// dcs_mappers.sql





create table dcs_cart_event (
	id	varchar(40)	not null,
	timestamp	timestamp	null,
	orderid	varchar(40)	null,
	itemid	varchar(40)	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	quantity	integer	null,
	amount	double precision	null,
	profileid	varchar(40)	null)
Command completed successfully, 0 rows affected.



alter table dcs_cart_event set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_submt_ord_evt (
	id	varchar(40)	not null,
	clocktime	timestamp	null,
	orderid	varchar(40)	null,
	profileid	varchar(40)	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null)
Command completed successfully, 0 rows affected.



alter table dcs_submt_ord_evt set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prom_used_evt (
	id	varchar(40)	not null,
	clocktime	timestamp	null,
	orderid	varchar(40)	null,
	profileid	varchar(40)	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	promotionid	varchar(40)	null,
	order_amount	numeric(26,7)	null,
	discount	numeric(26,7)	null)
Command completed successfully, 0 rows affected.



alter table dcs_prom_used_evt set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_ord_merge_evt (
	id	varchar(40)	not null,
	clocktime	timestamp	null,
	sourceorderid	varchar(40)	null,
	destorderid	varchar(40)	null,
	profileid	varchar(40)	null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null,
	sourceremoved	tinyint	null
, check (sourceremoved in (0,1)))
Command completed successfully, 0 rows affected.



alter table dcs_ord_merge_evt set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_promo_rvkd (
	id	varchar(40)	not null,
	time_stamp	timestamp	null,
	promotionid	varchar(254)	not null,
	profileid	varchar(254)	not null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null)
Command completed successfully, 0 rows affected.



alter table dcs_promo_rvkd set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_promo_grntd (
	id	varchar(40)	not null,
	time_stamp	timestamp	null,
	promotionid	varchar(254)	not null,
	profileid	varchar(254)	not null,
	sessionid	varchar(100)	null,
	parentsessionid	varchar(100)	null)
Command completed successfully, 0 rows affected.



alter table dcs_promo_grntd set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// claimable_ddl.sql





create table dcspp_claimable (
	claimable_id	varchar(40)	not null,
	version	integer	not null,
	type	integer	not null,
	status	integer	null,
	expiration_date	timestamp	null
, primary key (claimable_id))
Command completed successfully, 0 rows affected.



alter table dcspp_claimable set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_giftcert (
	giftcertificate_id	varchar(40)	not null,
	amount	double precision	not null,
	amount_authorized	double precision	not null,
	amount_remaining	double precision	not null,
	purchaser_id	varchar(40)	null,
	purchase_date	timestamp	null,
	last_used	timestamp	null
, primary key (giftcertificate_id)
, foreign key (giftcertificate_id) references dcspp_claimable (claimable_id))
Command completed successfully, 0 rows affected.



create index claimable_user_idx on dcspp_giftcert (purchaser_id)
Command completed successfully, 0 rows affected.


alter table dcspp_giftcert set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_storecred_clm (
	store_credit_id	varchar(40)	not null,
	amount	double precision	not null,
	amount_authorized	double precision	not null,
	amount_remaining	double precision	not null,
	owner_id	varchar(40)	null,
	issue_date	timestamp	null,
	expiration_date	timestamp	null,
	last_used	timestamp	null
, primary key (store_credit_id)
, foreign key (store_credit_id) references dcspp_claimable (claimable_id))
Command completed successfully, 0 rows affected.



create index storecr_issue_idx on dcs_storecred_clm (issue_date)
Command completed successfully, 0 rows affected.


create index storecr_owner_idx on dcs_storecred_clm (owner_id)
Command completed successfully, 0 rows affected.


alter table dcs_storecred_clm set pessimistic
Command completed successfully, 0 rows affected.




create table dcspp_coupon (
	coupon_id	varchar(40)	not null,
	promotion_id	varchar(40)	not null
, primary key (coupon_id)
, foreign key (coupon_id) references dcspp_claimable (claimable_id))
Command completed successfully, 0 rows affected.



alter table dcspp_coupon set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// reporting_views.sql




//-        In the comments, the time periods indicated are calendar time, meaning that   
//-        the current period should be calculated from the start of the calendar time period,   
//-        rather than in real time.  For example, if it is Thursday, July 12,   
//-        the most current row in a view calculating totals for a week    
//-        would run from Sunday, July 8 - July 12, rather than July 5 - July 12.   
//-        drpt_order gathers basic information about each order   
create view drpt_order
as
select o.order_id as order_id, 
	o.submitted_date as submitted_date, 
	ai.amount as amount, 
	count(i.quantity) as distinct_items, 
	sum(i.quantity) as total_items,
	ba.state as state, 
	ba.country as country, 
	o.price_info as price_info
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcspp_pay_group pg, 
	dcspp_bill_addr ba
where o.order_id = i.order_ref 
	and o.price_info = ai.amount_info_id 
	and o.order_id = pg.order_ref
	and pg.payment_group_id = ba.payment_group_id
group by o.order_id, 
	o.submitted_date, 
	ai.amount, 
	ba.state, 
	ba.country,
	 o.price_info
         
Command completed successfully, 0 rows affected.




//-        drpt_cost_of_goods calculates the total wholesale cost   
//-        of the items purchased in each order   
create view drpt_cost_of_goods
as
select i.order_ref as order_id, 
	sum(i.quantity * s.wholesale_price) as cost_of_goods
from dcspp_item i, 
	dcs_sku s
where i.catalog_ref_id = s.sku_id
group by i.order_ref
         
Command completed successfully, 0 rows affected.




//-        drpt_discount calculates the total amount discounted   
//-        from each order via promotions   
create view drpt_discount
as
select o.order_id as order_id, 
	o.submitted_date as submitted_date, 
	(0 - sum(pa.adjustment)) as discount
from dcspp_order o, 
	dcspp_item i, 
	dcspp_amtinfo_adj aa, 
	dcspp_price_adjust pa
where o.order_id = i.order_ref 
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model is not null
group by o.order_id, 
	o.submitted_date
         
Command completed successfully, 0 rows affected.




//-        drptw_discounts calculates the number of orders that   
//-        were discounted by promotions over each week   
//-        The "UNION" operation allows weeks in which there   
//-        were no discounts to have a row in the view   
create view drptw_discounts
as
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) as week, 
	count(order_id) as num_of_discounts
from drpt_discount
group by week
UNION
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) as week, 
	0 as num_of_discounts
from dcspp_order 
where convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) not in (select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) from drpt_discount)
         
Command completed successfully, 0 rows affected.




//-        drptm_discounts calculates the number of orders that   
//-        were discounted by promotions over each month   
//-        The "UNION" operation allows months in which there   
//-        were no discounts to have a row in the view   
create view drptm_discounts
as
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) as month, 
	count(order_id) as num_of_discounts
from drpt_discount
group by month
UNION
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) as month, 
	0 as num_of_discounts
from dcspp_order 
where convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) not in (select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) from drpt_discount)
         
Command completed successfully, 0 rows affected.




//-        drptq_discounts calculates the number of orders that   
//-        were discounted by promotions over each quarter   
//-        The "UNION" operation allows quarters in which there   
//-        were no discounts to have a row in the view   
create view drptq_discounts
as
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') as quarter, 
	count(order_id) as num_of_discounts
from drpt_discount
group by quarter
UNION
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') as quarter, 
	0 as num_of_discounts
from dcspp_order 
where convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') not in (select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') from drpt_discount)
         
Command completed successfully, 0 rows affected.




//-        drpta_discounts calculates the number of orders that   
//-        were discounted by promotions over each year   
//-        The "UNION" operation allows years in which there   
//-        were no discounts to have a row in the view   
create view drpta_discounts
as
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') as year, 
	count(order_id) as num_of_discounts
from drpt_discount
group by year
UNION
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') as year, 
	0 as num_of_discounts
from dcspp_order 
where convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') not in (select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') from drpt_discount)
         
Command completed successfully, 0 rows affected.




//-        drpt_ordered_items comprises a list of each item purchased   
create view drpt_ordered_items
as
select o.order_id as order_id, 
	o.submitted_date as submitted_date, 
	i.catalog_ref_id as catalog_ref_id,
	i.product_id as product_id, 
	i.quantity as quantity, 
	ai.amount as price
from dcspp_order o, 
	dcspp_item i, 
	dcspp_amount_info ai
where o.order_id = i.order_ref 
	and i.price_info = ai.amount_info_id
         
Command completed successfully, 0 rows affected.




//-        drpt_sku_stock calculates the number of unique skus in stock per product   
//-        in the catalog.  The "UNION" operation exists so that a row will   
//-        appear for products that have no skus in stock   
create view drpt_sku_stock
as
select pc.product_id as product_id, 
	count(i.catalog_ref_id) as skus_in_stock
from dcs_prd_chldsku pc, 
	dcs_inventory i
where pc.sku_id = i.catalog_ref_id 
	and i.stock_level > 0
group by pc.product_id
UNION
select product_id, 
	0 as skus_in_stock 
from dcs_prd_chldsku 
where product_id not in 
(select product_id 
from dcs_prd_chldsku pc, 
	dcs_inventory i 
where pc.sku_id = i.catalog_ref_id 
	and i.stock_level > 0)
         
Command completed successfully, 0 rows affected.




//-        drptw_browses calculatess the number of times each product's page   
//-        has been viewed online each week   
create view drptw_browses
as
select repositoryid as product_id, 
	convert_date(CONVERT_INTEGER(timestamp)-CONVERT_INTEGER((DAYOFWEEK(timestamp) -1) *86400)) as week, 
	count(timestamp) as browses
from dss_dps_view_item
group by repositoryid, week
         
Command completed successfully, 0 rows affected.




//-        drptm_browses calculates the number of times each product's page   
//-        has been viewed online each month   
create view drptm_browses
as
select repositoryid as product_id, 
	convert_date(CONVERT_INTEGER(timestamp)-CONVERT_INTEGER((DAYOFMONTH(timestamp) -1) *86400)) as month, 
	count(timestamp) as browses
from dss_dps_view_item
group by repositoryid,	month
         
Command completed successfully, 0 rows affected.




//-        drptq_browses calculates the number of times each product's page   
//-        has been viewed online each quarter   
create view drptq_browses
as
select repositoryid as product_id, 
	convert_date(CONVERT_VARCHAR(year(timestamp))||'-'||CONVERT_VARCHAR((QUARTER(timestamp)-1)*3+1)||'-01') as quarter, 
	count(timestamp) as browses
from dss_dps_view_item
group by repositoryid, 
	quarter
         
Command completed successfully, 0 rows affected.




//-        drpta_browses calculates the number of times each product's page   
//-        has been viewed online each year   
create view drpta_browses
as
select repositoryid as product_id, 
	convert_date(CONVERT_VARCHAR(year(timestamp))||'-01-01') as year, 
	count(timestamp) as browses
from dss_dps_view_item
group by repositoryid,
	year
         
Command completed successfully, 0 rows affected.




//-        drptw_carts calculates the number of times each product has   
//-        been added to a user's shopping cart each week   
//-        Note:  A single user adding a quantity greater than one   
//-        to their cart at one time is considered a single "add to cart"   
create view drptw_carts
as
select pc.product_id as product_id, 
	convert_date(CONVERT_INTEGER(ce.timestamp)-CONVERT_INTEGER((DAYOFWEEK(ce.timestamp) -1) *86400)) as week, 
	count(ce.id) as adds_to_cart
from dcs_cart_event ce, 
	dcs_prd_chldsku pc
where ce.itemid = pc.sku_id
group by pc.product_id, 
	week
         
Command completed successfully, 0 rows affected.




//-        drptm_carts calculates the number of times each product has   
//-        been added to a user's shopping cart each month   
//-        Note:  A single user adding a quantity greater than one   
//-        to their cart at one time is considered a single "add to cart"   
create view drptm_carts
as
select pc.product_id as product_id, 
	convert_date(CONVERT_INTEGER(ce.timestamp)-CONVERT_INTEGER((DAYOFMONTH(ce.timestamp) -1) *86400)) as month, 
	count(ce.id) as adds_to_cart
from dcs_cart_event ce, 
	dcs_prd_chldsku pc
where ce.itemid = pc.sku_id
group by pc.product_id, 
	month
         
Command completed successfully, 0 rows affected.




//-        drptq_carts calculates the number of times each product has   
//-        been added to a user's shopping cart each quarter   
//-        Note:  A single user adding a quantity greater than one   
//-        to their cart at one time is considered a single "add to cart"   
create view drptq_carts
as
select pc.product_id as product_id, 
	convert_date(CONVERT_VARCHAR(year(ce.timestamp))||'-'||CONVERT_VARCHAR((QUARTER(ce.timestamp)-1)*3+1)||'-01') as quarter, 
	count(ce.id) as adds_to_cart
from dcs_cart_event ce, 
	dcs_prd_chldsku pc
where ce.itemid = pc.sku_id
group by pc.product_id, 
	quarter
         
Command completed successfully, 0 rows affected.




//-        drpta_carts calculates the number of times each product has   
//-        been added to a user's shopping cart each year   
//-        Note:  A single user adding a quantity greater than one   
//-        to their cart at one time is considered a single "add to cart"   
create view drpta_carts
as
select pc.product_id as product_id, 
	convert_date(CONVERT_VARCHAR(year(ce.timestamp))||'-01-01') as year, 
	count(ce.id) as adds_to_cart
from dcs_cart_event ce, 
	dcs_prd_chldsku pc
where ce.itemid = pc.sku_id
group by pc.product_id, 
	year
         
Command completed successfully, 0 rows affected.




//-        drpt_shipping compiles the total shipping cost for each shipping group   
create view drpt_shipping
as
select o.order_id as order_id, 
	ai.amount as shipping_cost
from dcspp_order o, 
	dcspp_ship_group sg, 
	dcspp_amount_info ai
where o.order_id = sg.order_ref 
	and sg.price_info = ai.amount_info_id
         
Command completed successfully, 0 rows affected.




//-        drpt_taxes compiles the total tax cost for each order   
create view drpt_taxes
as
select o.order_id as order_id, 
	ai.amount as tax
from dcspp_order o, 
	dcspp_amount_info ai
where o.tax_price_info = ai.amount_info_id
         
Command completed successfully, 0 rows affected.




//-        drpt_cancels compiles information about orders that failed or   
//-        were cancelled   
create view drpt_cancels
as
select o.order_id as order_id, 
	o.submitted_date as submitted_date,
	ai.amount as amount, 
	si.shipping_cost as shipping_cost,
	ti.tax as tax
from dcspp_order o, 
	dcspp_amount_info ai, 
	drpt_shipping si, 
	drpt_taxes ti
where (o.state = 'FAILED' or o.state = 'REMOVED') 
	and o.price_info = ai.amount_info_id
	and o.order_id = si.order_id 
	and o.order_id = ti.order_id
         
Command completed successfully, 0 rows affected.




//-        drptw_cancels calculates the number of orders that failed or   
//-        were cancelled each week.  It also calculates the total   
//-        amount, shipping costs, and tax costs from those orders.   
create view drptw_cancels
as
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) as week, 
	count(order_id) as number_of_cancels,
	sum(amount) as amount, 
	sum(shipping_cost) as shipping_cost, 
	sum(tax) as tax
from drpt_cancels
group by week
UNION
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) as week, 
	0 as number_of_cancels, 
	0 as amount,
	0 as shipping_cost, 
	0 as tax
from dcspp_order
where convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) not in (select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) from drpt_cancels)
group by week
         
Command completed successfully, 0 rows affected.




//-        drptm_cancels calculates the number of orders that failed or   
//-        were cancelled each month.  It also calculates the total   
//-        amount, shipping costs, and tax costs from those orders.   
create view drptm_cancels
as
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) as month, 
	count(order_id) as number_of_cancels,
	sum(amount) as amount, 
	sum(shipping_cost) as shipping_cost, 
	sum(tax) as tax
from drpt_cancels
group by month
UNION
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) as month, 
	0 as number_of_cancels, 
	0 as amount,
	0 as shipping_cost, 
	0 as tax
from dcspp_order
where convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) not in (select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) from drpt_cancels)
group by month
         
Command completed successfully, 0 rows affected.




//-        drptq_cancels calculates the number of orders that failed or   
//-        were cancelled each quarter.  It also calculates the total   
//-        amount, shipping costs, and tax costs from those orders.   
create view drptq_cancels
as
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') as quarter, 
	count(order_id) as number_of_cancels,
	sum(amount) as amount, 
	sum(shipping_cost) as shipping_cost, 
	sum(tax) as tax
from drpt_cancels
group by quarter
UNION
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') as quarter, 
	0 as number_of_cancels, 
	0 as amount,
	0 as shipping_cost, 
	0 as tax
from dcspp_order
where convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') not in (select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') from drpt_cancels)
group by quarter
         
Command completed successfully, 0 rows affected.




//-        drpta_cancels calculates the number of orders that failed or   
//-        were cancelled in the past year.  It also calculates the total   
//-        amount, shipping costs, and tax costs from those orders.   
create view drpta_cancels
as
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') as year, 
	count(order_id) as number_of_cancels,
	sum(amount) as amount, 
	sum(shipping_cost) as shipping_cost, 
	sum(tax) as tax
from drpt_cancels
group by year
UNION
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') as year, 
	0 as number_of_cancels, 
	0 as amount,
	0 as shipping_cost, 
	0 as tax
from dcspp_order
where convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') not in (select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') from drpt_cancels)
group by year
         
Command completed successfully, 0 rows affected.




//-        drptw_gift_certs calculates the number of gift certificates   
//-        that were redeemed each week   
create view drptw_gift_certs
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	count(gc.payment_group_id) as num_of_gift_certs
from dcspp_order o, 
	dcspp_pay_group pg, 
	dcspp_gift_cert gc
where o.order_id = pg.order_ref 
	and pg.payment_group_id = gc.payment_group_id
group by week
UNION
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFWEEK(submitted_date) -1) *86400)) as week, 
	0 as num_of_gift_certs
from dcspp_order
where order_id not in 
(select pg.order_ref 
from dcspp_pay_group pg, 
	dcspp_gift_cert gc 
where pg.payment_group_id = gc.payment_group_id)
group by week
         
Command completed successfully, 0 rows affected.




//-        drptm_gift_certs calculates the number of gift certificates   
//-        that were redeemed each month   
create view drptm_gift_certs
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	count(gc.payment_group_id) as num_of_gift_certs
from dcspp_order o, 
	dcspp_pay_group pg, 
	dcspp_gift_cert gc
where o.order_id = pg.order_ref 
	and pg.payment_group_id = gc.payment_group_id
group by month
UNION
select convert_date(CONVERT_INTEGER(submitted_date)-CONVERT_INTEGER((DAYOFMONTH(submitted_date) -1) *86400)) as month, 
	0 as num_of_gift_certs
from dcspp_order
where order_id not in 
(select pg.order_ref 
from dcspp_pay_group pg, 
	dcspp_gift_cert gc 
where pg.payment_group_id = gc.payment_group_id)
group by month
         
Command completed successfully, 0 rows affected.




//-        drptq_gift_certs calculates the number of gift certificates   
//-        that were redeemed each quarter   
create view drptq_gift_certs
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	count(gc.payment_group_id) as num_of_gift_certs
from dcspp_order o, 
	dcspp_pay_group pg, 
	dcspp_gift_cert gc
where o.order_id = pg.order_ref 
	and pg.payment_group_id = gc.payment_group_id
group by quarter
UNION
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(submitted_date)-1)*3+1)||'-01') as quarter, 
	0 as num_of_gift_certs
from dcspp_order
where order_id not in 
(select pg.order_ref 
from dcspp_pay_group pg, 
	dcspp_gift_cert gc 
where pg.payment_group_id = gc.payment_group_id)
group by quarter
         
Command completed successfully, 0 rows affected.




//-        drpta_gift_certs calculates the number of gift certificates   
//-        that were redeemed each year   
create view drpta_gift_certs
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	count(gc.payment_group_id) as num_of_gift_certs
from dcspp_order o, 
	dcspp_pay_group pg, 
	dcspp_gift_cert gc
where o.order_id = pg.order_ref 
	and pg.payment_group_id = gc.payment_group_id
group by year
UNION
select convert_date(CONVERT_VARCHAR(year(submitted_date))||'-01-01') as year, 
	0 as num_of_gift_certs
from dcspp_order
where order_id not in 
(select pg.order_ref 
from dcspp_pay_group pg, 
	dcspp_gift_cert gc 
where pg.payment_group_id = gc.payment_group_id)
group by year
         
Command completed successfully, 0 rows affected.




//-        drptw_orders calculates various totals from orders over each week   
create view drptw_orders
as
select convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(dri.submitted_date) -1) *86400))
 as week, 
	(sum(ai.amount) + sum(si.shipping_cost) + sum(ti.tax)) as total_dollar_sales,
	(wct.amount + wct.shipping_cost + wct.tax) as dollar_cancels,
	(sum(ai.amount) - wct.amount) as merch_rev,
	(sum(si.shipping_cost) + sum(ti.tax) - wct.shipping_cost - wct.tax) as shipping_tax_rev,
	sum(cog.cost_of_goods) as cost_of_goods_sold,
	(count(dri.order_id)) as number_of_orders, 
	(wct.number_of_cancels) as cancelled_orders,
	(count(dri.order_id) - wct.number_of_cancels) as net_num_of_orders,
	sum(dri.total_items) as total_units_sold,
	wdt.num_of_discounts as num_of_discounts,
	wgct.num_of_gift_certs as num_of_gift_certs
from dcspp_amount_info ai, 
	drpt_shipping si, 
	drpt_taxes ti,
	drptw_cancels wct, 
	drptw_discounts wdt,
	drptw_gift_certs wgct, 
	drpt_order dri, 
	drpt_cost_of_goods cog
where dri.price_info = ai.amount_info_id 
	and dri.order_id = si.order_id 
	and dri.order_id = ti.order_id 
	and convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(dri.submitted_date) -1) *86400))
 = wct.week 
	and convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(dri.submitted_date) -1) *86400))
 = wdt.week 
	and convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(dri.submitted_date) -1) *86400))
 = wgct.week 
	and dri.order_id = cog.order_id
group by week, 
	wct.number_of_cancels, 
	wct.amount, 
	wct.shipping_cost, 
	wct.tax, 
	wdt.num_of_discounts, 
	wgct.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




//-        drptm_orders calculates various totals from orders over each month   
create view drptm_orders
as
select convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(dri.submitted_date) -1) *86400)) as month, 
	(sum(ai.amount) + sum(si.shipping_cost) + sum(ti.tax)) as total_dollar_sales,
	(mct.amount + mct.shipping_cost + mct.tax) as dollar_cancels,
	(sum(ai.amount) - mct.amount) as merch_rev,
	(sum(si.shipping_cost) + sum(ti.tax) - mct.shipping_cost - mct.tax) as shipping_tax_rev,
	sum(cog.cost_of_goods) as cost_of_goods_sold,
	(count(dri.order_id)) as number_of_orders, 
	(mct.number_of_cancels) as cancelled_orders,
	(count(dri.order_id) - mct.number_of_cancels) as net_num_of_orders,
	sum(dri.total_items) as total_units_sold,
	mdt.num_of_discounts as num_of_discounts,
	mgct.num_of_gift_certs as num_of_gift_certs
from dcspp_amount_info ai, 
	drpt_shipping si, 
	drpt_taxes ti,
	drptm_cancels mct, 
	drptm_discounts mdt,
	drptm_gift_certs mgct, 
	drpt_order dri, 
	drpt_cost_of_goods cog
where dri.price_info = ai.amount_info_id 
	and dri.order_id = si.order_id 
	and dri.order_id = ti.order_id 
	and convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(dri.submitted_date) -1) *86400)) = mct.month 
	and convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(dri.submitted_date) -1) *86400)) = mdt.month 
	and convert_date(CONVERT_INTEGER(dri.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(dri.submitted_date) -1) *86400)) = mgct.month 
	and dri.order_id = cog.order_id
group by month, 
	mct.number_of_cancels, mct.amount, 
	mct.shipping_cost, 
	mct.tax, 
	mdt.num_of_discounts, 
	mgct.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




//-        drptq_orders calculates various totals from orders over each quarter   
create view drptq_orders
as
select convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(dri.submitted_date)-1)*3+1)||'-01') as quarter, 
	(sum(ai.amount) + sum(si.shipping_cost) + sum(ti.tax)) as total_dollar_sales,
	(qct.amount + qct.shipping_cost + qct.tax) as dollar_cancels,
	(sum(ai.amount) - qct.amount) as merch_rev,
	(sum(si.shipping_cost) + sum(ti.tax) - qct.shipping_cost - qct.tax) as shipping_tax_rev,
	sum(cog.cost_of_goods) as cost_of_goods_sold,
	(count(dri.order_id)) as number_of_orders, 
	(qct.number_of_cancels) as cancelled_orders,
	(count(dri.order_id) - qct.number_of_cancels) as net_num_of_orders,
	sum(dri.total_items) as total_units_sold,
	qdt.num_of_discounts as num_of_discounts,
	qgct.num_of_gift_certs as num_of_gift_certs
from dcspp_amount_info ai, 
	drpt_shipping si, 
	drpt_taxes ti,
	drptq_cancels qct, 
	drptq_discounts qdt,
	drptq_gift_certs qgct, 
	drpt_order dri, 
	drpt_cost_of_goods cog
where dri.price_info = ai.amount_info_id 
	and dri.order_id = si.order_id 
	and dri.order_id = ti.order_id 
	and convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(dri.submitted_date)-1)*3+1)||'-01') = qct.quarter 
	and convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(dri.submitted_date)-1)*3+1)||'-01') = qdt.quarter 
	and convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(dri.submitted_date)-1)*3+1)||'-01') = qgct.quarter 
	and dri.order_id = cog.order_id
group by quarter, 
	qct.number_of_cancels, 
	qct.amount, 
	qct.shipping_cost, 
	qct.tax, 
	qdt.num_of_discounts, 
	qgct.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




//-        drpta_orders calculates various totals from orders over each year   
create view drpta_orders
as
select convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-01-01') as year, 
	(sum(ai.amount) + sum(si.shipping_cost) + sum(ti.tax)) as total_dollar_sales,
	(act.amount + act.shipping_cost + act.tax) as dollar_cancels,
	(sum(ai.amount) - act.amount) as merch_rev,
	(sum(si.shipping_cost) + sum(ti.tax) - act.shipping_cost - act.tax) as shipping_tax_rev,
	sum(cog.cost_of_goods) as cost_of_goods_sold,
	(count(dri.order_id)) as number_of_orders, 
	(act.number_of_cancels) as cancelled_orders,
	(count(dri.order_id) - act.number_of_cancels) as net_num_of_orders,
	sum(dri.total_items) as total_units_sold,
	adt.num_of_discounts as num_of_discounts,
	agct.num_of_gift_certs as num_of_gift_certs
from dcspp_amount_info ai, 
	drpt_shipping si, 
	drpt_taxes ti,
	drpta_cancels act, 
	drpta_discounts adt,
	drpta_gift_certs agct, 
	drpt_order dri, 
	drpt_cost_of_goods cog
where dri.price_info = ai.amount_info_id 
	and dri.order_id = si.order_id 
	and dri.order_id = ti.order_id 
	and convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-01-01') = act.year 
	and convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-01-01') = adt.year 
	and convert_date(CONVERT_VARCHAR(year(dri.submitted_date))||'-01-01') = agct.year 
	and dri.order_id = cog.order_id
group by year, 
	act.number_of_cancels, 
	act.amount, 
	act.shipping_cost, 
	act.tax, 
	adt.num_of_discounts, 
	agct.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




create view drpt_visitor
(profileid,day,state,country)
as
 select distinct 
       vi.profileid, 
       convert_date(vi.timestamp) as day, 
       ci.state,
       ci.country
from dss_dps_view_item vi, dps_user_address ua, dps_contact_info ci
      where vi.profileid = ua.id
      and ua.billing_addr_id = ci.id
         
Command completed successfully, 0 rows affected.




//-        drpt_cart calculates the total quantity and amount of   
//-        items that have been added to shopping carts over each day   
create view drpt_cart
(orderid,day,quantity,amount)
as
select
        orderid as orderid, 
	convert_date(timestamp) as day, 
	sum(quantity) as quantity, 
	sum(amount) as amount
from dcs_cart_event
group by orderid, 
	day
         
Command completed successfully, 0 rows affected.




//-        drptw_fiscal_info caclulates several revenue-related totals over each week   
create view drptw_fiscal_info
as
select wot.week as week, 
	wot.total_dollar_sales as total_dollar_sales,
	wot.dollar_cancels as dollar_cancels, 
	(wot.total_dollar_sales - wot.dollar_cancels) as net_dollar_sales,
	wot.merch_rev as merch_rev,
	wot.shipping_tax_rev as shipping_tax_rev, 
	wot.number_of_orders as number_of_orders,
	wot.cancelled_orders as cancelled_orders, 
	wot.net_num_of_orders as net_num_of_orders,
	count(distinct ce.orderid) as num_of_carts, 
	((wot.total_dollar_sales - wot.dollar_cancels) / wot.net_num_of_orders) as avg_order_rev,
	(wot.merch_rev / wot.net_num_of_orders) as avg_order_merc_rev,
	count(distinct vi.sessionid) as number_of_shoppers,
	(wot.number_of_orders / count(distinct vi.sessionid)) as shop_to_purc_conv,
	(count(distinct ce.orderid) / count(distinct vi.sessionid)) as shop_to_cart_conv,
	(wot.number_of_orders / count(distinct ce.orderid)) as cart_to_purc_conv,
	wot.num_of_discounts as num_of_discounts, 
	wot.num_of_gift_certs as num_of_gift_certs
from drptw_orders wot, 
	dcs_cart_event ce, 
	dss_dps_view_item vi
where convert_date(CONVERT_INTEGER(ce.timestamp)-CONVERT_INTEGER((DAYOFWEEK(ce.timestamp) -1) *86400))
 = wot.week 
	and convert_date(CONVERT_INTEGER(vi.timestamp)-CONVERT_INTEGER((DAYOFWEEK(vi.timestamp) -1) *86400)) = wot.week
group by wot.week, 
	wot.total_dollar_sales, 
	wot.dollar_cancels,
	wot.merch_rev, 
	wot.shipping_tax_rev, 
	wot.number_of_orders,
	wot.cancelled_orders, 
	wot.net_num_of_orders, 
	wot.num_of_discounts,
	wot.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




//-        drptm_fiscal_info caclulates several revenue-related totals over each month   
create view drptm_fiscal_info
as
select mot.month as month, 
	mot.total_dollar_sales as total_dollar_sales,
	mot.dollar_cancels as dollar_cancels, 
	(mot.total_dollar_sales - mot.dollar_cancels) as net_dollar_sales,
	mot.merch_rev as merch_rev,
	mot.shipping_tax_rev as shipping_tax_rev, 
	mot.number_of_orders as number_of_orders,
	mot.cancelled_orders as cancelled_orders, 
	mot.net_num_of_orders as net_num_of_orders,
	count(distinct ce.orderid) as num_of_carts, 
	((mot.total_dollar_sales - mot.dollar_cancels) / mot.net_num_of_orders) as avg_order_rev,
	(mot.merch_rev / mot.net_num_of_orders) as avg_order_merc_rev,
	count(distinct vi.sessionid) as number_of_shoppers,
	(mot.number_of_orders / count(distinct vi.sessionid)) as shop_to_purc_conv,
	(count(distinct ce.orderid) / count(distinct vi.sessionid)) as shop_to_cart_conv,
	(mot.number_of_orders / count(distinct ce.orderid)) as cart_to_purc_conv,
	mot.num_of_discounts as num_of_discounts, 
	mot.num_of_gift_certs as num_of_gift_certs
from drptm_orders mot, 
	dcs_cart_event ce, 
	dss_dps_view_item vi
where convert_date(CONVERT_INTEGER(ce.timestamp)-CONVERT_INTEGER((DAYOFMONTH(ce.timestamp) -1) *86400)) = mot.month 
	and convert_date(CONVERT_INTEGER(vi.timestamp)-CONVERT_INTEGER((DAYOFMONTH(vi.timestamp) -1) *86400)) = mot.month
group by mot.month, 
	mot.total_dollar_sales, 
	mot.dollar_cancels,
	mot.merch_rev, 
	mot.shipping_tax_rev, 
	mot.number_of_orders,
	mot.cancelled_orders, 
	mot.net_num_of_orders, 
	mot.num_of_discounts,
	mot.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




//-        drptq_fiscal_info caclulates several revenue-related totals over each quarter   
create view drptq_fiscal_info
as
select qot.quarter as quarter, 
	qot.total_dollar_sales as total_dollar_sales,
	qot.dollar_cancels as dollar_cancels, 
	(qot.total_dollar_sales - qot.dollar_cancels) as net_dollar_sales,
	qot.merch_rev as merch_rev,
	qot.shipping_tax_rev as shipping_tax_rev, 
	qot.number_of_orders as number_of_orders,
	qot.cancelled_orders as cancelled_orders, 
	qot.net_num_of_orders as net_num_of_orders,
	count(distinct ce.orderid) as num_of_carts, 
	((qot.total_dollar_sales - qot.dollar_cancels) / qot.net_num_of_orders) as avg_order_rev,
	(qot.merch_rev / qot.net_num_of_orders) as avg_order_merc_rev,
	count(distinct vi.sessionid) as number_of_shoppers,
	(qot.number_of_orders / count(distinct vi.sessionid)) as shop_to_purc_conv,
	(count(distinct ce.orderid) / count(distinct vi.sessionid)) as shop_to_cart_conv,
	(qot.number_of_orders / count(distinct ce.orderid)) as cart_to_purc_conv,
	qot.num_of_discounts as num_of_discounts, 
	qot.num_of_gift_certs as num_of_gift_certs
from drptq_orders qot, 
	dcs_cart_event ce, 
	dss_dps_view_item vi
where convert_date(CONVERT_VARCHAR(year(ce.timestamp))||'-'||CONVERT_VARCHAR((QUARTER(ce.timestamp)-1)*3+1)||'-01') = qot.quarter 
	and convert_date(CONVERT_VARCHAR(year(vi.timestamp))||'-'||CONVERT_VARCHAR((QUARTER(vi.timestamp)-1)*3+1)||'-01') = qot.quarter
group by qot.quarter, 
	qot.total_dollar_sales, 
	qot.dollar_cancels,
	qot.merch_rev, 
	qot.shipping_tax_rev, 
	qot.number_of_orders,
	qot.cancelled_orders, 
	qot.net_num_of_orders, 
	qot.num_of_discounts,
	qot.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




//-        drpta_fiscal_info caclulates several revenue-related totals over each year   
create view drpta_fiscal_info
as
select aot.year as year, 
	aot.total_dollar_sales as total_dollar_sales,
	aot.dollar_cancels as dollar_cancels, 
	(aot.total_dollar_sales - aot.dollar_cancels) as net_dollar_sales,
	aot.merch_rev as merch_rev,
	aot.shipping_tax_rev as shipping_tax_rev,
	aot.number_of_orders as number_of_orders,
	aot.cancelled_orders as cancelled_orders, 
	aot.net_num_of_orders as net_num_of_orders,
	count(distinct ce.orderid) as num_of_carts, 
	((aot.total_dollar_sales - aot.dollar_cancels) / aot.net_num_of_orders) as avg_order_rev,
	(aot.merch_rev / aot.net_num_of_orders) as avg_order_merc_rev,
	count(distinct vi.sessionid) as number_of_shoppers,
	(aot.number_of_orders / count(distinct vi.sessionid)) as shop_to_purc_conv,
	(count(distinct ce.orderid) / count(distinct vi.sessionid)) as shop_to_cart_conv,
	(aot.number_of_orders / count(distinct ce.orderid)) as cart_to_purc_conv,
	aot.num_of_discounts as num_of_discounts, 
	aot.num_of_gift_certs as num_of_gift_certs
from drpta_orders aot, 
	dcs_cart_event ce, 
	dss_dps_view_item vi
where convert_date(CONVERT_VARCHAR(year(ce.timestamp))||'-01-01') = aot.year 
	and convert_date(CONVERT_VARCHAR(year(vi.timestamp))||'-01-01') = aot.year
group by aot.year, 
	aot.total_dollar_sales, 
	aot.dollar_cancels,
	aot.merch_rev, 
	aot.shipping_tax_rev, 
	aot.number_of_orders,
	aot.cancelled_orders, 
	aot.net_num_of_orders, 
	aot.num_of_discounts,
	aot.num_of_gift_certs
         
Command completed successfully, 0 rows affected.




//-        drptw_promotion calculates totals about orders that were discounted   
//-        by the sample 'promo60003' promotion over each week   
create view drptw_promotion
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by week
         
Command completed successfully, 0 rows affected.




//-        drptm_promotion calculates totals about orders that were discounted   
//-        by the sample 'promo60003' promotion over each month   
create view drptm_promotion
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by month
         
Command completed successfully, 0 rows affected.




//-        drptq_promotion calculates totals about orders that were discounted   
//-        by the sample 'promo60003' promotion over each quarter   
create view drptq_promotion
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by quarter
         
Command completed successfully, 0 rows affected.




//-        drpta_promotion calculates totals about orders that were discounted   
//-        by the sample 'promo60003' promotion over each year   
create view drpta_promotion
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by year
         
Command completed successfully, 0 rows affected.




//-        drptw_male_18_25 calculates totals about orders that were placed   
//-        each week by males aged 18-25   
create view drptw_male_18_25
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18)  
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by week
         
Command completed successfully, 0 rows affected.




//-        drptm_male_18_25 calculates totals about orders that were placed   
//-        each month by males aged 18-25   
create view drptm_male_18_25
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18) 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by month
         
Command completed successfully, 0 rows affected.




//-        drptq_male_18_25 calculates totals about orders that were placed   
//-        each quarter by males aged 18-25   
create view drptq_male_18_25
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18) 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25) 
group by quarter
         
Command completed successfully, 0 rows affected.




//-        drpta_male_18_25 calculates totals about orders that were placed   
//-        each year by males aged 18-25   
create view drpta_male_18_25
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18) 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by year
         
Command completed successfully, 0 rows affected.




//-        drptw_male_25_39 calculates totals about orders that were placed   
//-        each week by males aged 25-39   
create view drptw_male_25_39
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25) 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39)
group by week
         
Command completed successfully, 0 rows affected.




//-        drptm_male_25_39 calculates totals about orders that were placed   
//-        each month by males aged 25-39   
create view drptm_male_25_39
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25) 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39)
group by month
         
Command completed successfully, 0 rows affected.




//-        drptq_male_25_39 calculates totals about orders that were placed   
//-        each quarter by males aged 25-39   
create view drptq_male_25_39
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39)
group by quarter
         
Command completed successfully, 0 rows affected.




//-        drpta_male_25_39 calculates totals about orders that were placed   
//-        each year by males aged 25-39   
create view drpta_male_25_39
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	sum(ai.amount) as total_dollar_sales,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	count(o.order_id) as number_of_orders, 
	sum(i.quantity) as total_units_sold
from dcspp_order o, 
	dcspp_amount_info ai, 
	dcspp_item i, 
	dcs_sku s, 
	dps_user u
where o.price_info = ai.amount_info_id 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED' 
	and o.order_id = i.order_ref 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39) 
group by year
         
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// reporting_views1.sql




//-        drpt_products compiles information about each product in the catalog   
create view drpt_products
as
select p.product_id as product_id, 
	c.display_name as category_name, 
	avg(s.wholesale_price) as avg_cost, 
	avg(s.list_price) as avg_list_price, 
	avg(s.sale_price) as avg_sale_price, 
	((avg(s.list_price) - avg(s.wholesale_price)) / avg(s.wholesale_price)) as avg_initial_markup, 
	sum(inv.stock_level) as units_on_hand, 
	count(s.sku_id) as number_of_skus
from dcs_product p, 
	dcs_category c, 
	dcs_sku s, 
	dcs_prd_chldsku pc, 
	dcs_inventory inv
where p.parent_cat_id = c.category_id 
	and p.product_id = pc.product_id 
	and pc.sku_id = s.sku_id
and pc.sku_id = inv.catalog_ref_id
group by p.product_id, c.display_name
         
Command completed successfully, 0 rows affected.




//-        drpt_category calculates statistics about prices and costs on a per-category basis   
create view drpt_category
as
select c.display_name as category_name, 
	avg(s.wholesale_price)as avg_cost,
	avg(s.list_price) as avg_list_price,
	avg(s.sale_price) as avg_sale_price,
	((avg(s.list_price) - avg(s.wholesale_price)) / avg(s.wholesale_price)) as avg_initial_markup
from dcs_category c, 
	dcs_sku s, 
	dcs_prd_chldsku pc, 
	dcs_product p
where c.category_id = p.parent_cat_id 
	and pc.product_id = p.product_id 
	and pc.sku_id = s.sku_id
group by c.display_name
         
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// reporting_views2.sql




//-        drptw_prod_sales calculates several statistics over each week on a per-product basis    
//- drptw_prod_sales calculates several statistics over each week on a per-product basis    
create view drptw_prod_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / wot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price * i.quantity)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / wot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	wb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / wb.browses) as shop_to_purc_conv,
	wc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / wc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptw_browses wb, 
	drptw_carts wc, 
	drpt_sku_stock si, 
	drptw_orders wot, 
	dcs_sku s
where o.order_id = i.order_ref 
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = wc.product_id 
	and i.product_id = wb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wb.week 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wc.week 
	and si.product_id = i.product_id 
	and wot.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400))
	and i.catalog_ref_id = s.sku_id
group by week, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	wb.browses, 
	wc.adds_to_cart, 
	wot.total_units_sold,
	wot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock
         
Command completed successfully, 0 rows affected.




//-        drptm_prod_sales calculates several statistics over each month on a per-product basis    
create view drptm_prod_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / mot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as months_on_hand,
	sum(ai.amount) as total_rev, 
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price * i.quantity)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / mot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	mb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / mb.browses) as shop_to_purc_conv,
	mc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / mc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptm_browses mb, 
	drptm_carts mc, 
	drpt_sku_stock si, 
	drptm_orders mot, 
	dcs_sku s
where o.order_id = i.order_ref 
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = mc.product_id 
	and i.product_id = mb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mb.month 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mc.month 
	and si.product_id = i.product_id 
	and mot.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id
group by month, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup,
	pri.units_on_hand, 
	mb.browses, 
	mc.adds_to_cart, 
	mot.total_units_sold,
	mot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock
         
Command completed successfully, 0 rows affected.




//-        drptq_prod_sales calculates several statistics over each quarter on a per-product basis    
create view drptq_prod_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / qot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as quarters_on_hand,
	sum(ai.amount) as total_rev, 
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price * i.quantity)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / qot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	qb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / qb.browses) as shop_to_purc_conv,
	qc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / qc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptq_browses qb, 
	drptq_carts qc, 
	drpt_sku_stock si, 
	drptq_orders qot, 
	dcs_sku s
where o.order_id = i.order_ref 
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = qc.product_id 
	and i.product_id = qb.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qb.quarter 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qc.quarter 
	and si.product_id = i.product_id 
	and qot.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and i.catalog_ref_id = s.sku_id
group by quarter, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup,
	pri.units_on_hand, 
	qb.browses, 	
	qc.adds_to_cart, 
	qot.total_units_sold,
	qot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock
         
Command completed successfully, 0 rows affected.




//-        drpta_prod_sales calculates several statistics over each year on a per-product basis    
create view drpta_prod_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / aot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as years_on_hand,
	sum(ai.amount) as total_rev, 
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price * i.quantity)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / aot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	ab.browses as browses, count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / ab.browses) as shop_to_purc_conv, 
	ac.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / ac.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drpta_browses ab, 
	drpta_carts ac, 
	drpt_sku_stock si, 
	drpta_orders aot, 
	dcs_sku s
where o.order_id = i.order_ref 
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = ac.product_id 
	and i.product_id = ab.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ab.year 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ac.year 
	and si.product_id = i.product_id 
	and aot.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') 
	and i.catalog_ref_id = s.sku_id
group by year, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup,
	pri.units_on_hand, 
	ab.browses, 
	ac.adds_to_cart, 
	aot.total_units_sold,
	aot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock
         
Command completed successfully, 0 rows affected.




//-        drptw_promo_sales calculates totals about products that were discounted   
//-        by the sample 'promo60003' promotion over each week   
create view drptw_promo_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / wpt.total_units_sold) as promo_units_sold_p, 
	(sum(i.quantity) / wot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / wpt.total_dollar_sales) as promo_rev_p,
	(sum(ai.amount) / wot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	wb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / wb.browses) as shop_to_purc_conv,
	wc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / wc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptw_browses wb, 
	drptw_carts wc, 
	drpt_sku_stock si, 
	drptw_orders wot, 
	dcs_sku s, 
	drptw_promotion wpt, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = wc.product_id 
	and i.product_id = wb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wb.week 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wc.week 
	and si.product_id = i.product_id 
	and wot.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and wpt.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by week, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	wb.browses, 
	wc.adds_to_cart, 
	wot.total_units_sold, 
	wot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	wpt.total_units_sold, 
	wpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptm_promo_sales calculates totals about products that were discounted   
//-        by the sample 'promo60003' promotion over each month   
create view drptm_promo_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / mpt.total_units_sold) as promo_units_sold_p, 
	(sum(i.quantity) / mot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as months_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / mpt.total_dollar_sales) as promo_rev_p,
	(sum(ai.amount) / mot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	mb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / mb.browses) as shop_to_purc_conv, 
	mc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / mc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptm_browses mb, 
	drptm_carts mc, 
	drpt_sku_stock si, 
	drptm_orders mot, 
	dcs_sku s, 
	drptm_promotion mpt, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = mc.product_id 
	and i.product_id = mb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mb.month 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mc.month 
	and si.product_id = i.product_id 
	and mot.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and mpt.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by month, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	mb.browses, 
	mc.adds_to_cart, 
	mot.total_units_sold, 
	mot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	mpt.total_units_sold, 
	mpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptq_promo_sales calculates totals about products that were discounted   
//-        by the sample 'promo60003' promotion over each quarter   
create view drptq_promo_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / qpt.total_units_sold) as promo_units_sold_p, 
	(sum(i.quantity) / qot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as quarters_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / qpt.total_dollar_sales) as promo_rev_p,
	(sum(ai.amount) / qot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	qb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / qb.browses) as shop_to_purc_conv, 
	qc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / qc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptq_browses qb, 
	drptq_carts qc, 
	drpt_sku_stock si, 
	drptq_orders qot,
	dcs_sku s, 
	drptq_promotion qpt, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = qc.product_id 
	and i.product_id = qb.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qb.quarter 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qc.quarter 
	and si.product_id = i.product_id 
	and qot.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and qpt.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and i.catalog_ref_id = s.sku_id
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by quarter, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	qb.browses, 
	qc.adds_to_cart, 
	qot.total_units_sold, 
	qot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	qpt.total_units_sold, 
	qpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drpta_promo_sales calculates totals about products that were discounted   
//-        by the sample 'promo60003' promotion over each year   
create view drpta_promo_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / apt.total_units_sold) as promo_units_sold_p, 
	(sum(i.quantity) / aot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as years_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / apt.total_dollar_sales) as promo_rev_p,
	(sum(ai.amount) / aot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	ab.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / ab.browses) as shop_to_purc_conv,
	ac.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / ac.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drpta_browses ab, 
	drpta_carts ac, 
	drpt_sku_stock si, 
	drpta_orders aot, 
	dcs_sku s, 
	drpta_promotion apt, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = ac.product_id 
	and i.product_id = ab.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ab.year 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ac.year 
	and si.product_id = i.product_id 
	and aot.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01')
	and apt.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01')
	and i.catalog_ref_id = s.sku_id
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by year, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	ab.browses, 
	ac.adds_to_cart, 
	aot.total_units_sold, 
	aot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	apt.total_units_sold, 
	apt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptw_m_18_25_sales calculates totals about products that were purchased   
//-        by males aged 18-25 each week   
create view drptw_m18_25_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / wpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / wot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / wpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / wot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	wb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / wb.browses) as shop_to_purc_conv,
	wc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / wc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptw_browses wb, 
	drptw_carts wc, 
	drpt_sku_stock si, 
	drptw_orders wot, 
	dcs_sku s, 
	drptw_male_18_25 wpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = wc.product_id 
	and i.product_id = wb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wb.week 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wc.week 
	and si.product_id = i.product_id 
	and wot.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and wpt.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18)  
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by week, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	wb.browses, 
	wc.adds_to_cart, 
	wot.total_units_sold, 
	wot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	wpt.total_units_sold, 
	wpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptm_m_18_25_sales calculates totals about products that were purchased   
//-        by males aged 18-25 each month   
create view drptm_m18_25_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / mpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / mot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as months_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / mpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / mot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	mb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / mb.browses) as shop_to_purc_conv,
	mc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / mc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptm_browses mb, 
	drptm_carts mc, 
	drpt_sku_stock si, 
	drptm_orders mot, 
	dcs_sku s, 
	drptm_male_18_25 mpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = mc.product_id 
	and i.product_id = mb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mb.month 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mc.month 
	and si.product_id = i.product_id 
	and mot.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and mpt.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18)  
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by month, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	mb.browses, 
	mc.adds_to_cart, 
	mot.total_units_sold, 
	mot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	mpt.total_units_sold, 
	mpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptq_m_18_25_sales calculates totals about products that were purchased   
//-        by males aged 18-25 each quarter   
create view drptq_m18_25_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / qpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / qot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as quarters_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / qpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / qot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	qb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / qb.browses) as shop_to_purc_conv,
	qc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / qc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptq_browses qb, 
	drptq_carts qc, 
	drpt_sku_stock si, 
	drptq_orders qot, 
	dcs_sku s, 
	drptq_male_18_25 qpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = qc.product_id 
	and i.product_id = qb.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qb.quarter 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qc.quarter 
	and si.product_id = i.product_id 
	and qot.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and qpt.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01')
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18)  
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by quarter, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	qb.browses, 
	qc.adds_to_cart, 
	qot.total_units_sold, 
	qot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	qpt.total_units_sold, 
	qpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drpta_m_18_25_sales calculates totals about products that were purchased   
//-        by males aged 18-25 each year   
create view drpta_m18_25_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / apt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / aot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as years_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / apt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / aot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	ab.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / ab.browses) as shop_to_purc_conv,
	ac.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / ac.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drpta_browses ab, 
	drpta_carts ac, 
	drpt_sku_stock si, 
	drpta_orders aot, 
	dcs_sku s, 
	drpta_male_18_25 apt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = ac.product_id 
	and i.product_id = ab.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ab.year 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ac.year 
	and si.product_id = i.product_id 
	and aot.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') 
	and apt.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01')
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18)  
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by year, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	ab.browses, 
	ac.adds_to_cart, 
	aot.total_units_sold, 
	aot.merch_rev,
	pri.number_of_skus, 
	si.skus_in_stock, 
	apt.total_units_sold, 
	apt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptw_m_25_39_sales calculates totals about products that were purchased   
//-        by males aged 25-39 each week   
create view drptw_m25_39_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / wpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / wot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / wpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / wot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	wb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / wb.browses) as shop_to_purc_conv,
	wc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / wc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptw_browses wb, 
	drptw_carts wc, 
	drpt_sku_stock si, 
	drptw_orders wot, 
	dcs_sku s, 
	drptw_male_25_39 wpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = wc.product_id 
	and i.product_id = wb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wb.week 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wc.week 
	and si.product_id = i.product_id 
	and wot.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and wpt.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39) 
group by week, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	wb.browses, 
	wc.adds_to_cart, 
	wot.total_units_sold, 
	wot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	wpt.total_units_sold, 
	wpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptm_m_25_39_sales calculates totals about products that were purchased   
//-        by males aged 25-39 each month   
create view drptm_m25_39_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / mpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / mot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as months_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / mpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / mot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	mb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / mb.browses) as shop_to_purc_conv,
	mc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / mc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptm_browses mb, 
	drptm_carts mc, 
	drpt_sku_stock si, 
	drptm_orders mot, 
	dcs_sku s, 
	drptm_male_25_39 mpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = mc.product_id 
	and i.product_id = mb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mb.month 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mc.month 
	and si.product_id = i.product_id 
	and mot.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and mpt.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39) 
group by month, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	mb.browses, 
	mc.adds_to_cart, 
	mot.total_units_sold, 
	mot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	mpt.total_units_sold, 
	mpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptq_m_25_39_sales calculates totals about products that were purchased   
//-        by males aged 25-39 each quarter   
create view drptq_m25_39_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / qpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / qot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as quarters_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / qpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / qot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	qb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / qb.browses) as shop_to_purc_conv,
	qc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / qc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptq_browses qb, 
	drptq_carts qc, 
	drpt_sku_stock si, 
	drptq_orders qot, 
	dcs_sku s, 
	drptq_male_25_39 qpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = qc.product_id 
	and i.product_id = qb.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qb.quarter 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qc.quarter 
	and si.product_id = i.product_id 
	and qot.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and qpt.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39) 
group by quarter, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	qb.browses, 
	qc.adds_to_cart, 
	qot.total_units_sold, 
	qot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	qpt.total_units_sold, 
	qpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drpta_m_25_39_sales calculates totals about products that were purchased   
//-        by males aged 25-39 each year   
create view drpta_m25_39_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / apt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / aot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as years_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / apt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / aot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	ab.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / ab.browses) as shop_to_purc_conv,
	ac.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / ac.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drpta_browses ab, 
	drpta_carts ac, 
	drpt_sku_stock si, 
	drpta_orders aot, 
	dcs_sku s, 
	drpta_male_25_39 apt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = ac.product_id 
	and i.product_id = ab.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ab.year 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ac.year 
	and si.product_id = i.product_id 
	and aot.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') 
	and apt.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39) 
group by year, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	ab.browses, 
	ac.adds_to_cart, 
	aot.total_units_sold, 
	aot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	apt.total_units_sold, 	
	apt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// reporting_views3.sql




//-        drptw_cat_sales calculates various statistics over each week on a per-category basis   
create view drptw_cat_sales
as
select wps.week as week, 
	wps.category_name as category_name, 
	cri.avg_cost as avg_cost,
	cri.avg_list_price as avg_list_price, 
	cri.avg_sale_price as avg_sale_price,
	cri.avg_initial_markup as avg_initial_markup,
	sum(wps.units_sold) as units_sold, 
	sum(wps.total_rev) as total_rev,
	sum(wps.cost_of_goods_sold) as cost_of_goods_sold,
	((sum(wps.total_rev) - sum(wps.cost_of_goods_sold)) / sum(wps.total_rev)) as maintained_markup,
	(sum(wps.units_sold) / wot.total_units_sold) as total_units_sold_p,
	(sum(wps.total_rev) / wot.merch_rev) as total_rev_p, 
	sum(wps.units_on_hand) as units_on_hand,
	sum(wps.number_of_skus) as number_of_skus, 
	sum(wps.skus_in_stock) as skus_in_stock,
	(sum(wps.skus_in_stock) / sum(wps.number_of_skus)) as skus_in_stock_p,
	sum(wps.browses) as browses, 
	sum(wps.browse_conversions) as browse_conversions,
	(sum(wps.browse_conversions) / sum(wps.browses)) as shop_to_purc_conv,
	sum(wps.adds_to_cart) as adds_to_cart, 
	sum(wps.cart_conversions) as cart_conversions,
	(sum(wps.cart_conversions) / sum(wps.adds_to_cart)) as cart_to_purc_conv
from drptw_prod_sales wps, 
	drpt_category cri, 
	drptw_orders wot
where wps.category_name = cri.category_name 
	and wps.week = wot.week
group by wps.week, 
	wps.category_name, 
	cri.avg_cost, 
	cri.avg_list_price, 
	cri.avg_sale_price,
	cri.avg_initial_markup,
	wot.total_units_sold, 
	wot.merch_rev
         
Command completed successfully, 0 rows affected.




//-        drptm_cat_sales calculates various statistics over each month on a per-category basis   
create view drptm_cat_sales
as
select mps.month as month, 
	mps.category_name as category_name, 
	cri.avg_cost as avg_cost,
	cri.avg_list_price as avg_list_price, 
	cri.avg_sale_price as avg_sale_price, 
	cri.avg_initial_markup as avg_initial_markup,
	sum(mps.units_sold) as units_sold, 
	sum(mps.total_rev) as total_rev,
	sum(mps.cost_of_goods_sold) as cost_of_goods_sold,
	((sum(mps.total_rev) - sum(mps.cost_of_goods_sold)) / sum(mps.total_rev)) as maintained_markup,
	(sum(mps.units_sold) / mot.total_units_sold) as total_units_sold_p,
	(sum(mps.total_rev) / mot.merch_rev) as total_rev_p, 
	sum(mps.units_on_hand) as units_on_hand,
	sum(mps.number_of_skus) as number_of_skus, 
	sum(mps.skus_in_stock) as skus_in_stock,
	(sum(mps.skus_in_stock) / sum(mps.number_of_skus)) as skus_in_stock_p,
	sum(mps.browses) as browses, 
	sum(mps.browse_conversions) as browse_conversions,
	(sum(mps.browse_conversions) / sum(mps.browses)) as shop_to_purc_conv,
	sum(mps.adds_to_cart) as adds_to_cart, 
	sum(mps.cart_conversions) as cart_conversions,
	(sum(mps.cart_conversions) / sum(mps.adds_to_cart)) as cart_to_purc_conv
from drptm_prod_sales mps, 
	drpt_category cri, 
	drptm_orders mot
where mps.category_name = cri.category_name 
	and mps.month = mot.month
group by mps.month, 
	mps.category_name, 
	cri.avg_cost, 
	cri.avg_list_price, 
	cri.avg_sale_price,
	cri.avg_initial_markup,
	mot.total_units_sold, 
	mot.merch_rev
         
Command completed successfully, 0 rows affected.




//-        drptq_cat_sales calculates various statistics over each quarter on a per-category basis   
create view drptq_cat_sales
as
select qps.quarter as quarter, 
	qps.category_name as category_name, 
	cri.avg_cost as avg_cost,
	cri.avg_list_price as avg_list_price, 
	cri.avg_sale_price as avg_sale_price, 
	cri.avg_initial_markup as avg_initial_markup,
	sum(qps.units_sold) as units_sold, 
	sum(qps.total_rev) as total_rev,
	sum(qps.cost_of_goods_sold) as cost_of_goods_sold,
	((sum(qps.total_rev) - sum(qps.cost_of_goods_sold)) / sum(qps.total_rev)) as maintained_markup,
	(sum(qps.units_sold) / qot.total_units_sold) as total_units_sold_p,
	(sum(qps.total_rev) / qot.merch_rev) as total_rev_p, 
	sum(qps.units_on_hand) as units_on_hand,
	sum(qps.number_of_skus) as number_of_skus, 
	sum(qps.skus_in_stock) as skus_in_stock,
	(sum(qps.skus_in_stock) / sum(qps.number_of_skus)) as skus_in_stock_p,
	sum(qps.browses) as browses, 
	sum(qps.browse_conversions) as browse_conversions,
	(sum(qps.browse_conversions) / sum(qps.browses)) as shop_to_purc_conv,
	sum(qps.adds_to_cart) as adds_to_cart, 
	sum(qps.cart_conversions) as cart_conversions,
	(sum(qps.cart_conversions) / sum(qps.adds_to_cart)) as cart_to_purc_conv
from drptq_prod_sales qps, 
	drpt_category cri, 
	drptq_orders qot
where qps.category_name = cri.category_name 
	and qps.quarter = qot.quarter
group by qps.quarter, 
	qps.category_name, 
	cri.avg_cost, 
	cri.avg_list_price, 
	cri.avg_sale_price,
	cri.avg_initial_markup,
	qot.total_units_sold, 
	qot.merch_rev
         
Command completed successfully, 0 rows affected.




//-        drpta_cat_sales calculates various statistics over each year on a per-category basis   
create view drpta_cat_sales
as
select aps.year as year, 
	aps.category_name as category_name, 
	cri.avg_cost as avg_cost,
	cri.avg_list_price as avg_list_price, 
	cri.avg_sale_price as avg_sale_price, 
	cri.avg_initial_markup as avg_initial_markup,
	sum(aps.units_sold) as units_sold, 
	sum(aps.total_rev) as total_rev,
	sum(aps.cost_of_goods_sold) as cost_of_goods_sold,
	((sum(aps.total_rev) - sum(aps.cost_of_goods_sold)) / sum(aps.total_rev)) as maintained_markup,
	(sum(aps.units_sold) / aot.total_units_sold) as total_units_sold_p,
	(sum(aps.total_rev) / aot.merch_rev) as total_rev_p, 
	sum(aps.units_on_hand) as units_on_hand,
	sum(aps.number_of_skus) as number_of_skus, 
	sum(aps.skus_in_stock) as skus_in_stock,
	(sum(aps.skus_in_stock) / sum(aps.number_of_skus)) as skus_in_stock_p,
	sum(aps.browses) as browses, sum(aps.browse_conversions) as browse_conversions,
	(sum(aps.browse_conversions) / sum(aps.browses)) as shop_to_purc_conv,
	sum(aps.adds_to_cart) as adds_to_cart, 
	sum(aps.cart_conversions) as cart_conversions,
	(sum(aps.cart_conversions) / sum(aps.adds_to_cart)) as cart_to_purc_conv
from drpta_prod_sales aps, 
	drpt_category cri, 
	drpta_orders aot
where aps.category_name = cri.category_name 
	and aps.year = aot.year
group by aps.year, 
	aps.category_name, 
	cri.avg_cost, 
	cri.avg_list_price, 
	cri.avg_sale_price,
	cri.avg_initial_markup,
	aot.total_units_sold, 
	aot.merch_rev
         
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// priceLists_ddl.sql





create table dcs_price_list (
	price_list_id	varchar(40)	not null,
	version	integer	not null,
	display_name	varchar(254)	null,
	description	varchar(254)	null,
	creation_date	timestamp	null,
	last_mod_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	locale	integer	null,
	base_price_list	varchar(40)	null,
	item_acl	long varchar	null
, primary key (price_list_id)
, foreign key (base_price_list) references dcs_price_list (price_list_id))
Command completed successfully, 0 rows affected.



create index dcs_pricelstbase_i on dcs_price_list (base_price_list)
Command completed successfully, 0 rows affected.


alter table dcs_price_list set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_complex_price (
	complex_price_id	varchar(40)	not null,
	version	integer	not null
, primary key (complex_price_id))
Command completed successfully, 0 rows affected.



alter table dcs_complex_price set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_price (
	price_id	varchar(40)	not null,
	version	integer	not null,
	price_list	varchar(40)	not null,
	product_id	varchar(40)	null,
	sku_id	varchar(40)	null,
	parent_sku_id	varchar(40)	null,
	pricing_scheme	integer	not null,
	list_price	double precision	null,
	complex_price	varchar(40)	null
, primary key (price_id)
, foreign key (complex_price) references dcs_complex_price (complex_price_id)
, foreign key (price_list) references dcs_price_list (price_list_id))
Command completed successfully, 0 rows affected.



create index dcs_cmplx_prc_idx on dcs_price (complex_price)
Command completed successfully, 0 rows affected.


create index dcs_price_idx1 on dcs_price (product_id)
Command completed successfully, 0 rows affected.


create index dcs_price_idx2 on dcs_price (price_list,sku_id)
Command completed successfully, 0 rows affected.


alter table dcs_price set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_price_levels (
	complex_price_id	varchar(40)	not null,
	price_levels	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (complex_price_id,sequence_num)
, foreign key (complex_price_id) references dcs_complex_price (complex_price_id))
Command completed successfully, 0 rows affected.



alter table dcs_price_levels set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_price_level (
	price_level_id	varchar(40)	not null,
	version	integer	not null,
	quantity	integer	not null,
	price	double precision	not null
, primary key (price_level_id))
Command completed successfully, 0 rows affected.



alter table dcs_price_level set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_gen_fol_pl (
	folder_id	varchar(40)	not null,
	type	integer	not null,
	name	varchar(40)	not null,
	parent	varchar(40)	null,
	description	varchar(254)	null,
	item_acl	long varchar	null
, primary key (folder_id))
Command completed successfully, 0 rows affected.



alter table dcs_gen_fol_pl set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_child_fol_pl (
	folder_id	varchar(40)	not null,
	sequence_num	integer	not null,
	child_folder_id	varchar(40)	not null
, primary key (folder_id,sequence_num)
, foreign key (folder_id) references dcs_gen_fol_pl (folder_id))
Command completed successfully, 0 rows affected.



alter table dcs_child_fol_pl set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_plfol_chld (
	plfol_id	varchar(40)	not null,
	sequence_num	integer	not null,
	price_list_id	varchar(40)	not null
, primary key (plfol_id,sequence_num)
, foreign key (plfol_id) references dcs_gen_fol_pl (folder_id))
Command completed successfully, 0 rows affected.



alter table dcs_plfol_chld set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// order_markers_ddl.sql





create table dcs_order_markers (
	marker_id	varchar(40)	not null,
	order_id	varchar(40)	not null,
	marker_key	varchar(100)	not null,
	marker_value	varchar(100)	null,
	marker_data	varchar(100)	null,
	creation_date	timestamp	null,
	version	integer	not null,
	marker_type	integer	null
, primary key (marker_id,order_id)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index dcs_ordrmarkers1_x on dcs_order_markers (order_id)
Command completed successfully, 0 rows affected.


alter table dcs_order_markers set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// abandoned_order_ddl.sql




//- $Id: //product/DCS/main/templates/DCS/AbandonedOrderServices/sql/abandoned_order_ddl.xml#16 $

create table dcspp_ord_abandon (
	abandonment_id	varchar(40)	not null,
	version	integer	not null,
	order_id	varchar(40)	not null,
	ord_last_updated	timestamp	null,
	abandon_state	varchar(40)	null,
	abandonment_count	integer	null,
	abandonment_date	timestamp	null,
	reanimation_date	timestamp	null,
	convert_date	timestamp	null,
	lost_date	timestamp	null
, primary key (abandonment_id))
Command completed successfully, 0 rows affected.



create index dcspp_ordabandn1_x on dcspp_ord_abandon (order_id)
Command completed successfully, 0 rows affected.


alter table dcspp_ord_abandon set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_user_abandoned (
	id	varchar(40)	not null,
	order_id	varchar(40)	not null,
	profile_id	varchar(40)	not null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dcs_user_abandoned set pessimistic
Command completed successfully, 0 rows affected.




create table drpt_conv_order (
	order_id	varchar(40)	not null,
	converted_date	timestamp	not null,
	amount	numeric(19,7)	not null,
	promo_count	integer	not null,
	promo_value	numeric(19,7)	not null
, primary key (order_id))
Command completed successfully, 0 rows affected.



alter table drpt_conv_order set pessimistic
Command completed successfully, 0 rows affected.




create table drpt_session_ord (
	dataset_id	varchar(40)	not null,
	order_id	varchar(40)	not null,
	date_time	timestamp	not null,
	amount	numeric(19,7)	not null,
	submitted	integer	not null,
	order_persistent	tinyint	null,
	session_id	varchar(40)	null,
	parent_session_id	varchar(40)	null
, primary key (order_id))
Command completed successfully, 0 rows affected.



alter table drpt_session_ord set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// abandoned_order_views.sql




create view drpt_abandon_ord
as
      select oa.abandonment_date as abandonment_date, ai.amount as amount, case when oa.abandon_state = 'CONVERTED' then 100 else 0 end as converted from dcspp_order o, dcspp_ord_abandon oa, dcspp_amount_info ai where oa.order_id=o.order_id and o.price_info=ai.amount_info_id
         
Command completed successfully, 0 rows affected.




create view drpt_tns_abndn_ord
as
      select date_time as abandonment_date, amount as amount from drpt_session_ord where submitted=0
         
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// data_warehouse_extract_ddl.sql




//- This file contains create table statements, which will configureyour database for use with the new data warehouse extract repositorythat is used as part of Affinity Selling

create table DCSX_PROF_PROD_PURCH_FACT_SUM (
	profile_id	varchar(40)	not null,
	product_id	varchar(40)	not null,
	last_purchase	timestamp	not null,
	occurrences	integer	not null,
	quantity	integer	not null
, primary key (profile_id,product_id))
Command completed successfully, 0 rows affected.



alter table DCSX_PROF_PROD_PURCH_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.




create table DCSX_PROF_BRND_PURCH_FACT_SUM (
	profile_id	varchar(40)	not null,
	brand_id	wvarchar(255)	not null,
	last_purchase	timestamp	not null,
	occurrences	integer	not null,
	quantity	integer	not null
, primary key (profile_id,brand_id))
Command completed successfully, 0 rows affected.



alter table DCSX_PROF_BRND_PURCH_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.




create table DCSX_PROF_CAT_PURCH_FACT_SUM (
	profile_id	varchar(40)	not null,
	category_id	varchar(40)	not null,
	last_purchase	timestamp	not null,
	occurrences	integer	not null,
	quantity	integer	not null
, primary key (profile_id,category_id))
Command completed successfully, 0 rows affected.



alter table DCSX_PROF_CAT_PURCH_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.




create table DCSX_PROF_PRICE_FACT_SUM (
	profile_id	varchar(40)	not null,
	occurrences	integer	null,
	min_price	double precision	null,
	max_price	double precision	null,
	average_price	double precision	null,
	standard_deviation	double precision	null
, primary key (profile_id))
Command completed successfully, 0 rows affected.



alter table DCSX_PROF_PRICE_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.




create table DCSX_PROD_AFF_FACT_SUM (
	product_1_id	varchar(40)	not null,
	product_2_id	varchar(40)	not null,
	segment_name	wvarchar(255)	not null,
	purchase_purchase_occurrences	integer	null,
	purchase_purchase_affinity	double precision	null,
	purchase_purchase_inflated	double precision	null,
	purchase_purchase_avg_spread	double precision	null,
	browse_purchase_occurrences	integer	null,
	browse_purchase_affinity	double precision	null,
	browse_browse_occurrences	integer	null,
	browse_browse_affinity	double precision	null
, primary key (product_1_id,product_2_id,segment_name))
Command completed successfully, 0 rows affected.



alter table DCSX_PROD_AFF_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.




create table DCSX_PROD_AFF_GLOBAL_FACT_SUM (
	product_1_id	varchar(40)	not null,
	product_2_id	varchar(40)	not null,
	purchase_purchase_occurrences	integer	null,
	purchase_purchase_affinity	double precision	null,
	purchase_purchase_inflated	double precision	null,
	purchase_purchase_avg_spread	double precision	null,
	browse_purchase_occurrences	integer	null,
	browse_purchase_affinity	double precision	null,
	browse_browse_occurrences	integer	null,
	browse_browse_affinity	double precision	null
, primary key (product_1_id,product_2_id))
Command completed successfully, 0 rows affected.



alter table DCSX_PROD_AFF_GLOBAL_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.




create table DCSX_CAT_AFF_FACT_SUM (
	category_1_id	varchar(40)	not null,
	category_2_id	varchar(40)	not null,
	segment_name	wvarchar(255)	not null,
	purchase_purchase_occurrences	integer	null,
	purchase_purchase_affinity	double precision	null,
	purchase_purchase_inflated	double precision	null,
	purchase_purchase_avg_spread	double precision	null
, primary key (category_1_id,category_2_id,segment_name))
Command completed successfully, 0 rows affected.



alter table DCSX_CAT_AFF_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.




create table DCSX_CAT_AFF_GLOBAL_FACT_SUM (
	category_1_id	varchar(40)	not null,
	category_2_id	varchar(40)	not null,
	purchase_purchase_occurrences	integer	null,
	purchase_purchase_affinity	double precision	null,
	purchase_purchase_inflated	double precision	null,
	purchase_purchase_avg_spread	double precision	null
, primary key (category_1_id,category_2_id))
Command completed successfully, 0 rows affected.



alter table DCSX_CAT_AFF_GLOBAL_FACT_SUM set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.




SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.

// the source for this section is 
// custom_catalog_ddl.sql





create table dcs_catalog (
	catalog_id	varchar(40)	not null,
	version	integer	not null,
	display_name	varchar(254)	null,
	creation_date	timestamp	null,
	last_mod_date	timestamp	null,
	migration_status	integer	null,
	migration_index	integer	null,
	item_acl	long varchar	null
, primary key (catalog_id))
Command completed successfully, 0 rows affected.



alter table dcs_catalog set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_root_cats (
	catalog_id	varchar(40)	not null,
	root_cat_id	varchar(40)	not null
, primary key (catalog_id,root_cat_id)
, foreign key (catalog_id) references dcs_catalog (catalog_id)
, foreign key (root_cat_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



create index dcs_rootcatscat_id on dcs_root_cats (root_cat_id)
Command completed successfully, 0 rows affected.


alter table dcs_root_cats set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_allroot_cats (
	catalog_id	varchar(40)	not null,
	root_cat_id	varchar(40)	not null
, primary key (catalog_id,root_cat_id)
, foreign key (catalog_id) references dcs_catalog (catalog_id)
, foreign key (root_cat_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



create index dcs_allrt_cats_id on dcs_allroot_cats (root_cat_id)
Command completed successfully, 0 rows affected.


alter table dcs_allroot_cats set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_root_subcats (
	catalog_id	varchar(40)	not null,
	sub_catalog_id	varchar(40)	not null
, primary key (catalog_id,sub_catalog_id)
, foreign key (catalog_id) references dcs_catalog (catalog_id)
, foreign key (sub_catalog_id) references dcs_catalog (catalog_id))
Command completed successfully, 0 rows affected.



create index dcs_rtsubcats_id on dcs_root_subcats (sub_catalog_id)
Command completed successfully, 0 rows affected.


alter table dcs_root_subcats set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sub_catalogs (
	catalog_id	varchar(40)	not null,
	sub_catalog_id	varchar(40)	not null
, primary key (catalog_id,sub_catalog_id))
Command completed successfully, 0 rows affected.



alter table dcs_sub_catalogs set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_category_info (
	category_info_id	varchar(40)	not null,
	version	integer	not null,
	item_acl	long varchar	null
, primary key (category_info_id))
Command completed successfully, 0 rows affected.



alter table dcs_category_info set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_product_info (
	product_info_id	varchar(40)	not null,
	version	integer	not null,
	parent_cat_id	varchar(40)	null,
	item_acl	long varchar	null
, primary key (product_info_id))
Command completed successfully, 0 rows affected.



alter table dcs_product_info set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_info (
	sku_info_id	varchar(40)	not null,
	version	integer	not null,
	item_acl	long varchar	null
, primary key (sku_info_id))
Command completed successfully, 0 rows affected.



alter table dcs_sku_info set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_subcats (
	category_id	varchar(40)	not null,
	sequence_num	integer	not null,
	catalog_id	varchar(40)	not null
, primary key (category_id,sequence_num)
, foreign key (catalog_id) references dcs_catalog (catalog_id)
, foreign key (category_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



create index dcs_catsubcatlogid on dcs_cat_subcats (catalog_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_subcats set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_subroots (
	category_id	varchar(40)	not null,
	sequence_num	integer	not null,
	sub_category_id	varchar(40)	not null
, primary key (category_id,sequence_num)
, foreign key (category_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



alter table dcs_cat_subroots set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_catinfo (
	category_id	varchar(40)	not null,
	catalog_id	varchar(40)	not null,
	category_info_id	varchar(40)	not null
, primary key (category_id,catalog_id)
, foreign key (category_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



alter table dcs_cat_catinfo set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_catinfo_anc (
	category_info_id	varchar(40)	not null,
	anc_cat_id	varchar(40)	not null
, primary key (category_info_id,anc_cat_id))
Command completed successfully, 0 rows affected.



alter table dcs_catinfo_anc set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_prdinfo (
	product_id	varchar(40)	not null,
	catalog_id	varchar(40)	not null,
	product_info_id	varchar(40)	not null
, primary key (product_id,catalog_id)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



alter table dcs_prd_prdinfo set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prdinfo_rdprd (
	product_info_id	varchar(40)	not null,
	sequence_num	integer	not null,
	related_prd_id	varchar(40)	not null
, primary key (product_info_id,sequence_num)
, foreign key (related_prd_id) references dcs_product (product_id)
, foreign key (product_info_id) references dcs_product_info (product_info_id))
Command completed successfully, 0 rows affected.



create index dcs_prdrelatedinfo on dcs_prdinfo_rdprd (related_prd_id)
Command completed successfully, 0 rows affected.


alter table dcs_prdinfo_rdprd set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prdinfo_anc (
	product_info_id	varchar(40)	not null,
	anc_cat_id	varchar(40)	not null
, primary key (product_info_id,anc_cat_id))
Command completed successfully, 0 rows affected.



alter table dcs_prdinfo_anc set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_skuinfo (
	sku_id	varchar(40)	not null,
	catalog_id	varchar(40)	not null,
	sku_info_id	varchar(40)	not null
, primary key (sku_id,catalog_id)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



alter table dcs_sku_skuinfo set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_skuinfo_rplc (
	sku_info_id	varchar(40)	not null,
	sequence_num	integer	not null,
	replacement	varchar(40)	not null
, primary key (sku_info_id,sequence_num)
, foreign key (sku_info_id) references dcs_sku_info (sku_info_id))
Command completed successfully, 0 rows affected.



alter table dcs_skuinfo_rplc set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_gen_fol_cat (
	folder_id	varchar(40)	not null,
	type	integer	not null,
	name	varchar(40)	not null,
	parent	varchar(40)	null,
	description	varchar(254)	null,
	item_acl	long varchar	null
, primary key (folder_id))
Command completed successfully, 0 rows affected.



alter table dcs_gen_fol_cat set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_child_fol_cat (
	folder_id	varchar(40)	not null,
	sequence_num	integer	not null,
	child_folder_id	varchar(40)	not null
, primary key (folder_id,sequence_num)
, foreign key (folder_id) references dcs_gen_fol_cat (folder_id))
Command completed successfully, 0 rows affected.



alter table dcs_child_fol_cat set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_catfol_chld (
	catfol_id	varchar(40)	not null,
	sequence_num	integer	not null,
	catalog_id	varchar(40)	not null
, primary key (catfol_id,sequence_num)
, foreign key (catfol_id) references dcs_gen_fol_cat (folder_id))
Command completed successfully, 0 rows affected.



alter table dcs_catfol_chld set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_dir_anc_ctlgs (
	catalog_id	varchar(40)	not null,
	sequence_num	integer	not null,
	anc_catalog_id	varchar(40)	not null
, primary key (catalog_id,sequence_num)
, foreign key (catalog_id) references dcs_catalog (catalog_id)
, foreign key (anc_catalog_id) references dcs_catalog (catalog_id))
Command completed successfully, 0 rows affected.



create index dcs_dirancctlg_idx on dcs_dir_anc_ctlgs (anc_catalog_id)
Command completed successfully, 0 rows affected.


alter table dcs_dir_anc_ctlgs set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_ind_anc_ctlgs (
	catalog_id	varchar(40)	not null,
	sequence_num	integer	not null,
	anc_catalog_id	varchar(40)	not null
, primary key (catalog_id,sequence_num)
, foreign key (catalog_id) references dcs_catalog (catalog_id)
, foreign key (anc_catalog_id) references dcs_catalog (catalog_id))
Command completed successfully, 0 rows affected.



create index dcs_indanctlg_idx on dcs_ind_anc_ctlgs (anc_catalog_id)
Command completed successfully, 0 rows affected.


alter table dcs_ind_anc_ctlgs set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_ctlg_anc_cats (
	catalog_id	varchar(40)	not null,
	sequence_num	integer	not null,
	category_id	varchar(40)	not null
, primary key (catalog_id,sequence_num)
, foreign key (catalog_id) references dcs_catalog (catalog_id)
, foreign key (category_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



create index dcs_ctlgancat_idx on dcs_ctlg_anc_cats (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_ctlg_anc_cats set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_prnt_ctlg (
	category_id	varchar(40)	not null,
	parent_ctlg_id	varchar(40)	not null
, primary key (category_id)
, foreign key (parent_ctlg_id) references dcs_catalog (catalog_id)
, foreign key (category_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



create index cat_pctlgid_idx on dcs_cat_prnt_ctlg (parent_ctlg_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_prnt_ctlg set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_anc_cats (
	category_id	varchar(40)	not null,
	sequence_num	integer	not null,
	anc_category_id	varchar(40)	not null
, primary key (category_id,sequence_num)
, foreign key (category_id) references dcs_category (category_id)
, foreign key (anc_category_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



create index dcs_catanccat_idx on dcs_cat_anc_cats (anc_category_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_anc_cats set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_prnt_cats (
	product_id	varchar(40)	not null,
	catalog_id	varchar(40)	not null,
	category_id	varchar(40)	not null
, primary key (product_id,catalog_id)
, foreign key (catalog_id) references dcs_catalog (catalog_id)
, foreign key (category_id) references dcs_category (category_id)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index pr_prnt_cat_pi_idx on dcs_prd_prnt_cats (catalog_id)
Command completed successfully, 0 rows affected.


create index pr_prnt_cat_ci_idx on dcs_prd_prnt_cats (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_prnt_cats set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_anc_cats (
	product_id	varchar(40)	not null,
	sequence_num	integer	not null,
	category_id	varchar(40)	not null
, primary key (product_id,sequence_num)
, foreign key (category_id) references dcs_category (category_id)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index dcs_prdanccat_idx on dcs_prd_anc_cats (category_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_anc_cats set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_cat_catalogs (
	category_id	varchar(40)	not null,
	catalog_id	varchar(40)	not null
, primary key (category_id,catalog_id)
, foreign key (catalog_id) references dcs_catalog (catalog_id)
, foreign key (category_id) references dcs_category (category_id))
Command completed successfully, 0 rows affected.



create index dcs_catctlgs_idx on dcs_cat_catalogs (catalog_id)
Command completed successfully, 0 rows affected.


alter table dcs_cat_catalogs set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_prd_catalogs (
	product_id	varchar(40)	not null,
	catalog_id	varchar(40)	not null
, primary key (product_id,catalog_id)
, foreign key (catalog_id) references dcs_catalog (catalog_id)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index dcs_prd_ctlgs_idx on dcs_prd_catalogs (catalog_id)
Command completed successfully, 0 rows affected.


alter table dcs_prd_catalogs set pessimistic
Command completed successfully, 0 rows affected.




create table dcs_sku_catalogs (
	sku_id	varchar(40)	not null,
	catalog_id	varchar(40)	not null
, primary key (sku_id,catalog_id)
, foreign key (catalog_id) references dcs_catalog (catalog_id)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



create index dcs_sku_ctlgs_idx on dcs_sku_catalogs (catalog_id)
Command completed successfully, 0 rows affected.


alter table dcs_sku_catalogs set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// custom_catalog_user_ddl.sql





create table dcs_user_catalog (
	user_id	varchar(40)	not null,
	user_catalog	varchar(40)	null
, primary key (user_id))
Command completed successfully, 0 rows affected.



alter table dcs_user_catalog set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// drop_reporting_views3.sql



drop view drpta_cat_sales
Command completed successfully, 0 rows affected.


drop view drptq_cat_sales
Command completed successfully, 0 rows affected.


drop view drptm_cat_sales
Command completed successfully, 0 rows affected.


drop view drptw_cat_sales
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// drop_reporting_views2.sql



drop view drpta_m25_39_sales
Command completed successfully, 0 rows affected.


drop view drptq_m25_39_sales
Command completed successfully, 0 rows affected.


drop view drptm_m25_39_sales
Command completed successfully, 0 rows affected.


drop view drptw_m25_39_sales
Command completed successfully, 0 rows affected.


drop view drpta_m18_25_sales
Command completed successfully, 0 rows affected.


drop view drptq_m18_25_sales
Command completed successfully, 0 rows affected.


drop view drptm_m18_25_sales
Command completed successfully, 0 rows affected.


drop view drptw_m18_25_sales
Command completed successfully, 0 rows affected.


drop view drpta_promo_sales
Command completed successfully, 0 rows affected.


drop view drptq_promo_sales
Command completed successfully, 0 rows affected.


drop view drptm_promo_sales
Command completed successfully, 0 rows affected.


drop view drptw_promo_sales
Command completed successfully, 0 rows affected.


drop view drpta_prod_sales
Command completed successfully, 0 rows affected.


drop view drptq_prod_sales
Command completed successfully, 0 rows affected.


drop view drptm_prod_sales
Command completed successfully, 0 rows affected.


drop view drptw_prod_sales
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// drop_reporting_views1.sql



drop view drpt_category
Command completed successfully, 0 rows affected.


drop view drpt_products
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// custom_catalog_reporting.sql




//-        new drpt_products compiles information about each product in the catalog new   
create view drpt_products
as
select p.product_id as product_id, 
	'N/A' as category_name,
	avg(s.wholesale_price) as avg_cost, 
	avg(s.list_price) as avg_list_price, 
	avg(s.sale_price) as avg_sale_price, 
	((avg(s.list_price) - avg(s.wholesale_price)) / avg(s.wholesale_price)) as avg_initial_markup, 
	sum(inv.stock_level) as units_on_hand, 
	count(s.sku_id) as number_of_skus
from dcs_product p, 
	dcs_sku s, 
	dcs_prd_chldsku pc, 
	dcs_inventory inv
where p.product_id = pc.product_id 
	and pc.sku_id = s.sku_id
	and pc.sku_id = inv.catalog_ref_id
group by p.product_id
         
Command completed successfully, 0 rows affected.




//-        new drpt_category calculates statistics about prices and costs on a per-category basis  new   
create view drpt_category
as
select ctlg.display_name as catalog_name, 
	c.display_name as category_name, 
	c.category_id as category_id,
	avg(s.wholesale_price)as avg_cost,
	avg(s.list_price) as avg_list_price,
	avg(s.sale_price) as avg_sale_price,
	((avg(s.list_price) - avg(s.wholesale_price)) / avg(s.wholesale_price)) as avg_initial_markup,
	sum(inv.stock_level) as units_on_hand, 
	count(s.sku_id) as number_of_skus
from dcs_catalog ctlg, 
	dcs_category c, 
	dcs_sku s, 
	dcs_prd_chldsku pc, 
	dcs_product_info pi,
	dcs_prd_prdinfo ppi, 
	dcs_inventory inv
where c.category_id = pi.parent_cat_id 
	and pc.product_id = ppi.product_id 
	and pc.sku_id = s.sku_id
	and ctlg.catalog_id = c.catalog_id 
	and pc.sku_id = s.sku_id 
	and ppi.catalog_id = ctlg.catalog_id 
	and ppi.product_info_id = pi.product_info_id 
	and pc.sku_id = inv.catalog_ref_id
group by c.display_name,
	ctlg.display_name, 
	c.category_id
         
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// reporting_views2.sql




//-        drptw_prod_sales calculates several statistics over each week on a per-product basis    
//- drptw_prod_sales calculates several statistics over each week on a per-product basis    
create view drptw_prod_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / wot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price * i.quantity)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / wot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	wb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / wb.browses) as shop_to_purc_conv,
	wc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / wc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptw_browses wb, 
	drptw_carts wc, 
	drpt_sku_stock si, 
	drptw_orders wot, 
	dcs_sku s
where o.order_id = i.order_ref 
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = wc.product_id 
	and i.product_id = wb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wb.week 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wc.week 
	and si.product_id = i.product_id 
	and wot.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400))
	and i.catalog_ref_id = s.sku_id
group by week, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	wb.browses, 
	wc.adds_to_cart, 
	wot.total_units_sold,
	wot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock
         
Command completed successfully, 0 rows affected.




//-        drptm_prod_sales calculates several statistics over each month on a per-product basis    
create view drptm_prod_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / mot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as months_on_hand,
	sum(ai.amount) as total_rev, 
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price * i.quantity)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / mot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	mb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / mb.browses) as shop_to_purc_conv,
	mc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / mc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptm_browses mb, 
	drptm_carts mc, 
	drpt_sku_stock si, 
	drptm_orders mot, 
	dcs_sku s
where o.order_id = i.order_ref 
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = mc.product_id 
	and i.product_id = mb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mb.month 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mc.month 
	and si.product_id = i.product_id 
	and mot.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id
group by month, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup,
	pri.units_on_hand, 
	mb.browses, 
	mc.adds_to_cart, 
	mot.total_units_sold,
	mot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock
         
Command completed successfully, 0 rows affected.




//-        drptq_prod_sales calculates several statistics over each quarter on a per-product basis    
create view drptq_prod_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / qot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as quarters_on_hand,
	sum(ai.amount) as total_rev, 
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price * i.quantity)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / qot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	qb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / qb.browses) as shop_to_purc_conv,
	qc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / qc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptq_browses qb, 
	drptq_carts qc, 
	drpt_sku_stock si, 
	drptq_orders qot, 
	dcs_sku s
where o.order_id = i.order_ref 
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = qc.product_id 
	and i.product_id = qb.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qb.quarter 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qc.quarter 
	and si.product_id = i.product_id 
	and qot.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and i.catalog_ref_id = s.sku_id
group by quarter, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup,
	pri.units_on_hand, 
	qb.browses, 	
	qc.adds_to_cart, 
	qot.total_units_sold,
	qot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock
         
Command completed successfully, 0 rows affected.




//-        drpta_prod_sales calculates several statistics over each year on a per-product basis    
create view drpta_prod_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / aot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as years_on_hand,
	sum(ai.amount) as total_rev, 
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price * i.quantity)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / aot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	ab.browses as browses, count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / ab.browses) as shop_to_purc_conv, 
	ac.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / ac.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drpta_browses ab, 
	drpta_carts ac, 
	drpt_sku_stock si, 
	drpta_orders aot, 
	dcs_sku s
where o.order_id = i.order_ref 
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = ac.product_id 
	and i.product_id = ab.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ab.year 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ac.year 
	and si.product_id = i.product_id 
	and aot.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') 
	and i.catalog_ref_id = s.sku_id
group by year, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup,
	pri.units_on_hand, 
	ab.browses, 
	ac.adds_to_cart, 
	aot.total_units_sold,
	aot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock
         
Command completed successfully, 0 rows affected.




//-        drptw_promo_sales calculates totals about products that were discounted   
//-        by the sample 'promo60003' promotion over each week   
create view drptw_promo_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / wpt.total_units_sold) as promo_units_sold_p, 
	(sum(i.quantity) / wot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / wpt.total_dollar_sales) as promo_rev_p,
	(sum(ai.amount) / wot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	wb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / wb.browses) as shop_to_purc_conv,
	wc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / wc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptw_browses wb, 
	drptw_carts wc, 
	drpt_sku_stock si, 
	drptw_orders wot, 
	dcs_sku s, 
	drptw_promotion wpt, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = wc.product_id 
	and i.product_id = wb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wb.week 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wc.week 
	and si.product_id = i.product_id 
	and wot.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and wpt.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by week, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	wb.browses, 
	wc.adds_to_cart, 
	wot.total_units_sold, 
	wot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	wpt.total_units_sold, 
	wpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptm_promo_sales calculates totals about products that were discounted   
//-        by the sample 'promo60003' promotion over each month   
create view drptm_promo_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / mpt.total_units_sold) as promo_units_sold_p, 
	(sum(i.quantity) / mot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as months_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / mpt.total_dollar_sales) as promo_rev_p,
	(sum(ai.amount) / mot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	mb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / mb.browses) as shop_to_purc_conv, 
	mc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / mc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptm_browses mb, 
	drptm_carts mc, 
	drpt_sku_stock si, 
	drptm_orders mot, 
	dcs_sku s, 
	drptm_promotion mpt, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = mc.product_id 
	and i.product_id = mb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mb.month 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mc.month 
	and si.product_id = i.product_id 
	and mot.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and mpt.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by month, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	mb.browses, 
	mc.adds_to_cart, 
	mot.total_units_sold, 
	mot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	mpt.total_units_sold, 
	mpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptq_promo_sales calculates totals about products that were discounted   
//-        by the sample 'promo60003' promotion over each quarter   
create view drptq_promo_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / qpt.total_units_sold) as promo_units_sold_p, 
	(sum(i.quantity) / qot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as quarters_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / qpt.total_dollar_sales) as promo_rev_p,
	(sum(ai.amount) / qot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	qb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / qb.browses) as shop_to_purc_conv, 
	qc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / qc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptq_browses qb, 
	drptq_carts qc, 
	drpt_sku_stock si, 
	drptq_orders qot,
	dcs_sku s, 
	drptq_promotion qpt, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = qc.product_id 
	and i.product_id = qb.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qb.quarter 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qc.quarter 
	and si.product_id = i.product_id 
	and qot.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and qpt.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and i.catalog_ref_id = s.sku_id
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by quarter, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	qb.browses, 
	qc.adds_to_cart, 
	qot.total_units_sold, 
	qot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	qpt.total_units_sold, 
	qpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drpta_promo_sales calculates totals about products that were discounted   
//-        by the sample 'promo60003' promotion over each year   
create view drpta_promo_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / apt.total_units_sold) as promo_units_sold_p, 
	(sum(i.quantity) / aot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as years_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / apt.total_dollar_sales) as promo_rev_p,
	(sum(ai.amount) / aot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	ab.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / ab.browses) as shop_to_purc_conv,
	ac.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / ac.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drpta_browses ab, 
	drpta_carts ac, 
	drpt_sku_stock si, 
	drpta_orders aot, 
	dcs_sku s, 
	drpta_promotion apt, 
	dcspp_amtinfo_adj aa,
	dcspp_price_adjust pa
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = ac.product_id 
	and i.product_id = ab.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ab.year 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ac.year 
	and si.product_id = i.product_id 
	and aot.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01')
	and apt.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01')
	and i.catalog_ref_id = s.sku_id
	and i.price_info = aa.amount_info_id 
	and aa.adjustments = pa.adjustment_id 
	and pa.pricing_model = 'promo60003'
group by year, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	ab.browses, 
	ac.adds_to_cart, 
	aot.total_units_sold, 
	aot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	apt.total_units_sold, 
	apt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptw_m_18_25_sales calculates totals about products that were purchased   
//-        by males aged 18-25 each week   
create view drptw_m18_25_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / wpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / wot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / wpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / wot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	wb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / wb.browses) as shop_to_purc_conv,
	wc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / wc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptw_browses wb, 
	drptw_carts wc, 
	drpt_sku_stock si, 
	drptw_orders wot, 
	dcs_sku s, 
	drptw_male_18_25 wpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = wc.product_id 
	and i.product_id = wb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wb.week 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wc.week 
	and si.product_id = i.product_id 
	and wot.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and wpt.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18)  
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by week, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	wb.browses, 
	wc.adds_to_cart, 
	wot.total_units_sold, 
	wot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	wpt.total_units_sold, 
	wpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptm_m_18_25_sales calculates totals about products that were purchased   
//-        by males aged 18-25 each month   
create view drptm_m18_25_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / mpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / mot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as months_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / mpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / mot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	mb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / mb.browses) as shop_to_purc_conv,
	mc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / mc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptm_browses mb, 
	drptm_carts mc, 
	drpt_sku_stock si, 
	drptm_orders mot, 
	dcs_sku s, 
	drptm_male_18_25 mpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = mc.product_id 
	and i.product_id = mb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mb.month 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mc.month 
	and si.product_id = i.product_id 
	and mot.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and mpt.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18)  
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by month, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	mb.browses, 
	mc.adds_to_cart, 
	mot.total_units_sold, 
	mot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	mpt.total_units_sold, 
	mpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptq_m_18_25_sales calculates totals about products that were purchased   
//-        by males aged 18-25 each quarter   
create view drptq_m18_25_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / qpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / qot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as quarters_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / qpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / qot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	qb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / qb.browses) as shop_to_purc_conv,
	qc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / qc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptq_browses qb, 
	drptq_carts qc, 
	drpt_sku_stock si, 
	drptq_orders qot, 
	dcs_sku s, 
	drptq_male_18_25 qpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = qc.product_id 
	and i.product_id = qb.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qb.quarter 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qc.quarter 
	and si.product_id = i.product_id 
	and qot.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and qpt.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01')
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18)  
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by quarter, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	qb.browses, 
	qc.adds_to_cart, 
	qot.total_units_sold, 
	qot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	qpt.total_units_sold, 
	qpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drpta_m_18_25_sales calculates totals about products that were purchased   
//-        by males aged 18-25 each year   
create view drpta_m18_25_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / apt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / aot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as years_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / apt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / aot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	ab.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / ab.browses) as shop_to_purc_conv,
	ac.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / ac.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drpta_browses ab, 
	drpta_carts ac, 
	drpt_sku_stock si, 
	drpta_orders aot, 
	dcs_sku s, 
	drpta_male_18_25 apt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = ac.product_id 
	and i.product_id = ab.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ab.year 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ac.year 
	and si.product_id = i.product_id 
	and aot.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') 
	and apt.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01')
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 18)  
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 25)
group by year, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	ab.browses, 
	ac.adds_to_cart, 
	aot.total_units_sold, 
	aot.merch_rev,
	pri.number_of_skus, 
	si.skus_in_stock, 
	apt.total_units_sold, 
	apt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptw_m_25_39_sales calculates totals about products that were purchased   
//-        by males aged 25-39 each week   
create view drptw_m25_39_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) as week, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / wpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / wot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / wpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / wot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	wb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / wb.browses) as shop_to_purc_conv,
	wc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / wc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptw_browses wb, 
	drptw_carts wc, 
	drpt_sku_stock si, 
	drptw_orders wot, 
	dcs_sku s, 
	drptw_male_25_39 wpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = wc.product_id 
	and i.product_id = wb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wb.week 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) = wc.week 
	and si.product_id = i.product_id 
	and wot.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and wpt.week = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFWEEK(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39) 
group by week, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	wb.browses, 
	wc.adds_to_cart, 
	wot.total_units_sold, 
	wot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	wpt.total_units_sold, 
	wpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptm_m_25_39_sales calculates totals about products that were purchased   
//-        by males aged 25-39 each month   
create view drptm_m25_39_sales
as
select convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) as month, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / mpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / mot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as months_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / mpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / mot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	mb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / mb.browses) as shop_to_purc_conv,
	mc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / mc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptm_browses mb, 
	drptm_carts mc, 
	drpt_sku_stock si, 
	drptm_orders mot, 
	dcs_sku s, 
	drptm_male_25_39 mpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = mc.product_id 
	and i.product_id = mb.product_id 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mb.month 
	and convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) = mc.month 
	and si.product_id = i.product_id 
	and mot.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and mpt.month = convert_date(CONVERT_INTEGER(o.submitted_date)-CONVERT_INTEGER((DAYOFMONTH(o.submitted_date) -1) *86400)) 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39) 
group by month, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	mb.browses, 
	mc.adds_to_cart, 
	mot.total_units_sold, 
	mot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	mpt.total_units_sold, 
	mpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drptq_m_25_39_sales calculates totals about products that were purchased   
//-        by males aged 25-39 each quarter   
create view drptq_m25_39_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') as quarter, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / qpt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / qot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as quarters_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / qpt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / qot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	qb.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / qb.browses) as shop_to_purc_conv,
	qc.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / qc.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drptq_browses qb, 
	drptq_carts qc, 
	drpt_sku_stock si, 
	drptq_orders qot, 
	dcs_sku s, 
	drptq_male_25_39 qpt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = qc.product_id 
	and i.product_id = qb.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qb.quarter 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') = qc.quarter 
	and si.product_id = i.product_id 
	and qot.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and qpt.quarter = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-'||CONVERT_VARCHAR((QUARTER(o.submitted_date)-1)*3+1)||'-01') 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39) 
group by quarter, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	qb.browses, 
	qc.adds_to_cart, 
	qot.total_units_sold, 
	qot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	qpt.total_units_sold, 
	qpt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




//-        drpta_m_25_39_sales calculates totals about products that were purchased   
//-        by males aged 25-39 each year   
create view drpta_m25_39_sales
as
select convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') as year, 
	i.product_id as product_id, 
	pri.category_name as category_name, 
	pri.avg_cost as avg_cost,
	pri.avg_list_price as avg_list_price, 
	pri.avg_sale_price as avg_sale_price, 
	pri.avg_initial_markup as avg_initial_markup,
	pri.units_on_hand as units_on_hand,
	sum(i.quantity) as units_sold, 
	(sum(i.quantity) / apt.total_units_sold) as demo_units_sold_p, 
	(sum(i.quantity) / aot.total_units_sold) as total_units_sold_p, 
	(pri.units_on_hand / sum(i.quantity)) as years_on_hand,
	sum(ai.amount) as total_rev,
	sum(s.wholesale_price * i.quantity) as cost_of_goods_sold,
	((sum(ai.amount) - sum(s.wholesale_price)) / sum(ai.amount)) as maintained_markup, 
	(sum(ai.amount) / apt.total_dollar_sales) as demo_rev_p,
	(sum(ai.amount) / aot.merch_rev) as total_rev_p,
	pri.number_of_skus as number_of_skus, 
	si.skus_in_stock as skus_in_stock,
	(si.skus_in_stock / pri.number_of_skus) as skus_in_stock_p,
	ab.browses as browses, 
	count(distinct i.order_ref) as browse_conversions,
	(count(distinct i.order_ref) / ab.browses) as shop_to_purc_conv,
	ac.adds_to_cart as adds_to_cart, 
	count(i.order_ref) as cart_conversions, 
	(count(i.order_ref) / ac.adds_to_cart) as cart_to_purc_conv
from dcspp_order o, 
	dcspp_item i, 
	drpt_products pri, 
	dcspp_amount_info ai,
	drpta_browses ab, 
	drpta_carts ac, 
	drpt_sku_stock si, 
	drpta_orders aot, 
	dcs_sku s, 
	drpta_male_25_39 apt, 
	dps_user u
where o.order_id = i.order_ref 
	and o.state != 'FAILED' 
	and o.state != 'REMOVED'
	and i.product_id = pri.product_id 
	and i.price_info = ai.amount_info_id 
	and i.product_id = ac.product_id 
	and i.product_id = ab.product_id 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ab.year 
	and convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') = ac.year 
	and si.product_id = i.product_id 
	and aot.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') 
	and apt.year = convert_date(CONVERT_VARCHAR(year(o.submitted_date))||'-01-01') 
	and i.catalog_ref_id = s.sku_id 
	and o.profile_id = u.id 
	and u.gender = 2 
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} >= 25)
	and ({fn TIMESTAMPDIFF(SQL_TSI_YEAR, u.date_of_birth, o.submitted_date)} < 39) 
group by year, 
	i.product_id, 
	pri.category_name, 
	pri.avg_cost,
	pri.avg_list_price, 
	pri.avg_sale_price, 
	pri.avg_initial_markup, 
	pri.units_on_hand, 
	ab.browses, 
	ac.adds_to_cart, 
	aot.total_units_sold, 
	aot.merch_rev, 
	pri.number_of_skus, 
	si.skus_in_stock, 
	apt.total_units_sold, 	
	apt.total_dollar_sales
         
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// custom_catalog_reporting1.sql




//-        new drptw_cat_sales calculates various statistics over each week on a per-category basis  new   
create view drptw_cat_sales
as
select wps.week as week, 
	cri.catalog_name as catalog_name, 
	wps.category_name as category_name, 
	cri.avg_cost as avg_cost,
	cri.avg_list_price as avg_list_price, 
	cri.avg_sale_price as avg_sale_price,
	cri.avg_initial_markup as avg_initial_markup,
	sum(wps.units_sold) as units_sold, 
	sum(wps.total_rev) as total_rev,
	sum(wps.cost_of_goods_sold) as cost_of_goods_sold,
	((sum(wps.total_rev) - sum(wps.cost_of_goods_sold)) / sum(wps.total_rev)) as maintained_markup,
	(sum(wps.units_sold) / wot.total_units_sold) as total_units_sold_p,
	(sum(wps.total_rev) / wot.merch_rev) as total_rev_p, 
	cri.units_on_hand as units_on_hand,
	(cri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(wps.number_of_skus) as number_of_skus, 
	sum(wps.skus_in_stock) as skus_in_stock,
	(sum(wps.skus_in_stock) / sum(wps.number_of_skus)) as skus_in_stock_p,
	sum(wps.browses) as browses, 
	sum(wps.browse_conversions) as browse_conversions,
	(sum(wps.browse_conversions) / sum(wps.browses)) as shop_to_purc_conv,
	sum(wps.adds_to_cart) as adds_to_cart, 
	sum(wps.cart_conversions) as cart_conversions,
	(sum(wps.cart_conversions) / sum(wps.adds_to_cart)) as cart_to_purc_conv
from drptw_prod_sales wps, 
	drpt_category cri, 
	drptw_orders wot, 
	dcs_category c, 
	dcs_product_info pi, 
	dcs_prd_prdinfo ppi, 
	dcspp_item i
where wps.product_id = ppi.product_id 
	and i.product_id = ppi.product_id 
	and i.catalog_id = c.catalog_id
	and cri.category_id = c.category_id 
	and i.catalog_id = ppi.catalog_id
	and ppi.product_info_id = pi.product_info_id 
	and pi.parent_cat_id = cri.category_id 
	and wps.week = wot.week
group by wps.week, 
	cri.catalog_name, 
	wps.category_name, 
	cri.avg_cost, 
	cri.avg_list_price, 
	cri.avg_sale_price,
	cri.avg_initial_markup,
	wot.total_units_sold, 
	wot.merch_rev, 
	cri.units_on_hand
         
Command completed successfully, 0 rows affected.




//-        new drptm_cat_sales calculates various statistics over each month on a per-category basis    
create view drptm_cat_sales
as
select mps.month as month, 
	cri.catalog_name as catalog_name, 
	mps.category_name as category_name, 
	cri.avg_cost as avg_cost,
	cri.avg_list_price as avg_list_price, 
	cri.avg_sale_price as avg_sale_price, 
	cri.avg_initial_markup as avg_initial_markup,
	sum(mps.units_sold) as units_sold, 
	sum(mps.total_rev) as total_rev,
	sum(mps.cost_of_goods_sold) as cost_of_goods_sold,
	((sum(mps.total_rev) - sum(mps.cost_of_goods_sold)) / sum(mps.total_rev)) as maintained_markup,
	(sum(mps.units_sold) / mot.total_units_sold) as total_units_sold_p,
	(sum(mps.total_rev) / mot.merch_rev) as total_rev_p, 
	cri.units_on_hand as units_on_hand,
	(cri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(mps.number_of_skus) as number_of_skus, 
	sum(mps.skus_in_stock) as skus_in_stock,
	(sum(mps.skus_in_stock) / sum(mps.number_of_skus)) as skus_in_stock_p,
	sum(mps.browses) as browses, 
	sum(mps.browse_conversions) as browse_conversions,
	(sum(mps.browse_conversions) / sum(mps.browses)) as shop_to_purc_conv,
	sum(mps.adds_to_cart) as adds_to_cart, 
	sum(mps.cart_conversions) as cart_conversions,
	(sum(mps.cart_conversions) / sum(mps.adds_to_cart)) as cart_to_purc_conv
from drptm_prod_sales mps, 
	drpt_category cri, 
	drptm_orders mot, 
	dcs_category c, 
	dcs_product_info pi, 
	dcs_prd_prdinfo ppi, 
	dcspp_item i
where mps.product_id = ppi.product_id 
	and i.product_id = ppi.product_id 
	and i.catalog_id = c.catalog_id 
	and cri.category_id = c.category_id 
	and i.catalog_id = ppi.catalog_id 
	and ppi.product_info_id = pi.product_info_id 
	and pi.parent_cat_id = cri.category_id 
	and mps.month = mot.month
group by mps.month, 
	cri.catalog_name, 
	mps.category_name, 
	cri.avg_cost, 
	cri.avg_list_price, 
	cri.avg_sale_price,
	cri.avg_initial_markup,
	mot.total_units_sold, 
	mot.merch_rev, 
	cri.units_on_hand
         
Command completed successfully, 0 rows affected.




//-        new drptq_cat_sales calculates various statistics over each quarter on a per-category basis   
create view drptq_cat_sales
as
select qps.quarter as quarter, 
	cri.catalog_name as catalog_name, 
	qps.category_name as category_name, 
	cri.avg_cost as avg_cost,
	cri.avg_list_price as avg_list_price, 
	cri.avg_sale_price as avg_sale_price, 
	cri.avg_initial_markup as avg_initial_markup,
	sum(qps.units_sold) as units_sold, 
	sum(qps.total_rev) as total_rev,
	sum(qps.cost_of_goods_sold) as cost_of_goods_sold,
	((sum(qps.total_rev) - sum(qps.cost_of_goods_sold)) / sum(qps.total_rev)) as maintained_markup,
	(sum(qps.units_sold) / qot.total_units_sold) as total_units_sold_p,
	(sum(qps.total_rev) / qot.merch_rev) as total_rev_p, 
	cri.units_on_hand as units_on_hand,
	(cri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(qps.number_of_skus) as number_of_skus, 
	sum(qps.skus_in_stock) as skus_in_stock,
	(sum(qps.skus_in_stock) / sum(qps.number_of_skus)) as skus_in_stock_p,
	sum(qps.browses) as browses, 
	sum(qps.browse_conversions) as browse_conversions,
	(sum(qps.browse_conversions) / sum(qps.browses)) as shop_to_purc_conv,
	sum(qps.adds_to_cart) as adds_to_cart, 
	sum(qps.cart_conversions) as cart_conversions,
	(sum(qps.cart_conversions) / sum(qps.adds_to_cart)) as cart_to_purc_conv
from drptq_prod_sales qps, 
	drpt_category cri, 
	drptq_orders qot, 
	dcs_category c, 
	dcs_product_info pi, 
	dcs_prd_prdinfo ppi, 
	dcspp_item i
where qps.product_id = ppi.product_id 
	and i.product_id = ppi.product_id 
	and i.catalog_id = c.catalog_id 
	and cri.category_id = c.category_id 
	and i.catalog_id = ppi.catalog_id 
	and ppi.product_info_id = pi.product_info_id 
	and pi.parent_cat_id = cri.category_id 
	and qps.quarter = qot.quarter
group by qps.quarter, 
	cri.catalog_name, 
	qps.category_name, 
	cri.avg_cost, 
	cri.avg_list_price, 
	cri.avg_sale_price,
	cri.avg_initial_markup,
	qot.total_units_sold, 
	qot.merch_rev, 
	cri.units_on_hand
         
Command completed successfully, 0 rows affected.




//-        new drpta_cat_sales calculates various statistics over each year on a per-category basis   
create view drpta_cat_sales
as
select aps.year as year, 
	cri.catalog_name as catalog_name, 
	aps.category_name as category_name, 
	cri.avg_cost as avg_cost,
	cri.avg_list_price as avg_list_price, 
	cri.avg_sale_price as avg_sale_price, 
	cri.avg_initial_markup as avg_initial_markup,
	sum(aps.units_sold) as units_sold, 
	sum(aps.total_rev) as total_rev,
	sum(aps.cost_of_goods_sold) as cost_of_goods_sold,
	((sum(aps.total_rev) - sum(aps.cost_of_goods_sold)) / sum(aps.total_rev)) as maintained_markup,
	(sum(aps.units_sold) / aot.total_units_sold) as total_units_sold_p,
	(sum(aps.total_rev) / aot.merch_rev) as total_rev_p, 
	cri.units_on_hand as units_on_hand,
	(cri.units_on_hand / sum(i.quantity)) as weeks_on_hand,
	sum(aps.number_of_skus) as number_of_skus, 
	sum(aps.skus_in_stock) as skus_in_stock,
	(sum(aps.skus_in_stock) / sum(aps.number_of_skus)) as skus_in_stock_p,
	sum(aps.browses) as browses, 
	sum(aps.browse_conversions) as browse_conversions,
	(sum(aps.browse_conversions) / sum(aps.browses)) as shop_to_purc_conv,
	sum(aps.adds_to_cart) as adds_to_cart, 
	sum(aps.cart_conversions) as cart_conversions,
	(sum(aps.cart_conversions) / sum(aps.adds_to_cart)) as cart_to_purc_conv
from drpta_prod_sales aps, 
	drpt_category cri, 
	drpta_orders aot, 
	dcs_category c, 
	dcs_product_info pi, 
	dcs_prd_prdinfo ppi, 
	dcspp_item i
where aps.product_id = ppi.product_id 
	and i.product_id = ppi.product_id 
	and i.catalog_id = c.catalog_id 
	and cri.category_id = c.category_id 
	and i.catalog_id = ppi.catalog_id 
	and ppi.product_info_id = pi.product_info_id 
	and pi.parent_cat_id = cri.category_id 
	and aps.year = aot.year
group by aps.year, 
	cri.catalog_name, 
	aps.category_name, 
	cri.avg_cost, 
	cri.avg_list_price, 
	cri.avg_sale_price,
	cri.avg_initial_markup,
	aot.total_units_sold, 
	aot.merch_rev, 
	cri.units_on_hand
         
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.



// the source for this section is 
// b2b_product_catalog_ddl.sql





create table dbc_manufacturer (
	manufacturer_id	varchar(40)	not null,
	manufacturer_name	wvarchar(254)	null,
	description	wvarchar(254)	null,
	long_description	long wvarchar	null,
	email	varchar(255)	null
, primary key (manufacturer_id))
Command completed successfully, 0 rows affected.



create index dbc_man_name_idx on dbc_manufacturer (manufacturer_name)
Command completed successfully, 0 rows affected.


alter table dbc_manufacturer set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_measurement (
	sku_id	varchar(40)	not null,
	unit_of_measure	integer	null,
	quantity	double precision	null
, primary key (sku_id))
Command completed successfully, 0 rows affected.



alter table dbc_measurement set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_product (
	product_id	varchar(40)	not null,
	manufacturer	varchar(40)	null
, primary key (product_id)
, foreign key (manufacturer) references dbc_manufacturer (manufacturer_id)
, foreign key (product_id) references dcs_product (product_id))
Command completed successfully, 0 rows affected.



create index dbc_prd_man_idx on dbc_product (manufacturer)
Command completed successfully, 0 rows affected.


alter table dbc_product set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_sku (
	sku_id	varchar(40)	not null,
	manuf_part_num	wvarchar(254)	null
, primary key (sku_id)
, foreign key (sku_id) references dcs_sku (sku_id))
Command completed successfully, 0 rows affected.



create index dbc_sku_prtnum_idx on dbc_sku (manuf_part_num)
Command completed successfully, 0 rows affected.


alter table dbc_sku set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// b2b_order_ddl.sql





create table dbcpp_approverids (
	order_id	varchar(40)	not null,
	approver_ids	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



alter table dbcpp_approverids set pessimistic
Command completed successfully, 0 rows affected.




create table dbcpp_authapprids (
	order_id	varchar(40)	not null,
	auth_appr_ids	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



alter table dbcpp_authapprids set pessimistic
Command completed successfully, 0 rows affected.




create table dbcpp_apprsysmsgs (
	order_id	varchar(40)	not null,
	appr_sys_msgs	varchar(254)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



alter table dbcpp_apprsysmsgs set pessimistic
Command completed successfully, 0 rows affected.




create table dbcpp_appr_msgs (
	order_id	varchar(40)	not null,
	approver_msgs	varchar(254)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



alter table dbcpp_appr_msgs set pessimistic
Command completed successfully, 0 rows affected.




create table dbcpp_sched_order (
	scheduled_order_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	name	wvarchar(32)	null,
	profile_id	varchar(40)	null,
	create_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	template_order	varchar(32)	null,
	state	integer	null,
	next_scheduled	timestamp	null,
	schedule	varchar(32)	null
, primary key (scheduled_order_id))
Command completed successfully, 0 rows affected.



alter table dbcpp_sched_order set pessimistic
Command completed successfully, 0 rows affected.




create table dbcpp_invoice_req (
	payment_group_id	varchar(40)	not null,
	po_number	varchar(40)	null,
	pref_format	varchar(40)	null,
	pref_delivery	varchar(40)	null,
	disc_percent	numeric(19,7)	null,
	disc_days	integer	null,
	net_days	integer	null,
	pmt_due_date	timestamp	null
, primary key (payment_group_id)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



alter table dbcpp_invoice_req set pessimistic
Command completed successfully, 0 rows affected.




create table dbcpp_cost_center (
	cost_center_id	varchar(40)	not null,
	type	integer	not null,
	version	integer	not null,
	costctr_class_type	varchar(40)	null,
	identifier	varchar(40)	null,
	amount	numeric(19,7)	null,
	order_ref	varchar(40)	null
, primary key (cost_center_id))
Command completed successfully, 0 rows affected.



alter table dbcpp_cost_center set pessimistic
Command completed successfully, 0 rows affected.




create table dbcpp_order_cc (
	order_id	varchar(40)	not null,
	cost_centers	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (order_id,sequence_num)
, foreign key (order_id) references dcspp_order (order_id))
Command completed successfully, 0 rows affected.



create index order_cc_ordid_idx on dbcpp_order_cc (order_id)
Command completed successfully, 0 rows affected.


alter table dbcpp_order_cc set pessimistic
Command completed successfully, 0 rows affected.




create table dbcpp_sched_clone (
	scheduled_order_id	varchar(40)	not null,
	cloned_order	varchar(40)	not null,
	sequence_num	integer	not null
, primary key (scheduled_order_id,sequence_num)
, foreign key (scheduled_order_id) references dbcpp_sched_order (scheduled_order_id))
Command completed successfully, 0 rows affected.



alter table dbcpp_sched_clone set pessimistic
Command completed successfully, 0 rows affected.




create table dbcpp_ccitem_rel (
	relationship_id	varchar(40)	not null,
	cost_center_id	varchar(40)	null,
	commerce_item_id	varchar(40)	null,
	quantity	numeric(19,0)	null,
	amount	numeric(19,7)	null
, primary key (relationship_id)
, foreign key (relationship_id) references dcspp_relationship (relationship_id))
Command completed successfully, 0 rows affected.



create index cirel_cstctr_idx on dbcpp_ccitem_rel (cost_center_id)
Command completed successfully, 0 rows affected.


create index cirel_item_idx on dbcpp_ccitem_rel (commerce_item_id)
Command completed successfully, 0 rows affected.


alter table dbcpp_ccitem_rel set pessimistic
Command completed successfully, 0 rows affected.




create table dbcpp_ccship_rel (
	relationship_id	varchar(40)	not null,
	cost_center_id	varchar(40)	null,
	shipping_group_id	varchar(40)	null,
	amount	numeric(19,7)	null
, primary key (relationship_id)
, foreign key (relationship_id) references dcspp_relationship (relationship_id))
Command completed successfully, 0 rows affected.



create index csrel_cstctr_idx on dbcpp_ccship_rel (cost_center_id)
Command completed successfully, 0 rows affected.


create index csrel_shipgrp_idx on dbcpp_ccship_rel (shipping_group_id)
Command completed successfully, 0 rows affected.


alter table dbcpp_ccship_rel set pessimistic
Command completed successfully, 0 rows affected.




create table dbcpp_ccorder_rel (
	relationship_id	varchar(40)	not null,
	cost_center_id	varchar(40)	null,
	order_id	varchar(40)	null,
	amount	numeric(19,7)	null
, primary key (relationship_id)
, foreign key (relationship_id) references dcspp_relationship (relationship_id))
Command completed successfully, 0 rows affected.



create index corel_cstctr_idx on dbcpp_ccorder_rel (cost_center_id)
Command completed successfully, 0 rows affected.


create index corel_order_idx on dbcpp_ccorder_rel (order_id)
Command completed successfully, 0 rows affected.


alter table dbcpp_ccorder_rel set pessimistic
Command completed successfully, 0 rows affected.




create table dbcpp_pmt_req (
	payment_group_id	varchar(40)	not null,
	req_number	varchar(40)	null
, primary key (payment_group_id)
, foreign key (payment_group_id) references dcspp_pay_group (payment_group_id))
Command completed successfully, 0 rows affected.



create index pmtreq_req_idx on dbcpp_pmt_req (req_number)
Command completed successfully, 0 rows affected.


alter table dbcpp_pmt_req set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// invoice_ddl.sql





create table dbc_inv_delivery (
	id	varchar(40)	not null,
	version	integer	not null,
	type	integer	not null,
	prefix	wvarchar(40)	null,
	first_name	wvarchar(40)	null,
	middle_name	wvarchar(40)	null,
	last_name	wvarchar(40)	null,
	suffix	wvarchar(40)	null,
	job_title	wvarchar(80)	null,
	company_name	wvarchar(40)	null,
	address1	wvarchar(80)	null,
	address2	wvarchar(80)	null,
	address3	wvarchar(80)	null,
	city	wvarchar(40)	null,
	county	wvarchar(40)	null,
	state	wvarchar(40)	null,
	postal_code	wvarchar(10)	null,
	country	wvarchar(40)	null,
	phone_number	wvarchar(40)	null,
	fax_number	wvarchar(40)	null,
	email_addr	wvarchar(255)	null,
	format	integer	null,
	delivery_mode	integer	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dbc_inv_delivery set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_inv_pmt_terms (
	id	varchar(40)	not null,
	version	integer	not null,
	type	integer	not null,
	disc_percent	numeric(19,7)	null,
	disc_days	integer	null,
	net_days	integer	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dbc_inv_pmt_terms set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_invoice (
	id	varchar(40)	not null,
	version	integer	not null,
	type	integer	not null,
	creation_date	timestamp	null,
	last_mod_date	timestamp	null,
	invoice_number	varchar(40)	null,
	po_number	varchar(40)	null,
	req_number	varchar(40)	null,
	delivery_info	varchar(40)	null,
	balance_due	numeric(19,7)	null,
	pmt_due_date	timestamp	null,
	pmt_terms	varchar(40)	null,
	order_id	varchar(40)	null,
	pmt_group_id	varchar(40)	null
, primary key (id)
, foreign key (delivery_info) references dbc_inv_delivery (id)
, foreign key (pmt_terms) references dbc_inv_pmt_terms (id))
Command completed successfully, 0 rows affected.



create index dbc_inv_dlivr_info on dbc_invoice (delivery_info)
Command completed successfully, 0 rows affected.


create index dbc_inv_pmt_terms on dbc_invoice (pmt_terms)
Command completed successfully, 0 rows affected.


create index inv_inv_idx on dbc_invoice (invoice_number)
Command completed successfully, 0 rows affected.


create index inv_order_idx on dbc_invoice (order_id)
Command completed successfully, 0 rows affected.


create index inv_pmt_idx on dbc_invoice (pmt_group_id)
Command completed successfully, 0 rows affected.


create index inv_po_idx on dbc_invoice (po_number)
Command completed successfully, 0 rows affected.


alter table dbc_invoice set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// contracts_ddl.sql




//- Normally, catalog_id and price_list_id would reference the appropriate table it is possible not to use those tables though, which is why the reference is not included

create table dbc_contract (
	contract_id	varchar(40)	not null,
	display_name	wvarchar(254)	null,
	creation_date	timestamp	null,
	start_date	timestamp	null,
	end_date	timestamp	null,
	creator_id	varchar(40)	null,
	negotiator_info	wvarchar(40)	null,
	price_list_id	varchar(40)	null,
	catalog_id	varchar(40)	null,
	term_id	varchar(40)	null,
	comments	wvarchar(254)	null
, primary key (contract_id))
Command completed successfully, 0 rows affected.



alter table dbc_contract set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_contract_term (
	terms_id	varchar(40)	not null,
	terms	long varchar	null,
	disc_percent	numeric(19,7)	null,
	disc_days	integer	null,
	net_days	integer	null
, primary key (terms_id))
Command completed successfully, 0 rows affected.



alter table dbc_contract_term set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// b2b_user_ddl.sql




//- Specific extensions for B2B user profiles

create table dbc_cost_center (
	id	varchar(40)	not null,
	identifier	wvarchar(40)	not null,
	description	wvarchar(254)	null,
	user_id	varchar(40)	null
, primary key (id))
Command completed successfully, 0 rows affected.



alter table dbc_cost_center set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_user (
	id	varchar(40)	not null,
	price_list	varchar(40)	null,
	user_catalog	varchar(40)	null,
	user_role	integer	null,
	business_addr	varchar(40)	null,
	dflt_shipping_addr	varchar(40)	null,
	dflt_billing_addr	varchar(40)	null,
	dflt_payment_type	varchar(40)	null,
	dflt_cost_center	varchar(40)	null,
	order_price_limit	numeric(19,7)	null,
	approval_required	tinyint	null
, primary key (id)
, foreign key (dflt_cost_center) references dbc_cost_center (id)
, foreign key (business_addr) references dps_contact_info (id)
, foreign key (dflt_billing_addr) references dps_contact_info (id)
, foreign key (dflt_shipping_addr) references dps_contact_info (id)
, foreign key (dflt_payment_type) references dps_credit_card (id)
, foreign key (id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index usr_defcstctr_idx on dbc_user (dflt_cost_center)
Command completed successfully, 0 rows affected.


create index dbc_usr_busnes_adr on dbc_user (business_addr)
Command completed successfully, 0 rows affected.


create index dbc_usrdfltblngadr on dbc_user (dflt_billing_addr)
Command completed successfully, 0 rows affected.


create index dbc_usrdfltshp_adr on dbc_user (dflt_shipping_addr)
Command completed successfully, 0 rows affected.


create index dbc_usrdfltpymntty on dbc_user (dflt_payment_type)
Command completed successfully, 0 rows affected.


alter table dbc_user set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_buyer_costctr (
	user_id	varchar(40)	not null,
	seq	integer	not null,
	cost_center_id	varchar(40)	not null
, primary key (user_id,seq)
, foreign key (cost_center_id) references dbc_cost_center (id))
Command completed successfully, 0 rows affected.



create index dbc_byr_costctr_id on dbc_buyer_costctr (cost_center_id)
Command completed successfully, 0 rows affected.


alter table dbc_buyer_costctr set pessimistic
Command completed successfully, 0 rows affected.



//- Multi-table associating a Buyer with one or more order approvers.  Approvers are required to be registered users of the site so they can perform online approvals.

create table dbc_buyer_approver (
	user_id	varchar(40)	not null,
	approver_id	varchar(40)	not null,
	seq	integer	not null
, primary key (user_id,seq)
, foreign key (approver_id) references dps_user (id)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index buyer_approver_idx on dbc_buyer_approver (approver_id)
Command completed successfully, 0 rows affected.


alter table dbc_buyer_approver set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_buyer_payment (
	user_id	varchar(40)	not null,
	tag	varchar(42)	not null,
	payment_id	varchar(40)	not null
, primary key (user_id,tag)
, foreign key (payment_id) references dps_credit_card (id)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dbc_byr_pymnt_id on dbc_buyer_payment (payment_id)
Command completed successfully, 0 rows affected.


alter table dbc_buyer_payment set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_buyer_shipping (
	user_id	varchar(40)	not null,
	tag	varchar(42)	not null,
	addr_id	varchar(40)	not null
, primary key (user_id,tag)
, foreign key (addr_id) references dps_contact_info (id)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dbc_byr_shpng_addr on dbc_buyer_shipping (addr_id)
Command completed successfully, 0 rows affected.


alter table dbc_buyer_shipping set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_buyer_billing (
	user_id	varchar(40)	not null,
	tag	varchar(42)	not null,
	addr_id	varchar(40)	not null
, primary key (user_id,tag)
, foreign key (addr_id) references dps_contact_info (id)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index dbc_byr_biladdr_id on dbc_buyer_billing (addr_id)
Command completed successfully, 0 rows affected.


alter table dbc_buyer_billing set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_buyer_prefvndr (
	user_id	varchar(40)	not null,
	vendor	wvarchar(100)	not null,
	seq	integer	not null
, primary key (user_id,seq)
, foreign key (user_id) references dps_user (id))
Command completed successfully, 0 rows affected.



alter table dbc_buyer_prefvndr set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_buyer_plist (
	user_id	varchar(40)	not null,
	list_id	varchar(40)	not null,
	tag	integer	not null
, primary key (user_id,tag))
Command completed successfully, 0 rows affected.



alter table dbc_buyer_plist set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// organization_ddl.sql





create table dbc_organization (
	id	varchar(40)	not null,
	type	integer	null,
	cust_type	integer	null,
	duns_number	varchar(20)	null,
	dflt_shipping_addr	varchar(40)	null,
	dflt_billing_addr	varchar(40)	null,
	dflt_payment_type	varchar(40)	null,
	dflt_cost_center	varchar(40)	null,
	order_price_limit	numeric(19,7)	null,
	contract_id	varchar(40)	null,
	approval_required	tinyint	null
, primary key (id)
, foreign key (contract_id) references dbc_contract (contract_id)
, foreign key (dflt_billing_addr) references dps_contact_info (id)
, foreign key (dflt_shipping_addr) references dps_contact_info (id)
, foreign key (dflt_payment_type) references dps_credit_card (id)
, foreign key (id) references dps_organization (org_id))
Command completed successfully, 0 rows affected.



create index dbc_org_cntrct_id on dbc_organization (contract_id)
Command completed successfully, 0 rows affected.


create index dbc_orgdfltblig_ad on dbc_organization (dflt_billing_addr)
Command completed successfully, 0 rows affected.


create index dbc_orgdflt_shpadr on dbc_organization (dflt_shipping_addr)
Command completed successfully, 0 rows affected.


create index dbc_orgdflt_pmttyp on dbc_organization (dflt_payment_type)
Command completed successfully, 0 rows affected.


create index dbc_orgdfltcst_ctr on dbc_organization (dflt_cost_center)
Command completed successfully, 0 rows affected.


alter table dbc_organization set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_org_contact (
	org_id	varchar(40)	not null,
	contact_id	varchar(40)	not null,
	seq	integer	not null
, primary key (org_id,seq)
, foreign key (contact_id) references dps_contact_info (id)
, foreign key (org_id) references dps_organization (org_id))
Command completed successfully, 0 rows affected.



create index dbc_org_cntct_id on dbc_org_contact (contact_id)
Command completed successfully, 0 rows affected.


alter table dbc_org_contact set pessimistic
Command completed successfully, 0 rows affected.



//- Multi-table associating an Organization with one or more order approvers.  Like administrators, approvers are required to be registered users of the site so they can perform online approvals.

create table dbc_org_approver (
	org_id	varchar(40)	not null,
	approver_id	varchar(40)	not null,
	seq	integer	not null
, primary key (org_id,seq)
, foreign key (org_id) references dps_organization (org_id)
, foreign key (approver_id) references dps_user (id))
Command completed successfully, 0 rows affected.



create index org_approver_idx on dbc_org_approver (approver_id)
Command completed successfully, 0 rows affected.


alter table dbc_org_approver set pessimistic
Command completed successfully, 0 rows affected.



//- Multi-table associating an Organization with one or more costcenters that are pre-approved for use by members of the organization.  

create table dbc_org_costctr (
	org_id	varchar(40)	not null,
	cost_center	varchar(40)	not null,
	seq	integer	not null
, primary key (org_id,seq)
, foreign key (org_id) references dps_organization (org_id))
Command completed successfully, 0 rows affected.



create index dbc_org_cstctr on dbc_org_costctr (cost_center)
Command completed successfully, 0 rows affected.


alter table dbc_org_costctr set pessimistic
Command completed successfully, 0 rows affected.



//- Multi-table associating an Organization with one or more payment types that are pre-apprived for use by members of the organization.Right now we're just using credit cards here, but this will needto change to support more general payment types, including invoicing and purchase orders

create table dbc_org_payment (
	org_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	payment_id	varchar(40)	not null
, primary key (org_id,tag)
, foreign key (payment_id) references dps_credit_card (id)
, foreign key (org_id) references dps_organization (org_id))
Command completed successfully, 0 rows affected.



create index dbc_org_pymnt_id on dbc_org_payment (payment_id)
Command completed successfully, 0 rows affected.


alter table dbc_org_payment set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_org_shipping (
	org_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	addr_id	varchar(40)	not null
, primary key (org_id,tag)
, foreign key (addr_id) references dps_contact_info (id)
, foreign key (org_id) references dps_organization (org_id))
Command completed successfully, 0 rows affected.



create index dbc_org_shpng_adr on dbc_org_shipping (addr_id)
Command completed successfully, 0 rows affected.


alter table dbc_org_shipping set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_org_billing (
	org_id	varchar(40)	not null,
	tag	wvarchar(42)	not null,
	addr_id	varchar(40)	not null
, primary key (org_id,tag)
, foreign key (addr_id) references dps_contact_info (id)
, foreign key (org_id) references dps_organization (org_id))
Command completed successfully, 0 rows affected.



create index dbc_org_billng_adr on dbc_org_billing (addr_id)
Command completed successfully, 0 rows affected.


alter table dbc_org_billing set pessimistic
Command completed successfully, 0 rows affected.




create table dbc_org_prefvndr (
	org_id	varchar(40)	not null,
	vendor	wvarchar(100)	not null,
	seq	integer	not null
, primary key (org_id,seq)
, foreign key (org_id) references dps_organization (org_id))
Command completed successfully, 0 rows affected.



alter table dbc_org_prefvndr set pessimistic
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.





// the source for this section is 
// b2b_reporting_views.sql




create view drpt_dlr_org
as
             select ORG.name as organization, round(sum(AI.amount),2) as amount
from 	dcspp_order O,
	dcspp_amount_info AI,
	dps_organization ORG,
	dps_user_org DO
where              
	O.profile_id =DO.user_id
	and DO.organization = ORG.org_id
	and O.price_info = AI.amount_info_id
	and O.state = 'NO_PENDING_ACTION'
group by organization
         
Command completed successfully, 0 rows affected.




create view drpt_dlr_byr
as
             select ORG.name as organization, DU.id as buyerid, (DU.last_name + ',' + DU.first_name) as buyer, round(sum(AI.amount),2) as amount
from 	dcspp_order O,
	dcspp_amount_info AI,
	dps_user DU,
	dps_organization ORG,
	dps_user_org DO
where              
	O.profile_id =DU.id
	and DU.id = DO.user_id
	and DO.organization = ORG.org_id
	and O.price_info = AI.amount_info_id
	and O.state = 'NO_PENDING_ACTION'
group by ORG.name,DU.id, buyer
         
Command completed successfully, 0 rows affected.




create view drpt_dlr_org_parts
as
             select ORG.name as organization, S.manuf_part_num as partnumber, round(sum(AI.amount),2) as amount
from  dcspp_order O, 
  dps_user_org DO, 
  dcspp_item I, 
  dbc_sku S,
  dcspp_amount_info AI, 
  dps_organization ORG
where 
  O.profile_id = DO.user_id 
  and DO.organization=ORG.org_id 
  and O.order_id = I.order_ref
  and I.price_info = AI.amount_info_id
  and I.catalog_ref_id = S.sku_id
  and O.state = 'NO_PENDING_ACTION'
group by organization, partnumber
         
Command completed successfully, 0 rows affected.




create view drpt_dlr_org_cc_i
as
             select ORG.name as organization, CC.identifier as costcenter,round(sum(CI.amount),2) as amount
from 	dcspp_order O,
	dcspp_item I,
	dbcpp_ccitem_rel CI,
	dps_organization ORG,
	dps_user_org DO,
	dbcpp_cost_center CC
where              
	O.profile_id =DO.user_id
	and DO.organization = ORG.org_id
	and O.order_id = I.order_ref
	and CI.commerce_item_id = I.commerce_item_id
	and CI.cost_center_id = CC.cost_center_id	
	and O.state = 'NO_PENDING_ACTION'
group by organization, costcenter
         
Command completed successfully, 0 rows affected.




create view drpt_dlr_org_cc_s
as
             select ORG.name as organization, CC.identifier as costcenter,round(sum(CS.amount),2) as amount
from 	dcspp_order O,
	dcspp_ship_group SG,
	dbcpp_ccship_rel CS,
	dps_organization ORG,
	dps_user_org DO,
	dbcpp_cost_center CC
where              
	O.profile_id =DO.user_id
	and DO.organization = ORG.org_id
	and O.order_id = SG.order_ref
	and CS.shipping_group_id = SG.shipping_group_id
	and CS.cost_center_id = CC.cost_center_id
	and O.state = 'NO_PENDING_ACTION'
group by organization, costcenter
         
Command completed successfully, 0 rows affected.




create view drpt_dlr_org_cc_o
as
             select ORG.name as organization, CC.identifier as costcenter,round(sum(CO.amount),2) as amount
from 	dcspp_order O,
	dbcpp_ccorder_rel CO,
	dps_organization ORG,
	dps_user_org DO,
	dbcpp_cost_center CC
where              
	O.profile_id =DO.user_id
	and DO.organization = ORG.org_id
	and O.order_id = CO.order_id
	and CO.cost_center_id = CC.cost_center_id
	and O.state = 'NO_PENDING_ACTION'
group by organization, costcenter
         
Command completed successfully, 0 rows affected.




create view drpt_dlr_org_cc
as
             select O.organization as organization, O.costcenter as costcenter,
(sum(I.amount) + sum(O.amount)) as amount
from drpt_dlr_org_cc_i I,
drpt_dlr_org_cc_o O
where O.organization = I.organization
and O.costcenter = I.costcenter
group by organization, costcenter
UNION
select I.organization as organization, I.costcenter as costcenter,
sum(I.amount) as amount
from drpt_dlr_org_cc_i I
where NOT EXISTS (select 1 from drpt_dlr_org_cc_o xx 
where xx.organization = I.organization
and xx.costcenter = I.costcenter)
group by organization, costcenter
UNION
select O.organization as organization, O.costcenter as costcenter,
sum(O.amount) as amount
from drpt_dlr_org_cc_o O
where NOT EXISTS (select 1 from drpt_dlr_org_cc_i xx
where xx.organization = O.organization
and xx.costcenter = O.costcenter)
group by organization, costcenter
         
Command completed successfully, 0 rows affected.




create view drpt_dlr_parts
as
             select S.manuf_part_num as partnumber, round(sum(AI.amount),2) as amount
from  	dcspp_order O,
	dcspp_item I, 
	dbc_sku S,
	dcspp_amount_info AI
where 
  O.order_id = I.order_ref
  and O.state='NO_PENDING_ACTION'
  and I.price_info = AI.amount_info_id
  and I.catalog_ref_id = S.sku_id
group by partnumber
         
Command completed successfully, 0 rows affected.




create view drpt_ordr_by_date
as
             select (convert_varchar(year(O.submitted_date))+'/'+convert_varchar(month(O.submitted_date))+'/'+convert_varchar(dayofmonth(O.submitted_date))) as datesubmitted, count(distinct O.order_id) as orders, round(sum(AI.amount),2) as totalamount
from    dcspp_order O,
  dcspp_item I, 
  dcspp_amount_info AI
where   O.submitted_date is not null
  and O.order_id = I.order_ref
  and I.price_info = AI.amount_info_id
  and O.state = 'NO_PENDING_ACTION'
group by datesubmitted
         
Command completed successfully, 0 rows affected.




create view drpt_ordr_org
as
             select ORG.name as organization, count(*) as orders
from 	dcspp_order O,
	dps_organization ORG,
	dps_user_org DO
where              
	O.profile_id =DO.user_id
	and DO.organization = ORG.org_id
	and O.state = 'NO_PENDING_ACTION'
group by organization
         
Command completed successfully, 0 rows affected.




create view drpt_ordr_buyr
as
             select ORG.name as organization, DU.id as buyerid, (DU.last_name + ',' + DU.first_name) as buyer, count(*) as orders
from 	dcspp_order O,
	dps_user DU,
	dps_organization ORG,
	dps_user_org DO
where              
	O.profile_id =DU.id
	and DU.id = DO.user_id
	and DO.organization = ORG.org_id
	and O.state = 'NO_PENDING_ACTION'
group by organization, DU.id, buyer
         
Command completed successfully, 0 rows affected.




create view drpt_ordr_org_cc
as
             select ORG.name as organization, CC.identifier as costcenter, count(*) as orders
from 	dcspp_order O,
	dps_organization ORG,
	dps_user_org DO,
	dbcpp_cost_center CC, 
	dbcpp_order_cc OCC
where              
	O.profile_id =DO.user_id
	and DO.organization = ORG.org_id
	and O.state = 'NO_PENDING_ACTION'
	and O.order_id = OCC.order_id
	and OCC.cost_centers = CC.cost_center_id
group by organization, costcenter
         
Command completed successfully, 0 rows affected.




create view drpt_part_purchsed
as
             select Distinct S.manuf_part_num as partnumber, M.manufacturer_name as manufacturer 
from	
	dcspp_order O,
	dbc_sku S,
	dcspp_item I,
	dbc_product P,
	dbc_manufacturer M
where	
	O.state='NO_PENDING_ACTION'
	and O.order_id = I.order_ref
	and S.sku_id = I.catalog_ref_id
	and I.product_id=P.product_id
	and P.manufacturer=M.manufacturer_id
         
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.


SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.
-- Developing Commerce Web Applications
-- Lab exercise setup script
-- Last modified: 10-January-2006

-- These tables are needed in addition to default tables 
drop table dynamusic_tour_concerts
SOLID Table Error 13011: Table DYNAMUSIC_TOUR_CONCERTS does not exist


drop table dynamusic_tour_venue
SOLID Table Error 13011: Table DYNAMUSIC_TOUR_VENUE does not exist


drop table dynamusic_tour_artists
SOLID Table Error 13011: Table DYNAMUSIC_TOUR_ARTISTS does not exist


drop table dynamusic_fanclub
SOLID Table Error 13011: Table DYNAMUSIC_FANCLUB does not exist


drop table dynamusic_poster
SOLID Table Error 13011: Table DYNAMUSIC_POSTER does not exist


drop table dynamusic_tour
SOLID Table Error 13011: Table DYNAMUSIC_TOUR does not exist


drop table dynamusic_newsongs_playlist
SOLID Table Error 13011: Table DYNAMUSIC_NEWSONGS_PLAYLIST does not exist


drop table dynamusic_credit_card
SOLID Table Error 13011: Table DYNAMUSIC_CREDIT_CARD does not exist


drop table dynamusic_auth_pmnt
SOLID Table Error 13011: Table DYNAMUSIC_AUTH_PMNT does not exist


drop table dynamusic_org_info
SOLID Table Error 13011: Table DYNAMUSIC_ORG_INFO does not exist


drop table dynamusic_user
SOLID Table Error 13011: Table DYNAMUSIC_USER does not exist


drop table dynamusic_prefgenres
SOLID Table Error 13011: Table DYNAMUSIC_PREFGENRES does not exist


drop table dynamusic_viewedartists
SOLID Table Error 13011: Table DYNAMUSIC_VIEWEDARTISTS does not exist


drop table dynamusic_viewedsongs
SOLID Table Error 13011: Table DYNAMUSIC_VIEWEDSONGS does not exist


drop table dynamusic_user_playlists
SOLID Table Error 13011: Table DYNAMUSIC_USER_PLAYLISTS does not exist


drop table dynamusic_playlist_song
SOLID Table Error 13011: Table DYNAMUSIC_PLAYLIST_SONG does not exist


drop table dynamusic_playlist
SOLID Table Error 13011: Table DYNAMUSIC_PLAYLIST does not exist


drop table dynamusic_venue_eventtypes
SOLID Table Error 13011: Table DYNAMUSIC_VENUE_EVENTTYPES does not exist


drop table dynamusic_concert_artists
SOLID Table Error 13011: Table DYNAMUSIC_CONCERT_ARTISTS does not exist


drop table dynamusic_concert
SOLID Table Error 13011: Table DYNAMUSIC_CONCERT does not exist


drop table dynamusic_venue
SOLID Table Error 13011: Table DYNAMUSIC_VENUE does not exist


drop table dynamusic_album_songs
SOLID Table Error 13011: Table DYNAMUSIC_ALBUM_SONGS does not exist


drop table dynamusic_classical_song
SOLID Table Error 13011: Table DYNAMUSIC_CLASSICAL_SONG does not exist


drop table dynamusic_song
SOLID Table Error 13011: Table DYNAMUSIC_SONG does not exist


drop table dynamusic_artist_soloist
SOLID Table Error 13011: Table DYNAMUSIC_ARTIST_SOLOIST does not exist


drop table dynamusic_artist_group_members
SOLID Table Error 13011: Table DYNAMUSIC_ARTIST_GROUP_MEMBERS does not exist


drop table dynamusic_CDROM_product_OS
SOLID Table Error 13011: Table DYNAMUSIC_CDROM_PRODUCT_OS does not exist


drop table dynamusic_CDROM_product
SOLID Table Error 13011: Table DYNAMUSIC_CDROM_PRODUCT does not exist


drop table dynamusic_product
SOLID Table Error 13011: Table DYNAMUSIC_PRODUCT does not exist


drop table dynamusic_album_product
SOLID Table Error 13011: Table DYNAMUSIC_ALBUM_PRODUCT does not exist


drop table dynamusic_artist
SOLID Table Error 13011: Table DYNAMUSIC_ARTIST does not exist


drop table dynamusic_product
SOLID Table Error 13011: Table DYNAMUSIC_PRODUCT does not exist


drop table dynamusic_item_bought
SOLID Table Error 13011: Table DYNAMUSIC_ITEM_BOUGHT does not exist



commit work
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_artist (
        id                      VARCHAR(32)     not null,
        name                    VARCHAR(100)    null,
        description             LONG VARCHAR    null,
        image                   VARCHAR(32)     null,
        genre			INTEGER		null,
        artist_type		INTEGER		null,
        primary key(id)
        )
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_artist_group_members (
        artist_id               VARCHAR(32)     not null,
        member_name             VARCHAR(32)     not null,
        primary key(artist_id,member_name)
        )
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_artist_group_members_idx ON dynamusic_artist_group_members(artist_id)
Command completed successfully, 0 rows affected.


        
CREATE TABLE dynamusic_artist_soloist (
	artist_id		VARCHAR(32)	not null,
	first_name		VARCHAR(100)	null,
	last_name		VARCHAR(100)	null,
	primary key(artist_id)
	)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_artist_soloist_idx ON dynamusic_artist_soloist(artist_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_song (
        id                      VARCHAR(32)     not null,
        title                   VARCHAR(100)    null,
        genre                   INTEGER         null,
        download                VARCHAR(100)    null,
--        artist                  VARCHAR(32)     null references dynamusic_artist(id),
        artist                  VARCHAR(32)     null,
        lyrics                  LONG VARCHAR    null,
        song_size		INTEGER		null,
        song_length		INTEGER		null,
        song_type		VARCHAR(20)	null,
        primary key(id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_classical_song (
        song_id                 VARCHAR(32)     not null,
        performer		VARCHAR(100)    null,
        primary key(song_id)
        )
Command completed successfully, 0 rows affected.


        
CREATE TABLE dynamusic_venue (
        id                      VARCHAR(32)     not null,
        name                    VARCHAR(100)    null,
        description             LONG VARCHAR    null,
        street1                 VARCHAR(100)    null,
        street2                 VARCHAR(100)    null,
        state                   VARCHAR(32)     null,
        city                    VARCHAR(50)     null,
        zip                     VARCHAR(10)     null,
        phone			VARCHAR(20)	null,
        image                   VARCHAR(100)    null,
        url                     VARCHAR(100)    null,
        primary key(id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_venue_eventtypes (
        venue_id                VARCHAR(32)     not null,
        event_type              VARCHAR(32)     not null,
        primary key(venue_id, event_type)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_concert (
        id                      VARCHAR(32)     not null,
        name                    VARCHAR(100)    null,
        description             LONG VARCHAR    null,
        venue                   VARCHAR(32)     null references dynamusic_venue(id),
        image                   VARCHAR(100)    null,
        event_date              TIMESTAMP       null,
        primary key(id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_concert_artists (
        concert_id              VARCHAR(32)     not null references dynamusic_concert(id),
--        artist_id               VARCHAR(32)     not null references dynamusic_artist(id),
        artist_id               VARCHAR(32)     not null,
        primary key(concert_id, artist_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_concert_artists_concert_idx ON dynamusic_concert_artists(concert_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_user (
        user_id                 VARCHAR(32)     not null references dps_user(id),
        info                    LONG VARCHAR    null,
        share_profile           NUMERIC(1)      null,
        CHECK (share_profile in (0, 1)),
        subscriber           NUMERIC(1)      null,
        CHECK (subscriber in (0, 1)),
        initial_download_number		INTEGER		null,
        my_download_number		INTEGER		null,
	num_orders	integer	not null,
	cum_order_amt	double precision	not null,
	avg_order_amt	double precision	not null,
	use_org_approver	numeric(1,0)	null,
	use_org_costctr	numeric(1,0)	null,
	use_org_billaddr	numeric(1,0)	null,
	use_org_shipaddr	numeric(1,0)	null,
	use_org_payment	numeric(1,0)	null,
	use_org_vendors	numeric(1,0)	null,
	use_org_purchlst	numeric(1,0)	null,
        primary key(user_id),
        check (use_org_approver in (0,1)),
	check (use_org_costctr in (0,1)),
	check (use_org_billaddr in (0,1)),
	check (use_org_shipaddr in (0,1)),
	check (use_org_payment in (0,1)),
	check (use_org_vendors in (0,1)),
	check (use_org_purchlst in (0,1))
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_user_user_idx ON dynamusic_user(user_id)
Command completed successfully, 0 rows affected.



alter table dynamusic_user set pessimistic
Command completed successfully, 0 rows affected.




create table dynamusic_org_info (
	org_id	varchar(40)	not null,
	logo	varchar(40)	null,
	cc_auth	numeric(1,0)	null,
	invoice_auth	numeric(1,0)	null,
	store_crdt_auth	numeric(1,0)	null,
	gift_crt_auth	numeric(1,0)	null,
	use_prnt_approver	numeric(1,0)	null,
	use_prnt_costctr	numeric(1,0)	null,
	use_prnt_billaddr	numeric(1,0)	null,
	use_prnt_shipaddr	numeric(1,0)	null,
	use_prnt_payment	numeric(1,0)	null,
	use_prnt_vendors	numeric(1,0)	null,
	use_prnt_purchlst	numeric(1,0)	null
, primary key (org_id)
, foreign key (org_id) references dps_organization (org_id)
, check (cc_auth in (0,1))
, check (invoice_auth in (0,1))
, check (store_crdt_auth in (0,1))
, check (gift_crt_auth in (0,1))
, check (use_prnt_approver in (0,1))
, check (use_prnt_costctr in (0,1))
, check (use_prnt_billaddr in (0,1))
, check (use_prnt_shipaddr in (0,1))
, check (use_prnt_payment in (0,1))
, check (use_prnt_vendors in (0,1))
, check (use_prnt_purchlst in (0,1))
)
Command completed successfully, 0 rows affected.



alter table dynamusic_org_info set pessimistic
Command completed successfully, 0 rows affected.



create table dynamusic_auth_pmnt (
	id	varchar(40)	not null,
	cc_auth	numeric(1,0)	null,
	invoice_auth	numeric(1,0)	null,
	store_crdt_auth	numeric(1,0)	null,
	gift_crt_auth	numeric(1,0)	null
, primary key (id)
, foreign key (id) references dps_user (id)
, check (cc_auth in (0,1))
, check (invoice_auth in (0,1))
, check (store_crdt_auth in (0,1))
, check (gift_crt_auth in (0,1)))
Command completed successfully, 0 rows affected.



alter table dynamusic_auth_pmnt set pessimistic
Command completed successfully, 0 rows affected.




create table dynamusic_credit_card (
	id	varchar(40)	not null,
	cc_first_name	wvarchar(40)	null,
	cc_middle_name	wvarchar(40)	null,
	cc_last_name	wvarchar(40)	null
, primary key (id)
, foreign key (id) references dps_credit_card (id))
Command completed successfully, 0 rows affected.



create index dynamusic_crcdba_idx on dynamusic_credit_card (cc_last_name)
Command completed successfully, 0 rows affected.


alter table dynamusic_credit_card set pessimistic
Command completed successfully, 0 rows affected.



create table dynamusic_item_bought (
	id	varchar(40)	not null	references dps_user (id),
	sequence_num	integer	not null,
	item	varchar(40)	not null,
	primary key (id,sequence_num)
)
Command completed successfully, 0 rows affected.



create index dyn_itm_bht_id_idx on dynamusic_item_bought (id)
Command completed successfully, 0 rows affected.


alter table dynamusic_item_bought set pessimistic
Command completed successfully, 0 rows affected.




CREATE TABLE dynamusic_prefgenres (
        id                      VARCHAR(32)     not null references dps_user(id),
        genre                   VARCHAR(32)     not null,
        primary key(id, genre)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_prefgenres_idx ON dynamusic_prefgenres(id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_viewedartists (
        user_id                 VARCHAR(32)     not null references dps_user(id),
--        artist_id               VARCHAR(32)     not null references dynamusic_artist(id),
        artist_id               VARCHAR(32)     not null,
        primary key(user_id, artist_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_viewedartists_idx ON dynamusic_viewedartists(user_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_viewedsongs (
        user_id                 VARCHAR(32)     not null references dps_user(id),
--        song_id               VARCHAR(32)     not null references dynamusic_song(id),
        song_id               VARCHAR(32)     not null,
        primary key(user_id, song_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_viewedsongs_idx ON dynamusic_viewedsongs(user_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_playlist (
        id                      VARCHAR(32)     not null,
        name                    VARCHAR(100)    null,
        publish                 NUMERIC(1)      null,
        description             LONG VARCHAR    null,
           CHECK (publish in (0, 1)),
        primary key(id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_playlist_song (
        pl_id                   VARCHAR(32)     not null references dynamusic_playlist(id),
        song_id                 VARCHAR(32)     not null references dynamusic_song(id),
        primary key(song_id, pl_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_playlist_song_pl_idx ON dynamusic_playlist_song(pl_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_user_playlists (
        user_id                 VARCHAR(32)     not null references dps_user(id),
        pl_id                   VARCHAR(32)     not null references dynamusic_playlist(id),
        primary key(user_id, pl_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_user_playlists_user_idx ON dynamusic_user_playlists(user_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_newsongs_playlist (
        user_id                 VARCHAR(32)     not null references dps_user(id),
        newsongs_playlist       LONG VARCHAR    null,
        newsongs_auto_update    NUMERIC(1)      null,
        primary key(user_id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_tour (
     id            VARCHAR(32)     not null,
     tour_name     VARCHAR(32)     null,
     primary key(id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_poster (
     artist_id     VARCHAR(32)     not null,
     tour_id       VARCHAR(32)     not null references dynamusic_tour(id),
     poster_name   VARCHAR(32)     null,
     image         VARCHAR(32)     null,
     primary key(artist_id, tour_id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_fanclub (
     organization_id	VARCHAR(32)	not null,
     download_limit	INTEGER		not null,
     primary key(organization_id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_tour_artists (
        tour_id      VARCHAR(32)     not null references dynamusic_tour(id),
--        artist_id    VARCHAR(32)     not null references dynamusic_artist(id),
        artist_id    VARCHAR(32)     not null,
        primary key(tour_id, artist_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_tour_artists_tour_idx ON dynamusic_tour_artists(tour_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_tour_venue (
        tour_id      VARCHAR(32)     not null references dynamusic_tour(id),
        venue_id     VARCHAR(32)     not null references dynamusic_venue(id),
        primary key(tour_id, venue_id)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_tour_venue_tour_idx ON dynamusic_tour_venue(tour_id)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_tour_concerts (
        tour_id      VARCHAR(32)     not null references dynamusic_tour(id),
        date_key          VARCHAR(32)     not null,
        concert   VARCHAR(32)     not null references dynamusic_concert(id),
        primary key(tour_id, date_key)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_product (
        product_id	VARCHAR(40)	NOT NULL	REFERENCES dcs_product(product_id),
        available	TINYINT		null,
        downloadable    TINYINT		null,
        PRIMARY KEY(product_id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_album_product (
        product_id	VARCHAR(40)	NOT NULL	REFERENCES dcs_product(product_id),
        album_title	VARCHAR(100)    null,
        album_length    VARCHAR(20)		null,
        artist          VARCHAR(32)     null references dynamusic_artist(id),
        release_date	TIMESTAMP	null,
        genre           INTEGER         null,
        CD_type		VARCHAR(20)	null,		
        PRIMARY KEY(product_id)
)
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_CDROM_product (
        product_id              VARCHAR(40)     not null,
        description		LONG VARCHAR	null,
        primary key(product_id)
        )
Command completed successfully, 0 rows affected.


        
CREATE TABLE dynamusic_CDROM_product_OS (
        product_id      VARCHAR(40)     not null references dynamusic_CDROM_product(product_id),
        os_option	VARCHAR(100)    not null,
        primary key(product_id)
        )
Command completed successfully, 0 rows affected.



CREATE TABLE dynamusic_album_songs (
        album_id                VARCHAR(32)     not null references dynamusic_album_product(product_id),
        song_list               VARCHAR(32)     not null references dynamusic_song(id),
        primary key(album_id, song_list)
)
Command completed successfully, 0 rows affected.



CREATE INDEX dynamusic_album_songs_album_idx ON dynamusic_album_songs(album_id)
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.



SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.
drop table loyalty_transactions
SOLID Table Error 13011: Table LOYALTY_TRANSACTIONS does not exist



commit work
Command completed successfully, 0 rows affected.




CREATE TABLE loyalty_transactions (
		id					VARCHAR(32)			not null,
		amount				INTEGER				null,
		description			LONG VARCHAR		null,
		transaction_date	TIMESTAMP			null,
		profile_id			VARCHAR(32)			null,
		primary key(id)		
)
Command completed successfully, 0 rows affected.



CREATE TABLE loyalty_user_transactions (
		user_id                 VARCHAR(32)     not null references dps_user(id),
        loyalty_trans_id		VARCHAR(32)     not null references loyalty_transactions(id),
        sequence_num  			INTEGER,
        primary key(user_id, loyalty_trans_id)
)
Command completed successfully, 0 rows affected.



commit work
Command completed successfully, 0 rows affected.

SOLID SQL Editor exiting.
Solid SQL Editor (teletype) v.03.70.0024
(C) Copyright Solid Information Technology Ltd 1993-2002
Execute SQL statements terminated by a semicolon.
Exit by giving command: exit;
Connected to 'tcp localhost 1313'.
drop table dcspp_loyalty_points_payment_group
SOLID Table Error 13011: Table DCSPP_LOYALTY_POINTS_PAYMENT_GROUP does not exist



commit work
Command completed successfully, 0 rows affected.



CREATE TABLE loyalty_points_payment_group (
		id					VARCHAR(32)				NOT NULL,
		user_id             VARCHAR(32)     		not null references dps_user(id),
		loyalty_points		INTEGER					null,
		primary key(id)	
)
Command completed successfully, 0 rows affected.



CREATE TABLE loyalty_users_payment_groups (
		id							VARCHAR(32)				NOT NULL,
		loyalty_points_group_id   	VARCHAR(32)     		not null references loyalty_points_payment_group(id),
		primary key(id)	
)
Command completed successfully, 0 rows affected.



CREATE TABLE loyalty_status (
		status_id			VARCHAR(32)				NOT NULL references dcspp_pay_status(status_id),
		auth_expiration     TIMESTAMP	     		null,
		primary key(status_id)	
)
Command completed successfully, 0 rows affected.




commit work
Command completed successfully, 0 rows affected.

SOLID SQL Editor exiting.
